{
	instances: [
	{
		//Shadow for drawing an 'iris' transition effect. It looks for
		//Frogatto in the level, finds out where he is in screen space
		//and then blacks out everything except a circle around him.
		//The circle's size is proportional to how far along the
		//transition is.
		name: "iris_transition",
		new: true,
		vertex: """
			uniform mat4 u_anura_mvp_matrix;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		""",

		fragment: """
           	#version 120
			uniform sampler2D u_anura_tex_map;
			uniform float u_anura_cycle;

			//player's position in screen space.
			uniform vec2 u_player_pos;
			uniform vec4 u_anura_draw_area;

			//value which is 0.0 when the transition has just started
			//and 1.0 when the transition is complete.
			uniform float u_transition_ratio;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				float dist_x = v_texcoord.x - u_player_pos.x;
				float dist_y = v_texcoord.y - u_player_pos.y;

				float dist = dist_x*dist_x + dist_y*dist_y;

				float max_dist = (1.0 - u_transition_ratio)*(1.0 - u_transition_ratio)*0.7;


				if(dist > max_dist) {
					gl_FragColor = vec4(0.0,0.0,0.0,1.0);
				} else {
					gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
					if(gl_FragColor.a > 0.02) {
						gl_FragColor.a = 1.0;
					}
				}
			}
		""",

		draw: """[
			set(uniform_commands.u_transition_ratio, level.transition_ratio),
			if(frogatto, [
				set(uniform_commands.u_player_pos, [
					(frogatto.mid_x - level.camera_position[0])/decimal(level.camera_position[2]),
					1.0 - (frogatto.mid_y - level.camera_position[1])/decimal(level.camera_position[3]),
				])
			]),
		] where frogatto = find(level.chars, value is obj frogatto_playable)""",
	},

	{
		name: "water_distort",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			//uniform float u_anura_cycle;
			//uniform vec4 u_anura_sprite_area;
			//uniform vec4 u_anura_draw_area;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
			uniform sampler2D u_anura_tex_map;
			uniform sampler2D u_water_tex;
			uniform float u_water_tex_dim;
			uniform float u_water_tex_speed;
			uniform vec4 u_camera_pos;
			//uniform float u_intensity;
			uniform vec4 u_water_area[8];
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				vec4 blend_color = vec4(0.0,0.0,0.0,0.0);
				vec2 texcoord = v_texcoord;
				
				for(int n = 0; n != 8; ++n) {
					if(u_water_area[n][0] >= u_water_area[n][2]) {
						break;
					}

					float left = max(u_anura_draw_area[0], u_water_area[n][0]);
					float top = max(u_anura_draw_area[1], u_water_area[n][1]);
					float right = min(u_anura_draw_area[2], u_water_area[n][2]);
					float bottom = min(u_anura_draw_area[3], u_water_area[n][3]);
					if(v_vertex.x > left
					   && v_vertex.y > top
					   && v_vertex.x < right 
					   && v_vertex.y < bottom){
						float falloff_ratio = min(min(v_vertex.x - left, right - v_vertex.x)/40.0,1.0);
						texcoord.x = texcoord.x + falloff_ratio*sin((u_anura_draw_area[0] + v_vertex.x)*0.02 + u_anura_cycle/20.0)/300.0;
						vec2 loc = vec2(u_camera_pos[0]/u_anura_draw_area[2], -u_camera_pos[1]/u_anura_draw_area[3]) + texcoord;
						loc.x *= u_anura_draw_area[2]/u_water_tex_dim;
						loc.y *= u_anura_draw_area[2]/u_water_tex_dim;
						blend_color = (texture2D(u_water_tex, loc + vec2(u_anura_cycle*u_water_tex_speed, 0.0)) + texture2D(u_water_tex, loc + vec2(u_anura_cycle*u_water_tex_speed, 0.5)))*0.5; //vec4(0.0,200/255.0,150/255.0,0.5);
					}
				}
				vec4 fb_color = texture2D(u_anura_tex_map, texcoord);
				float fb_grayscale = (fb_color[0] + fb_color[1] + fb_color[2])/3.0;

				vec4 search_left = texture2D(u_anura_tex_map, texcoord + vec2(-10.0/u_anura_draw_area[2], 0.0));
				vec4 search_right = texture2D(u_anura_tex_map, texcoord + vec2(+10.0/u_anura_draw_area[2], 0.0));
				vec4 search_down = texture2D(u_anura_tex_map, texcoord + vec2(0.0, +10.0/u_anura_draw_area[2]));

				float grayscale_left = search_left[0] + search_left[1] + search_left[2];
				float grayscale_right = search_right[0] + search_right[1] + search_right[2];
				float grayscale_down = search_down[0] + search_down[1] + search_down[2];

				if(fb_grayscale < 0.02 || grayscale_left < 0.02 || grayscale_right < 0.02 || grayscale_down < 0.02) {
					float grayscale_threshold = 0.35;
					if(fb_grayscale < grayscale_threshold) {
						blend_color[3] *= fb_grayscale / grayscale_threshold;
					}
				}


				gl_FragColor = mix(fb_color, blend_color, blend_color[3]);
			}
		",

		draw: "[if(water_rects, [
		                       set(uniform_commands.u_water_area, fold(water_rects_terminated[:8], a+b))
							      where water_rects_terminated = water_rects + [[0,0,0,0]],
					bind_texture(water_tex, 2),
					set(uniform_commands.u_water_tex, 2),
					set(uniform_commands.u_water_tex_dim, ctrl.texture_dim),
					set(uniform_commands.u_water_tex_speed, ctrl.texture_speed),
					set(uniform_commands.u_camera_pos, level.camera_position),
					set(textures, [water_tex]),


				] where water_tex = ctrl.get_texture
				  where ctrl = find_or_die(level.chars, value is obj liquid),
							   set(uniform_commands.u_water_area, [0,0,0,0])),
							   ]

		  where water_rects = (
		
		[ [water._x_bound - pos[0], water._y_bound - pos[1], water._x2_bound - pos[0], water._y2_bound - pos[1]]
		  | water <- level.chars,
			water is obj liquid,
			rects_intersect([water._x_bound, water._y_bound, water._x2_bound, water._y2_bound], camera_rect)
		] where camera_rect = [pos[0], pos[1], pos[0]+pos[2], pos[1]+pos[3]]
		  where pos = level.camera_position
		)
		"
	},

	{
		name: "wind_distort",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			//uniform float u_anura_cycle;
			//uniform vec4 u_anura_sprite_area;
			//uniform vec4 u_anura_draw_area;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
			uniform sampler2D u_anura_tex_map;
			//uniform float u_intensity;
			uniform vec4 u_wind_area[2];
			uniform float u_wind_state;
			uniform float u_y1_positions[2];
			uniform float u_y2_positions[2];
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				vec2 texcoord = v_texcoord;
				
				for(int n = 0; n != 2; ++n) {
					if(u_wind_area[n][0] >= u_wind_area[n][2]) {
						break;
					}

					float left = max(u_anura_draw_area[0], u_wind_area[n][0]);
					float top = max(u_anura_draw_area[1], u_wind_area[n][1]);
					float right = min(u_anura_draw_area[2], u_wind_area[n][2]);
					float bottom = min(u_anura_draw_area[3], u_wind_area[n][3]);
					if(v_vertex.x > left
					   && v_vertex.y > top
					   && v_vertex.x < right 
					   && v_vertex.y < bottom){

						float raw_ypos = (v_vertex.y - top)/(bottom - top);
						float normalized_ypos = u_y1_positions[n] + (u_y2_positions[n] - u_y1_positions[n])*raw_ypos;

						//TODO: we have the normalized_ypos which is in [0,1] and tells us how high within the wind
						//rectangle we are. Use this to calculate distortion which is by how much we will distort
						//pixels in the x-axis.
						float distortion =  sin(1.0 - normalized_ypos)*sin(u_anura_cycle*0.01)*0.05 +
											sin(1.0 - normalized_ypos)*(0.20 * u_wind_state);

						texcoord.x = texcoord.x + distortion;
					}
				}
				gl_FragColor = texture2D(u_anura_tex_map, texcoord);
			}
		",

		draw: "[if(wind_rects, set(uniform_commands.u_wind_area, fold(wind_rects[:2], a+b)),
							   set(uniform_commands.u_wind_area, [0,0,0,0])),
				set(uniform_commands.u_y1_positions, (y1_positions + [0,0])[:2]),
				set(uniform_commands.u_y2_positions, (y2_positions + [0,0])[:2]),
							   ]

		  where wind_rects = map(rect_info, value.area)
		  where y1_positions = map(rect_info, value.y1)
		  where y2_positions = map(rect_info, value.y2)
		  
		  where rect_info = (
		
		[ {
			area: [wind._x_bound - pos[0], wind._y_bound - pos[1], wind._x2_bound - pos[0], wind._y2_bound - pos[1]],
		    y1: max(0.0, decimal(camera_rect[1] - wind._y_bound)/(wind._y2_bound - wind._y_bound)),
		    y2: min(1.0, decimal(camera_rect[3] - wind._y_bound)/(wind._y2_bound - wind._y_bound)),
		  }

		  | wind <- level.chars,
			wind.type = 'wind_distortion_controller',
			rects_intersect([wind._x_bound, wind._y_bound, wind._x2_bound, wind._y2_bound], camera_rect)
		] where camera_rect = [pos[0], pos[1], pos[0]+pos[2], pos[1]+pos[3]]
		  where pos = level.camera_position
		)
		"
	}, 

	{
		name: "rain_distort",
		new: true,
		vertex: "
			//boiler plate vertex shader. Probably doesn't need modification. The fragment shader
			//is where the fun is.
			uniform mat4 u_anura_mvp_matrix;
			//uniform float u_anura_cycle;
			//uniform vec4 u_anura_sprite_area;
			//uniform vec4 u_anura_draw_area;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
			uniform sampler2D u_anura_tex_map;
			uniform sampler2D u_rain_tex;
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;

			void main()
			{
				//right now this just gets the color from the frame buffer, gets the color from our
				//noise texture and 50/50 mixes the two.
				vec2 texcoord = v_texcoord;
				
				vec2 canvas_size = vec2(u_anura_draw_area[2], u_anura_draw_area[3]);
				vec2 rain_texcoord = texcoord*(canvas_size/vec2(256.0, 64.0));
				float animation_frame = floor(mod(floor(u_anura_cycle/5.0), 4.0));
				rain_texcoord.x = fract(rain_texcoord.x)/2.0 + animation_frame/4.0;
				rain_texcoord.y += u_anura_cycle/10.0;
				vec4 rain_col = texture2D(u_rain_tex, rain_texcoord);

				float cycle = fract(u_anura_cycle*0.15);
				float raw_translation = (rain_col.r / -0.19 / canvas_size.y);
				float translation = raw_translation * cycle * 2.0;
				vec4 fb_color_untranslated = texture2D(u_anura_tex_map,texcoord);
				texcoord.y=clamp(texcoord.y-translation * cycle, 0.0, 0.9999);
				vec4 fb_color = texture2D(u_anura_tex_map,texcoord);
				
				float alpha_level = clamp((cycle - 0.5) * 2.0, 0.0, 1.0);       // Controls rain opacity falloff
				fb_color = mix(fb_color, fb_color_untranslated, alpha_level);
				
				if(raw_translation < 0.0) {
   			 		fb_color = mix(fb_color, vec4(0.9, 0.9, 1.2, 0.1), 0.040);
				}
	

				//run another set of rain at a different phase.
				texcoord = v_texcoord;
				
				canvas_size = vec2(u_anura_draw_area[2], u_anura_draw_area[3]);
				rain_texcoord = texcoord*(canvas_size/vec2(256.0, 64.0));
				animation_frame = floor(mod(floor(u_anura_cycle/6.2), 4.0));
				rain_texcoord.x = fract(rain_texcoord.x)/2.0 + animation_frame/4.0;
				rain_texcoord.y += u_anura_cycle/11.2;
				rain_col = texture2D(u_rain_tex, rain_texcoord);

				cycle = fract(u_anura_cycle*0.23);
				raw_translation = (rain_col.r / -0.19 / canvas_size.y);
				translation = raw_translation * cycle * 2.0;
				fb_color_untranslated = fb_color;
				texcoord.y=clamp(texcoord.y-translation * cycle, 0.0, 0.9999);
				if(raw_translation < 0.0) {
					fb_color = texture2D(u_anura_tex_map,texcoord);
				}
				
				alpha_level = clamp((cycle - 0.5) * 2.0, 0.0, 1.0);       // Controls rain opacity falloff
				fb_color = mix(fb_color, fb_color_untranslated, alpha_level);
				
				if(raw_translation < 0.0) {
   			 		fb_color = mix(fb_color, vec4(0.9, 0.9, 1.2, 0.1), 0.080);
				}

				gl_FragColor = fb_color;
			}
		",

		draw: "
		[
		//fish the texture we want out of our controller. In future there will be a much nicer and easier way to do this.
		bind_texture(ctrl.rain_texture, 2),
		set(uniform_commands.u_rain_tex, 2),
		set(textures, [ctrl.rain_texture]),
		]
		where ctrl = find_or_die(level.chars, value is obj rain_effect_controller)
		"
	},
	
	{
		name: "shadow",
		new: true,
		vertex: "
			//boiler plate vertex shader. Probably doesn't need modification.
			//The fragment shader is where the fun is.
			uniform mat4 u_anura_mvp_matrix;
			//uniform float u_anura_cycle;
			//uniform vec4 u_anura_sprite_area;
			//uniform vec4 u_anura_draw_area;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
			uniform sampler2D u_anura_tex_map;
			uniform sampler2D u_rain_tex;
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;

			void main()
			{
				//right now this just gets the color from the frame buffer, gets the color from our
				//noise texture and 50/50 mixes the two.
				vec2 texcoord = v_texcoord;
				
				vec2 canvas_size = vec2(u_anura_draw_area[2], u_anura_draw_area[3]);
				vec2 rain_texcoord = texcoord*(canvas_size/vec2(256.0, 64.0));
				float animation_frame = floor(mod(floor(u_anura_cycle/5.0), 4.0));
				rain_texcoord.x = fract(rain_texcoord.x)/2.0 + animation_frame/4.0;
				rain_texcoord.y += u_anura_cycle/10.0;
				vec4 rain_col = texture2D(u_rain_tex, rain_texcoord);

				float cycle = fract(u_anura_cycle*0.15);
				float raw_translation = (rain_col.r / -0.19 / canvas_size.y);
				float translation = raw_translation * cycle * 2.0;
				vec4 fb_color_untranslated = texture2D(u_anura_tex_map,texcoord);
				texcoord.y=clamp(texcoord.y-translation * cycle, 0.0, 0.9999);
				vec4 fb_color = texture2D(u_anura_tex_map,texcoord);
				
				float alpha_level = clamp((cycle - 0.5) * 2.0, 0.0, 1.0);       // Controls rain opacity falloff
				fb_color = mix(fb_color, fb_color_untranslated, alpha_level);
				
				if(raw_translation < 0.0) {
   			 		fb_color = mix(fb_color, vec4(0.9, 0.9, 1.2, 0.1), 0.040);
				}
	

				//run another set of rain at a different phase.
				texcoord = v_texcoord;
				
				canvas_size = vec2(u_anura_draw_area[2], u_anura_draw_area[3]);
				rain_texcoord = texcoord*(canvas_size/vec2(256.0, 64.0));
				animation_frame = floor(mod(floor(u_anura_cycle/6.2), 4.0));
				rain_texcoord.x = fract(rain_texcoord.x)/2.0 + animation_frame/4.0;
				rain_texcoord.y += u_anura_cycle/11.2;
				rain_col = texture2D(u_rain_tex, rain_texcoord);

				cycle = fract(u_anura_cycle*0.23);
				raw_translation = (rain_col.r / -0.19 / canvas_size.y);
				translation = raw_translation * cycle * 2.0;
				fb_color_untranslated = fb_color;
				texcoord.y=clamp(texcoord.y-translation * cycle, 0.0, 0.9999);
				if(raw_translation < 0.0) {
					fb_color = texture2D(u_anura_tex_map,texcoord);
				}
				
				alpha_level = clamp((cycle - 0.5) * 2.0, 0.0, 1.0);       // Controls rain opacity falloff
				fb_color = mix(fb_color, fb_color_untranslated, alpha_level);
				
				if(raw_translation < 0.0) {
   			 		fb_color = mix(fb_color, vec4(0.9, 0.9, 1.2, 0.1), 0.080);
				}

				gl_FragColor = fb_color;
			}
		",

		draw: "
		[
		//fish the texture we want out of our controller. In future there will be a much nicer and easier way to do this.
		bind_texture(ctrl.rain_texture, 2),
		set(uniform_commands.u_rain_tex, 2),
		set(textures, [ctrl.rain_texture]),
		]
		where ctrl = find_or_die(level.chars, value is obj shadow_effect_controller)
		"
	},
	],
}
