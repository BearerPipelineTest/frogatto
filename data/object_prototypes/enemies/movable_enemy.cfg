/*
 this should be one of two primary enemy prototypes; essentially we have a divide between "enemies which can move", and "enemies which are permanently fixed in one location".  Those which can move have a bunch of extra baggage in order to handle physical collision, those which don't are much more lightweight.
 
 The key thing about this prototype is providing the "feel" of the average enemy in the game; providing a bunch of stock behaviors governing how they bounce off walls, floors and ceilings, etc, so that all mobile enemies feel like they're governed by consistent physical laws.
 
 We bake in two common assumptions to this prototype; we have the hooks for swallowability (though it can easily be turned off) since most mobile enemies are swallow/throwable.  We also have the hooks for springiness/bounceability.
 
 Required animations:  [default_anim, 'turn']
 Optional animations:  ['spring', 'hurt']
*/


{
id: "movable_enemy",
prototype: ["hittable_enemy"],


properties: {
#-------------------------- constructors/destructors --------------------------#
	general_creature_category_constructor: "commands :: [animation(default_anim)]",



#-------------------------- hittable metadata --------------------------#
	swallowable: "bool :: true",
	hurt_velocity_y: "int :: -400",
	hurt_velocity_x: "int :: 200",
	attack_damage: "int :: if(not underwater, if(higher_difficulty, 2, 1), 0)",
	taxonomy: "TaxonomyType :: enum bug",
	is_enemy_character: true,
	
//	default_anim: "string :: 'stand'",		# often replaced for enemies like fliers which don't 'stand'
											#TODO: check if this is safe to replace with 'walk' in subsequent prototypes like ant; we want 'stand' in the base, but aggressive walkers may not flinch and will just keep walking


	feet_are_bouncy: "bool :: true",

	thrown_type: "string :: me.basic_type+'.thrown'", 
	springiness: "int :: 190",
	spring_amount: "int :: 1200",
	bounce_roundness: "int :: 70",
	default_solid_dimensions: "[string] :: ['enemy','common']",

	enter_water: "[	
					splash_effect(),
					me.force_death()
				]",
#-------------------------- cosmetic motion-distortion stuff --------------------------#
/*	uses_motion_distortion: "bool :: false",
	_motion_distorter: {
		type: "class motion_distort", 
		persistent: false, 
		init: "construct('motion_distort', {obj:me})",
	},*/
	


#-------------------------- turning logic --------------------------#
	turn_cooldown: "int :: 30",
	core_turn_anim: "string :: 'turn'",

	/*
		this is used for periodic checks like testing bounds; it finds out if we're nearing 'soft' boundaries and *want* to start turning.  It doesn't check if we are actually *allowed* to; the hard limitations like the fraction-of-a-second cooldown on turning (and any "don't enter the animation because we're already in it" checks) get checked inside the actual turn_around command itself.  It just checks to see if we want to.
	
		By default it's virtual inside movable_enemy, since walkers and fliers have such different criterion.
	*/
	check_if_we_should_turn_and_do_so_if_appropriate: "commands :: null", 

	turn_around: "commands :: if(cycle-_last_turned > turn_cooldown, [set(_last_turned,cycle),set(facing, -facing),animation(appropriate_turning_animation)])",
	//turn_towards_player: "commands :: if(cycle-_last_turned > turn_cooldown and facing != direction_towards_player, animation(core_turn_anim))",

	appropriate_turning_animation: "string :: core_turn_anim", //sometimes when an object is overriding the basic flight animation, they'll want to also use a matching turn animation.  This provides an easy hook for that.

	try_facing: "def(int direction) -> commands if(direction != facing,turn_around)",

#-------------------------- turning cues --------------------------#
	is_there_a_wall_in_front_of_us: "bool :: solid(level, front + facing * max(90, sign(velocity_x)), y, 1, y2 - y)",

	
#-------------------------- vars --------------------------#
	_last_turned: { type: "int", default: -30 },
	
#-------------------------- core behavior --------------------------#
	handle_prototypal_processing: "commands :: [
//										_motion_distorter.process()
									]",
	
},




#-------------------------- collision handling --------------------------#
	/*
		For collisions against solid areas; if we're hitting something that isn't obj hittable, it should be treated like terrain.  Generally terrain, at least for feet, is going to be much more "grippy"; essentially for gameplay reasons we want "platform-like" objects to be grippable, and most non-platforms to be bouncy by default
		
		Because we don't have a way to feed terrain "surface normals" into elastic_collision, we're basically special-casing the responses for terrain based on the side of the object struck.  If we do at some point pursue that, those essentially would replace the "angle to other object's center" in the calcs.
	*/
on_collide_side: "	if(collide_with is obj hittable, 
						elastic_collision(collide_with, {multiplier: 0.7, constraint: {min: 50, max: 1000}}),
						if(not is_standing, if(abs(velocity_x) > 200, set(velocity_x, -velocity_x*(1d4*0.1)), set(velocity_x, 0)))
					) where collide_with = arg.collide_with",
					
on_collide_head: "	if(collide_with is obj hittable, 
						elastic_collision(collide_with, {multiplier: 0.7, constraint: {min: 50, max: 1000}}),
						set(velocity_y, -velocity_y/2)
					) where collide_with = arg.collide_with",
					
on_collide_feet: "	if(collide_with is obj hittable, 
						elastic_collision(collide_with, {multiplier: 1.1, constraint: {min: 50, max: 1000}}),
						if(abs(velocity_y) > 200 and feet_are_bouncy, [attempt_animation('spring', default_anim),set(velocity_y, -velocity_y/4)], set(velocity_y, 0))
					) where collide_with = arg.collide_with",

on_bounced_on: "[sound('bug-bounce.wav'),attempt_animation('spring', default_anim)]",
on_collide_damage: "me.force_death()",

#-------------------------- animation switching --------------------------#

on_end_turn_anim: "animation(default_anim)",
on_end_hurt_anim: "animation(default_anim)",
on_stuck: "if(not solid(level, midpoint_x, y+self.img_h-10), add(velocity_y, -1200), add(velocity_x, 1d600-300))",
}