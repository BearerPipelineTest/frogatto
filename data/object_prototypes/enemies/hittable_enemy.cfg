/*
	This prototype exists to allow ALL enemies, regardless of how they move, to have one common prototype for handling anything common to all enemies (it was getting a tad unwieldy having stuff semi-duplicated between `movable_enemy` and `stationary_vulnerable`).
	
	This may end up mostly being a stub; we've created it as part of the job to create status effects, but it's not clear at this point if some of the logic for those will have to go in `hittable` itself rather than here.
*/


{
id: "hittable_enemy",
prototype: ["core_shaders"],
friction: 1000,
traction: 1000,
activation_border: 1000,

hitpoints: 50,
solid_area: [5,10,20,25],
solid_dimensions: ["enemy","common"],

editor_info: {
	category: "enemies, general",
},


properties: {
#-------------------------- constructor/destructor logic --------------------------#
	epihittable_obj_constructor: "commands :: [
		general_creature_category_constructor,
		specialized_creature_category_constructor,
		specific_creature_type_constructor,
	]",

	general_creature_category_constructor: "commands :: null",	//for the very broad classes like `ant` (walkers) or `ant_flying` (fliers)
	specialized_creature_category_constructor: "commands :: null",	//for more specific classes like squirrels
	specific_creature_type_constructor: "commands :: null",	//for exact types like *just* the red squirrels, not the black ones


	epihittable_obj_destructor: "commands :: [
		general_creature_category_destructor,
		specialized_creature_category_destructor,
		specific_creature_type_destructor,
	]",

	general_creature_category_destructor: "commands :: null",	//for the very broad classes like `ant` (walkers) or `ant_flying` (fliers)
	specialized_creature_category_destructor: "commands :: null",	//for more specific classes like squirrels
	specific_creature_type_destructor: "commands :: null",	//for exact types like *just* the red squirrels, not the black ones



#-------------------------- hittable metadata --------------------------#
	team: "'evil'",


	//is_enemy_character: true,  <-- TODO: gets used to indicate if something's in the bestiary.  At some point we'll unify this so all stationary_vulnerable enemies have this too, but not right now.
	acquirable_item_drop_value: "int :: 10",					
	points_value: "int :: 10",
	
	basic_type: "string :: me.type",
	frogourmet_tag: "me.basic_type",

#-------------------------- core behavior --------------------------#
	on_process_wrapper: "def(commands do_process_handling) -> commands
					if(is_not_frozen,
						do_process_handling
					)
						where is_not_frozen = (not find(status_effect_presets, value.kind = enum frozen or value.kind = enum bubble_trapped) = null)
					",


	handle_processing: "commands :: on_process_wrapper( [handle_general_enemy_category_processing, handle_prototypal_processing] )",
	
	handle_prototypal_processing: "commands :: null",	//meant for very high-level prototypes like `movable_enemy`
	handle_general_enemy_category_processing: "commands :: null",   //meant for broad types like `ant_flying` and so on.
	handle_specialized_creature_category_processing: "commands :: null",
},




#-------------------------- core behavior --------------------------#
	on_process: "handle_processing",
}