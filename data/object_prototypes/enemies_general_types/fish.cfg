{
id: "fish",
prototype: ["movable_enemy"],
hitpoints: 50,

traction_in_water: 1000,
traction_in_air: 0,
friction: 1000,

has_feet: false,
solid_dimensions: ["enemy","common"],
solid_area: [3,3,27,19],

editor_info: {
	category: "enemies, water",
},

properties: {
#-------------------------- hittable metadata --------------------------#
	team: "'evil'",
	hurt_velocity_y: "int :: 0",
	hurt_velocity_x: "int :: 0",
	attack_damage: "if(higher_difficulty, 2, 1)",
	taxonomy: "TaxonomyType :: enum fish",
	acquirable_item_drop_value: "int :: 10",					
	points_value: "int :: 16",
	
#-------------------------- hittable overrides --------------------------#
	should_fall_when_stunned: "bool :: if(underwater, false, do_we_have_a_solid_area)",

#-------------------------- vars --------------------------#
	_x_bound: { type: "int", init: "x-200", editor_info: { type: "x", value: "x-200" } },
	_x2_bound: { type: "int", init: "x+200", editor_info: { type: "x", value: "x+200" } },
	_desired_height: { type: "int", init: "y", editor_info: { type: "y", value: "y" } },


#-------------------------- temporary vars --------------------------#
	_in_change_dimensions_fail: { type: "bool", default: false, persistent: false },

#-------------------------- core behavior --------------------------#
	target_y: "int :: lib.math.round(_desired_height + sin(cycle*3)*300)",

	player_within: "def(int distance) -> bool ((level.player.midpoint_x > midpoint_x - distance) and (level.player.midpoint_x < midpoint_x + distance) and (level.player.midpoint_y > midpoint_y - distance) and (level.player.midpoint_y < midpoint_y + distance))",
	ideal_x: "int :: int((_x2_bound + _x_bound) / 2)",
	
	inside_aggro_range: "def(int distance) -> bool (abs(ideal_x - midpoint_x) < distance)",
	
	default_solid_dimensions: "[string] :: ['enemy','common']",



	core_turn_anim: "string :: 'swim'",
	enter_water: "commands ::	[
									if(cycle > 1, splash_effect()),
								]",

#-------------------------- core processing --------------------------#
	handle_general_enemy_category_processing: "commands :: null",   //meant for broad types like `ant_flying` and so on.


},





#-------------------------- collision handling --------------------------#
//on_collide_side: "[set(velocity_x, 0), facing(-facing)]",
on_collide_damage: "me.force_death()",
on_exit_water: "me.force_death()",

#-------------------------- animation switching --------------------------#
on_end_hurt_anim: "set(animation, 'swim')",
on_end_swim_anim: "if(facing < 0 and x < _x_bound or
	                facing > 0 and x2 > _x2_bound,
					turn_around,
					animation('swim'))",
					
on_process_swim: "if(abs(y - target_y) > 10, set(accel_y, (20*if(target_y < mid_y, -1, 1))), [set(accel_y,0)])",

timer_frequency: 10,
on_timer: "if(is_there_a_wall_in_front_of_us, turn_around)",


#-------------------------- error condition handling --------------------------#
on_change_animation_failure: "die_from_bad_collision_state", //TODO:  this line kills water beetles if they're thrown too close to a cliff.  Needs recovery logic.

}
