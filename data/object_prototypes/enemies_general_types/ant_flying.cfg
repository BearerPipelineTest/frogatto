{
id: "ant_flying",
prototype: ["movable_enemy"],
require_animations: ['fly', 'turn', 'hurt'],


traction_in_air: 1000,
has_feet: false,
activation_border: 150,

properties: {
#-------------------------- constructor/destructor logic --------------------------#
	general_creature_category_constructor: "commands :: [
															animation(default_anim),
															set(activation_border, abs(_x_bound - _x2_bound)),
															reinitialize_vars,
															spawn_shadow('small'),
															ant_flying_variant_constructor,
														]",

	ant_flying_variant_constructor: "commands :: null",  // for things like seeker_flying

#-------------------------- hittable overides --------------------------#
	attack_damage: "int :: if(higher_difficulty, 2, 1)",
	is_a_flier: "bool :: true",
	team: "string :: 'evil'",
	acquirable_item_drop_value: "int :: 10",					
	taxonomy: "TaxonomyType :: enum bug",
	points_value: "int :: 75",
	bounce_roundness: "int :: 10",
	
	
#-------------------------- wing-loss handling --------------------------#
	default_anim: "string :: 'fly'",
	wingless_anim: "string :: 'stand'",

	handle_special_damage_response: "def(DamageType damage_type, int final_damage_amount, bool will_die) -> commands 
				execute(me, lose_wings(damage_type, final_damage_amount, will_die))", 

	has_fragile_wings: "bool :: false",
	lose_wings: "def(DamageType damage_type=enum neutral, int final_damage_amount=0, bool will_die=false) -> commands execute(me,
				
					[
						if(has_fragile_wings, wings_break, wings_rustled)
					
						where wings_rustled = null
						where wings_break =	if(not me.has_already_been_replaced,[
												if(not will_die,
													[
														remap_attaches_from_old_to_new(me, replacement_object) ;
														remove_object(me),
														add_object( replacement_object )
													]
												),
												do_wing_loss_fx,
												set(replacement_object.animation, wingless_anim)
											
											])
					
					] where replacement_object = replacement_object_with_preserved_attributes(me, basic_type, hitpoints-final_damage_amount)
				)",
				
	do_wing_loss_fx: "[
						map(range(1+1d3),spawn('broken_wing_shard',me.mid_x,me.mid_y,me.facing)),
						impact_cloud(mid_x,y,'large'),
						sound('ant-dewinged'+1d3+'.wav')
					]",		

	play_object_specific_grabbed_cosmetics: "if(has_fragile_wings, do_wing_loss_fx)",





#-------------------------- bounds/turning logic --------------------------#

	turns_away_from_solid_obstructions: "bool :: true", //meant to trigged BEFORE actually colliding, if a creature would collide at speed and look strange doing so.
	should_turn_away_from_obstruction: "bool :: (turns_away_from_solid_obstructions and solid(level, front + facing*100, y, 1, y2 - y))",

	is_outside_bounds: "bool :: ((facing < 0 and x < _x_bound) or (facing > 0 and x2 > _x2_bound))",

	check_if_we_should_turn_and_do_so_if_appropriate: "if(not animation in ['turn'], if(is_outside_bounds or should_turn_away_from_obstruction, turn_around))",  


#-------------------------- flight height logic --------------------------#
	altitude_adjustment: "decimal :: 0",

	final_desired_height: "decimal :: _desired_height + altitude_adjustment",

	/*
		This is occasionally used in `altitude_adjustment` instead of `0` - we have several enemies that wobble, vertically, instead of flying straight horizontally.
		This aims our speed to guide us to the desired_height.  We use a sine function to smooth out the motion within our limits.
		Note for this critter that we also vary the desired_height itself, making the bug wander around, vertically.
		remember: wave(-250)=-1000, wave(0)=0, wave(250)=1000, wave(500) = 0, etc
	*/
	standard_flier_wave: "decimal :: wave(cycle*5+1000)/15",


#-------------------------- vars re-initialization for when recovering from being flipped onto its back --------------------------#
	//find and return the first solid area, going up, or if we don't run into anything, return a maximum value
	reinitialize_vars: "[	custom_reinitialize_vars,
							if(_desired_height = null, set(_desired_height, if(ceil != null, ceil.y, mid_y - 300)) where ceil = find_ceiling(mid_x,mid_y,-300)),
						]",
	custom_reinitialize_vars: "commands :: null",
	
	

	
#-------------------------- core processing --------------------------#
	flight_animations: "[string] :: ['fly','fly1','fly2','fly3', 'turn_fly','takeoff']", //a list of flying animations - inheritors may supply more than this


	handle_general_enemy_category_processing: "commands ::	[
																if(animation in flight_animations,
																	[
																		process_fly,
																		process_fly_specialized,
																		process_fly_creature_specific
																	]
																),
																handle_specialized_creature_category_processing,
															]",
	
	/*
		We've got this split out in a weird way because some enemies want to override the conditions in which `process_fly` gets triggered ... but they still want to have access to the core `process_fly` behavior.  Most heirs of this prototype will just use the straight `process_fly` all the time, but there are a few that end up putting it in a switch statement and only triggering it when they're in a specific behavior mode.
	*/
	process_fly: "commands :: process_fly_internal",
	
	process_fly_internal: "commands ::	[
									check_if_we_should_turn_and_do_so_if_appropriate,
									set(velocity_y, wave( min(250,max(-250, final_desired_height-midpoint_y ) ) ))
								]",
	
	process_fly_specialized: "commands :: null",  //for custom prototypes (i.e. seeker_flying)
	process_fly_creature_specific: "commands :: null",  //for specific objects (i.e. gazer_grey_bare)
	
#-------------------------- vars --------------------------#
	_x_bound: { type: "int", editor_info: { type: "x", value: "mid_x-(7*32)" }, init: "mid_x-150" },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "mid_x+(7*32)" }, init: "mid_x+150" },
	_desired_height: { type: "int", editor_info: { type: "y", value: "mid_y" }, dynamic_initialization: true },
},

on_swallowed: "lose_wings()",

#-------------------------- collision handling --------------------------#
on_collide_side: "[if(not (animation in ['hurt']), turn_around),set(velocity_x, -velocity_x/2)]",
on_collide_head: "set(velocity_y, -velocity_y/2)",
on_collide_feet: "set(velocity_y, -velocity_y/2)",

on_bounced_on: "lose_wings()",
on_lose_wings: "lose_wings()",

#-------------------------- animation switching --------------------------#
on_end_anim: "animation('fly')",

       
on_wingflap: "sound_falloff('wingflap'+1d5+'.wav', 220,1.0)",

editor_info: {
	category: "enemies, general",
},
}
