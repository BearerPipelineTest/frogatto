{
/*Implementor requires "walk" and "turn" animations.
Commands:	begin_pacing - Paces to and fro the limits set in the editor.
			begin_walking - Walks fowards forever.
*/
id: "walking_npc",
prototype: ["standing_npc"],
zorder: "@include data/zorder.cfg:npcs",
friction: 1000,
traction: 1000,

editor_info: {
	category: "NPCs",
	help: "start mode: Action to start the level in.\nturns_at_cliff: If true, the character will turn before it falls off a cliff. Doesn't apply to walking into one.\npotters: The object will sort of faff about, randomly switching directions, standing still, and walking.\npotter_timeout: Number of cycles the object will faff about for.",
},

properties: {
#-------------------------- editor items --------------------------#
		min_x: { type: "int", init: "mid_x - 100", editor_info: { type: "x", value: "midpoint_x - 200", } },
		max_x: { type: "int", init: "mid_x + 100", editor_info: { type: "x", value: "midpoint_x + 200", } },
		start_mode: { type: "string", default: "walk", editor_info: { type: "enum", enum_values: ["stand","walk"] } },
		turns_at_cliff: { type: "bool", default: true, editor_info: { type: "boolean", value: "true" } },
		potters: { type: "string", default: "never", editor_info: { type: "enum", enum_values: ["never","limits","always"] } },
		potter_timeout: { type: "int", default: 100, editor_info: { type: "int", value: "100" } },

#-------------------------- vars --------------------------#
		_current_special_walk_anim: { type: "string", default: '' },	
		_last_started_pottering: { type: "int", default: -100 },	
		_turns: { type: "bool", default: true },					//Turns at editor-set limits.
		_target: { type: "int|null", default: null },					//If we are walking to a target, this is it.
		_target_callback: { type: "null|function()->commands", default: null },		//The event to fire, when we reach the target. (Will be fired in addition to reach_target.)

		_is_walking: { type: "bool", default: true },

#-------------------------- behavior --------------------------#
	begin_pacing: "[
			set(start_mode,'walk'),
			set(_target, null),
			set(_turns, true)
		]",
		
	begin_walking: "[
			set(start_mode,'walk'),
			set(_target, null),
			set(_turns, false)
		]",
		
	pace_to: "def(int new_min_x, int new_max_x) -> commands [
		if(new_min_x < new_max_x, [
			set(min_x, new_min_x),
			set(max_x, new_max_x),
			],[
			set(min_x, new_max_x),
			set(max_x, new_min_x),
			]),
		self.begin_pacing]",
		
	walk_to: "def(int target_x, null|function()->commands callback=null) -> commands execute(me, [
			set(_target, target_x),
			if(callback != null, set(_target_callback, callback)),
			set(start_mode, 'walk')
		])",

	start_pottering: "[
		if(1d2,
			start_standing,
			turn_around
		),
		if(level.cycle - _last_started_pottering > potter_timeout,
			set(_last_started_pottering,level.cycle)
		)
	]",
		
	do_regular_behavior: "if(start_mode = 'stand', start_standing, start_walking)",
	core_anims: "[string] :: ['stand','turn','walk']",

	start_standing: "commands :: [
		set(_is_walking, false),
		start_standing__standing_npc_behavior
	]",


	start_walking: "commands :: [
		set(_is_walking, true),
		if(should_turn,
			if(should_potter,
				start_pottering,
				turn_around
			),
			if(should_potter,
				start_pottering,
				if(_current_special_walk_anim != '',
					animation(_current_special_walk_anim),
					animation('walk')
				)
			)
		)
	]",
	
	should_turn: "bool ::	if(level.cycle - _last_turned > 10,
								if(not _target,
									/*
										If we don't have a target, then we've got some pretty tame/normal turning behavior. Basically we just look at a pair of bounding limits for where we're allowed to walk, and if we're outside of those, then we need to turn around and go back.  We make a similar caveat for cliffs, treating them like limits.
										
										If we're inside those limits, we need to revert to the logic of the standing NPC.
									*/
									if(turns_at_cliff and (not is_there_flat_ground_ahead_of_us(cliff_margin)),
										true,
										if(is_outside_limits,
											true,
											should_turn__standing_npc_behavior
										)
									)
										where margin = 50
										where cliff_margin = 110,


									/* 
										if we DO have a target, then all the above rules are off; go ahead and walk off cliffs, or leave our bounds, the target is more important.
									*/
									if((_target < self.mid_x and facing > 0) or (_target > self.mid_x and facing <= 0),
										true,
										false
									)
								),
								false
							)",
							
	should_potter: "bool :: if(_target,
								false,  /*if we have a target, don't potter at all*/
								if(level.cycle - _last_started_pottering < potter_timeout, 
									true,
									if(1d2-1 = 1,
										false,
										if(potters = 'always',
											true,
											if(potters = 'limits' and is_outside_limits,
												true,
												false
											)
										)
									)
								)
							)",
	
	is_outside_limits: "bool :: 
				if(facing > 0,
					if(mid_x + img_margin > max_x, true, false), 
					if(mid_x - img_margin < min_x, true, false)
				) where img_margin = img_w/2",
	
	
	is_at_target: "bool :: if(_target and ((_target < self.mid_x+10 and facing > 0) or (_target >= self.mid_x-10 and facing <= 0)), true, false)",
	
	walking_animations: "[string] :: ['walk']", //a list of walking animations - inheritors may supply more than this
	
	check_for_special_walk_anim: "if(animation in walking_animations and animation != 'walk', set(_current_special_walk_anim, animation), set(_current_special_walk_anim, ''))",
},
	

on_create: "[
	if(start_mode = 'stand',
		set(_is_walking, false),
		set(_is_walking, true)
	)
	;
	do_regular_behavior,
	fire_event('enter_level'),
] asserting max_x > min_x",
					
on_resume: "do_regular_behavior",

on_process: "if(animation in walking_animations, 
				[
					check_for_special_walk_anim,
					if(should_turn,
						/*
							rather than directly triggering the 'turn' behavior, trigger the global behavior switchboard (i.e. 'start_walking') because we might want to 'potter' instead of turning.
						*/
						start_walking,	
						if(self.is_at_target,
							fire_event(self,'reach_target') 
						)
					)
				]
			)",


//note - it's REALLY important that target_callback be last - if this gets fired during a dialogue, the other commands after target_callback don't get executed until the dialogue is finished (which essentially breaks target-seeking entirely)	
on_reach_target: "[[set(start_mode, 'stand'),start_standing], set(_target,null), set(_target_callback, null), if(_target_callback != null, _target_callback() )]",

}
