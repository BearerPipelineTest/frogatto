{
id: "liquid",
prototype: ["transient_object"], #Was ["standard_values"], but we needed particles to work so yolo. ðŸ˜‚ ðŸ˜‚ ðŸ˜‚
zorder: "@include data/zorder.cfg:liquid_particle_effects",
is_strict: true,
ignore_collide: true,
hidden_in_game: true,

properties: {
	get_texture: "texture_object :: query_cache(global_cache(4), null, get_texture(liquid_texture))",
	texture_dim: "decimal :: 256.0",
	texture_speed: "decimal :: 0.002",
	liquid_texture: "string :: 'liquids/water.png'",

	water_color: "[int] :: [70, 0, 70, 50]", //Water no longer takes a color, since it uses a shader now. This has no effect.
	add_water_effect: "commands :: add_water(_x_bound, _y_bound, _x2_bound, _y2_bound, water_color)",
	add_particle_effect: "commands :: []",
	liquid_surface: { //The surface wobbles around relative to the water because the surface is on the pixel grid, but the water renders in screen space which is *not* on the pixel grid.
		type: "custom_obj", //liquid.surface does not exist yet?
		init: "object('${me.type}.surface', x,y, {
			parent: me,
			zorder: lib.zorder.get('water_surface'), //Place surface line over water effect, as it may be opaque.
		})",
	},

	liquid_damage: "int :: 0",
	damage_type: "DamageType :: enum neutral",
	remove_water_effect: "commands :: remove_water(_x_bound, _y_bound, _x2_bound, _y2_bound)",

#-------------------------- vars --------------------------#
	_x_bound: { type: "int", editor_info: { type: "x", value: "x-100" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "x+150" } },
	_y_bound: { type: "int", editor_info: { type: "y", value: "y-100" } },
	_y2_bound: { type: "int", editor_info: { type: "y", value: "y+150" } },
},

editor_info: {
	category: "controllers, liquid",
},

on_editor_changing_variable:"remove_water_effect",
on_editor_removed: "remove_water_effect",
on_editor_changed_variable: "[
	add_water_effect,
	add_particle_effect,
	fire_event(liquid_surface, 'create'),
]",
on_editor_added: "add_water_effect",

on_start_level: "
	set(activation_area, [
		_x_bound - 50,
		_y_bound - 100,
		_x2_bound - _x_bound + 100,
		_y2_bound - _y_bound + 100]
		)",

on_load: "add_particle_effect",

on_create: "[
	set(facing, 1), //Hack around weird bug where water surface is offset when facing is -1.
	add_object(liquid_surface),
	fire_event(liquid_surface, 'create'),
]",

on_end_anim: "animation('normal')",

object_type: [{
	id: "surface",
	is_strict: true,
	zorder: "@include data/zorder.cfg:water",
	
	properties: {
		list_probe_output: false, //debug() solidity probe results
		show_probes_in_editor: false, //slow
		
		//test on ./anura --level=rocky-roots.cfg
		//  â€¦######_____#####_____#_#####_#####___#â€¦
		//0     0001   1  0  1   101  0  1 ?? 1  1  00
		//       ..               .
		//       36               6
		calculate_water_surface_intensity: "
			def(int index, [bool] point_solidity_list) -> decimal //0..1
				max(
					int(not point_solidity_list[index+0]) * (3/3.), //Full opacity when no wall.
					int(not point_solidity_list[index-1]) * (2/3.), //More transparency farther into the wall.
					int(not point_solidity_list[index+1]) * (2/3.),
					int(not point_solidity_list[index-2]) * (1/3.),
					int(not point_solidity_list[index+2]) * (1/3.),
				)
		",
	},
	
	on_create: "(
		[
			set(relative_x, (parent._x_bound + parent._x2_bound)/2 - parent.mid_x),
			set(relative_y, parent._y_bound-parent.mid_y),
			
			if(list_probe_output, [
				debug('create', 'label', parent.label),
				map(range(filter_radius, size(solidity_probes) - filter_radius), 'step', [
					debug('probe', 'label', parent.label, 'solid', solidity_probes[step], 'opacity', calculate_water_surface_intensity(step+0, solidity_probes)),
				])
			]),
			
			if(show_probes_in_editor,
				map(
					solidity_probe_targets,
					spawn('target', parent_left_tile_aligned_bound + value*tile_size, parent._y_bound, {
						alpha: if(
							point_solid(level, me, 
								parent_left_tile_aligned_bound + value*tile_size, 
								parent._y_bound ),
							96, 256),
					})
				)
			),
			
			if(water_width/tile_size*tile_size > 0,
				set(animation, ( //Two-line water surface image; fades in on both sides.
					lib.gui.render_frame(c, 
						water_width/tile_size*tile_size, 2, 
						map([ //Top and bottom 'surface lines'.
								{offset_y: 0, color: surface_color_1}, 
								{offset_y: 1, color: surface_color_2},
							], 'line', [
							c.set_linear_pattern(0, 0, (water_width/tile_size)*tile_size, 0, 
								map( //Generate a gradient based on where there is and isn't solid land.
									range(filter_radius, size(solidity_probes) - filter_radius),
									'step',
									line.color + {
										offset: step/1.0/(size(solidity_probes) - filter_radius*2), 
										alpha: calculate_water_surface_intensity(step, solidity_probes),
									},
								)
							),
							//c.set_source_color(line.color + {alpha: 0.5+(calculate_water_surface_intensity(step+0, solidity_probes)/2) }),
							c.rectangle( //xywx
								min(parent._x_bound, parent._x2_bound) % tile_size, line.offset_y,
								water_width/tile_size*tile_size, 1,
							),
							c.fill(),
						])
					)
				)),
				debug('Warning: Not drawing surface for water ' + parent.label + ', too narrow.'),
			),
		] where
			c = canvas(),
			surface_color_1 = {red:1.0, green:1.0, blue:1.0}, //top line
			surface_color_2 = {red:0.5, green:0.5, blue:0.5}, //bottom line
			water_surface_fade_distance = 64,
			solidity_probes =
				[true] * (filter_radius+force_border_fade_width)
				+ map(
					solidity_probe_targets, //A list of numbers from -4 to, like, 14 or something.
					point_solid(level, me, 
						parent_left_tile_aligned_bound + value*tile_size, 
						parent._y_bound ) )
				+ [true] * (filter_radius+force_border_fade_width) //Make the water surface fade out into the surrounding tile, like they fade into solid, even if not solid.
		where
			solidity_probe_targets = range(0-water_surface_overhang+force_border_fade_width, tile_edges + water_surface_overhang*2 - force_border_fade_width*2 + 1)
		where
			tile_edges = water_width/tile_size + 1,
			parent_left_tile_aligned_bound = lib.math.round_to_nearest(min(parent._x_bound, parent._x2_bound), tile_size) + (tile_size/2)
		where
			water_width = max(parent._x_bound, parent._x2_bound) - min(parent._x_bound, parent._x2_bound),
			tile_size = 32,
			water_surface_overhang = 0, //Have the water surface extend into the rocks a bit.
			force_border_fade_width = 2, //The water surface needs a bit of padding to force a fade out. Better than just ending, I think?
			filter_radius = 2, //pattern needs a few elements on each side as buffer
	) asserting parent is obj liquid | 'No liquid set for surface.'",
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 117, y: 42, w: 28, h: 28,
		frames: 1,
		duration: 1000,
	},
}]
}
