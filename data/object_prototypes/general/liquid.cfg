{
id: "liquid",
prototype: ["transient_object"], #Was ["standard_values"], but we needed particles to work so yolo. ðŸ˜‚ ðŸ˜‚ ðŸ˜‚
zorder: "@include data/zorder.cfg:liquid_particle_effects",
is_strict: true,
ignore_collide: true,
hidden_in_game: true,

properties: {
	get_texture: "texture_object :: query_cache(global_cache(4), null, get_texture(liquid_texture))",
	texture_dim: "decimal :: 256.0",
	texture_speed: "decimal :: 0.002",
	liquid_texture: "string :: 'liquids/water.png'",

	water_color: "[int] :: [70, 0, 70, 50]", //Water no longer takes a color, since it uses a shader now. This has no effect.
	add_water_effect: "commands :: add_water(_x_bound, _y_bound, _x2_bound, _y2_bound, water_color)",
	add_particle_effect: "commands :: []",
	liquid_surface: { //The surface wobbles around relative to the water because the surface is on the pixel grid, but the water renders in screen space which is *not* on the pixel grid.
		type: "custom_obj", //liquid.surface does not exist yet?
		init: "object('${me.type}.surface', x,y, {
			parent: me,
			zorder: lib.zorder.get('water_surface'), //Place surface line over water effect, as it may be opaque.
		})",
	},

	liquid_damage: "int :: 0",
	damage_type: "DamageType :: enum neutral",
	remove_water_effect: "commands :: remove_water(_x_bound, _y_bound, _x2_bound, _y2_bound)",

#-------------------------- vars --------------------------#
	_x_bound: { type: "int", editor_info: { type: "x", value: "x-100" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "x+150" } },
	_y_bound: { type: "int", editor_info: { type: "y", value: "y-100" } },
	_y2_bound: { type: "int", editor_info: { type: "y", value: "y+150" } },
},

editor_info: {
	category: "controllers, liquid",
},

on_editor_changing_variable:"remove_water_effect",
on_editor_removed: "remove_water_effect",
on_editor_changed_variable: "[
	add_water_effect,
	add_particle_effect,
	fire_event(liquid_surface, 'create'),
]",
on_editor_added: "add_water_effect",

on_start_level: "
	set(activation_area, [
		_x_bound - 50,
		_y_bound - 100,
		_x2_bound - _x_bound + 100,
		_y2_bound - _y_bound + 100]
		)",

on_load: "add_particle_effect",

on_create: "[
	add_object(liquid_surface),
	fire_event(liquid_surface, 'create'),
]",

on_end_anim: "animation('normal')",

object_type: [{
	id: "surface",
	is_strict: true,
	zorder: "@include data/zorder.cfg:water",
	
	properties: {
		//test on ./anura --level=rocky-roots.cfg
		//  â€¦######_____#####_____#_#####_#####___#â€¦
		//0     0001   1  0  1   101  0  1 ?? 1  1  00
		//       ..               .
		//       36               6
		calculate_water_surface_intensity: "
			def(int index, [bool] point_solidity_list) -> decimal //0..1
				max(
					int(point_solidity_list[index+0]) * (3/3.), //Full opacity when no wall.
					int(point_solidity_list[index-1]) * (2/3.), //More transparency farther into the wall.
					int(point_solidity_list[index+1]) * (2/3.),
					int(point_solidity_list[index-2]) * (1/3.),
					int(point_solidity_list[index+2]) * (1/3.),
				)
		",
	},
	
	on_create: "[
		set(relative_x, (parent._x_bound + parent._x2_bound)/2 - parent.mid_x),
		set(relative_y, parent._y_bound-parent.mid_y),
		
		set(animation, ( //Two-line water surface image; fades in on both sides.
			lib.gui.render_frame(c, 
				water_width, 2, 
				map(range(filter_radius, size(solidity_probes)-1 - filter_radius), 'step',
					map([ //Top and bottom 'surface lines'.
						{offset_y: 0, color: surface_color_1}, 
						{offset_y: 1, color: surface_color_2},
					], 'line', [
						c.set_linear_pattern(parent_left_tile_aligned_bound + step*tile_size, 0,  parent_left_tile_aligned_bound + step*tile_size + tile_size, 0, [
							line.color + { offset: 0, alpha: calculate_water_surface_intensity(step+0, solidity_probes) },
							line.color + { offset: 1, alpha: calculate_water_surface_intensity(step+1, solidity_probes) },
						]),
						c.rectangle(parent_left_tile_aligned_bound + step*tile_size, line.offset_y, tile_size, 1),
						c.fill(),
					])
				)
			)
			where
				c = canvas(),
				surface_color_1 = {red:1.0, green:1.0, blue:1.0}, //top line
				surface_color_2 = {red:0.5, green:0.5, blue:0.5}, //bottom line
				water_surface_fade_distance = 64,
				solidity_probes =
					[true]*filter_radius 
					+ map(
						range(-water_surface_overhang, tile_edges + water_surface_overhang), //A list of numbers from -4 to, like, 14 or something.
						point_solid(level, me, 
							parent_left_tile_aligned_bound + value*tile_size, 
							parent._y_bound ) )
					+ [true]*filter_radius //Make the water surface fade out into the surrounding tile, like they fade into solid, even if not solid.
			where
				tile_edges = water_width/tile_size + 1,
				parent_left_tile_aligned_bound = parent._x_bound%tile_size + tile_size/2
			where
				water_width = parent._x2_bound - parent._x_bound,
				tile_size = 16,
				water_surface_overhang = 2, //Have the water surface extend into the rocks a bit.
				filter_radius = 2 //pattern needs a few elements on each side as buffer
		)),
	] asserting parent is obj liquid | 'No liquid set for surface.'",
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 117, y: 42, w: 28, h: 28,
		frames: 1,
		duration: 1000,
	},
}]
}
