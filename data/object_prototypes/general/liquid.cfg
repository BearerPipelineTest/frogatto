{
id: "liquid",
prototype: ["transient_object"], #Was ["standard_values"], but we needed particles to work so yolo. ðŸ˜‚ ðŸ˜‚ ðŸ˜‚
zorder: "@include data/zorder.cfg:liquid_particle_effects",
is_strict: true,
ignore_collide: true,
hidden_in_game: true,

properties: {
	get_texture: "texture_object :: query_cache(global_cache(4), null, get_texture(liquid_texture))",
	texture_dim: "decimal :: 256.0",
	texture_speed: "decimal :: 0.002",
	liquid_texture: "string :: 'liquids/water.png'",

	water_color: "[int] :: [70, 0, 70, 50]",
	add_water_effect: "commands :: add_water(_x_bound, _y_bound, _x2_bound, _y2_bound, water_color)",
	add_particle_effect: "commands :: []",
	liquid_surface: { //The surface wobbles around relative to the water because the surface is on the pixel grid, but the water renders in screen space which is *not* on the pixel grid.
		type: "custom_obj", //liquid.surface does not exist yet?
		init: "object('${me.type}.surface', x,y, {parent: me})",
	},

	liquid_damage: "int :: 0",
	damage_type: "DamageType :: enum neutral",
	remove_water_effect: "commands :: remove_water(_x_bound, _y_bound, _x2_bound, _y2_bound)",

#-------------------------- vars --------------------------#
	_x_bound: { type: "int", editor_info: { type: "x", value: "x-100" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "x+150" } },
	_y_bound: { type: "int", editor_info: { type: "y", value: "y-100" } },
	_y2_bound: { type: "int", editor_info: { type: "y", value: "y+150" } },
},

editor_info: {
	category: "controllers, liquid",
},

on_editor_changing_variable:"remove_water_effect",
on_editor_removed: "remove_water_effect",
on_editor_changed_variable: "[
	add_water_effect,
	add_particle_effect,
	fire_event(liquid_surface, 'create'),
]",
on_editor_added: "add_water_effect",

on_start_level: "
	set(activation_area, [
		_x_bound - 50,
		_y_bound - 100,
		_x2_bound - _x_bound + 100,
		_y2_bound - _y_bound + 100]
		)",

on_load: "add_particle_effect",

on_create: "[
	add_object(liquid_surface),
	fire_event(liquid_surface, 'create'),
]",

on_end_anim: "animation('normal')",

object_type: [{
	id: "surface",
	is_strict: true,
	zorder: "@include data/zorder.cfg:water",
	
	on_create: "[
		set(relative_x, (parent._x_bound + parent._x2_bound)/2 - parent.mid_x),
		set(relative_y, parent._y_bound-parent.mid_y),
		set(animation, (
			lib.gui.render_frame(c, water_width, 2, [
				c.set_source_color('white'),
				c.rectangle(0, 0, water_width, 1),
				c.fill(),
				
				c.set_source_color('grey'),
				c.rectangle(0, 1, water_width, 1),
				c.fill(),

				c.set_source_color('white'),
			]) where
				c = canvas(),
				water_width = parent._x2_bound - parent._x_bound
		)),
	] asserting parent is obj liquid | 'No liquid set for surface.'",
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 117, y: 42, w: 28, h: 28,
		frames: 1,
		duration: 1000,
	},
}]
}
