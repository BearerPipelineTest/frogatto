{
id: "periodic_mook_spawner",
hidden_in_game: true,
is_strict: true,
prototype: ["standard_values"],
zorder: "@include data/zorder.cfg:in_front_of_everything",

properties: {


#-------------------------- things we must manually override --------------------------#
		/*
			This isn't everything - you'll also need to tweak some behavior settings for cosmetic 'does it release up or down' stuff, and how fast - however, this is a bit unusual:
		
			Because these variables directly deal with what type of object is being spawned, and because we can't access local properties in init statement or editor_info fields, these two fields have to be manually overridden when you're writing an object that inherits from this prototype.
		*/

		//	This one needs to have it's fields manually set in the constructor.  You'll do this by setting max_objects and spawn_type elsewhere.
	_mook_tracker:	{ type: "class mook_spawning_tracker", init: "construct('mook_spawning_tracker',{this_obj: me, _lvl: level, spawnee_types: ['ant_black'], max_objects: 3})" },
		//	This one needs editor-info values.
	spawn_type: { type: "string", default: "'ant_black'" },
	valid_spawn_types: "[string] :: ['ant_black']",




#-------------------------- editor vars --------------------------#
	max_objects: "int :: 3",

	_x_bound: { type: "int", editor_info: { type: "x", value: "mid_x -300" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "mid_x+300" } },
	_y_bound: { type: "int", editor_info: { type: "y", value: "mid_y-300" } },
	_y2_bound: { type: "int", editor_info: { type: "y", value: "mid_y+300" } },
	
#-------------------------- bounds --------------------------#
	zone_width: "abs(_x2_bound - _x_bound)",
	zone_height: "abs(_y2_bound - _y_bound)",
	
	act_B: "max(zone_width, zone_height)*2",

	/*
		We do some min/max cleanup on these values so that if someone "goofs" the bounding box in the editor and makes x2 smaller than x1, then the whole logic for the object still works sensibly instead of bombing out.
	*/
	bounds: "{
		x1: min(_x_bound, _x2_bound),
		x2: max(_x_bound, _x2_bound),
		y1: min(_y_bound, _y2_bound),
		y2: max(_y_bound, _y2_bound),
	}",
	
#-------------------------- override logic --------------------------#
	/*
		This would get overridden by anything that wants to customize any behavior related to spawning.  Note chiefly that the `_mook_tracker` does NOT rate-limit these in any way related to time; rather, it just tracks quantity, and potentially, the bounding box.  So if you want to rate limit these for time, or do any sorts of behavior on the spawn, this is the spot.
	*/

	do_spawning_logic: "commands ::	spawn(spawn_type,
										mid_x,
										mid_y,
									1)",
									
	core_setup_logic: "commands :: [
		set(activation_border, act_B),
		
		
		
		set(_mook_tracker._x_bound,		bounds.x1),
		set(_mook_tracker._x2_bound,	bounds.x2),
		set(_mook_tracker._y_bound,		bounds.y1),
		set(_mook_tracker._y2_bound,	bounds.y2),
		
		set(_mook_tracker.max_objects, max_objects),
		set(_mook_tracker.spawnee_types, valid_spawn_types),
		
	]",

	custom_setup_logic: "commands :: null",
},

	on_create: "[
		core_setup_logic,
		custom_setup_logic,
	]",

	on_process: "[
		if(_mook_tracker.should_create_a_new_mook, do_spawning_logic)
		;
		_mook_tracker.process_list,
	]",

}
