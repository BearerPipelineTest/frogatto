{
id: "periodic_mook_spawner",
hidden_in_game: true,
is_strict: true,
prototype: ["standard_values"],

properties: {
	zone_width: "abs(_x2_bound - _x_bound)",
	zone_height: "abs(_y2_bound - _y_bound)",
	act_B: "max(zone_width, zone_height)*2",


#-------------------------- things we must manually override --------------------------#
		/*
			This isn't everything - you'll also need to tweak some behavior settings for cosmetic 'does it release up or down' stuff, and how fast - however, this is a bit unusual:
		
			Because these variables directly deal with what type of object is being spawned, and because we can't access local properties in init statement or editor_info fields, these two fields have to be manually overridden when you're writing an object that inherits from this prototype.
		*/

		//	This one needs an init statement.
	_mook_tracker:	{ type: "class mook_spawning_tracker", init: "construct('mook_spawning_tracker',{this_obj: me, spawnee_types: ['ant_black'], max_objects: 3})" },
		//	This one needs editor-info values.
	spawn_type: { type: "string", default: "'ant_black'" },




#-------------------------- editor vars --------------------------#
	max_objects: { type: "int", default: 3, editor_info: { type: "int", value: "3" }  },

	_x_bound: { type: "int", editor_info: { type: "x", value: "mid_x -300" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "mid_x+300" } },
	_y_bound: { type: "int", editor_info: { type: "y", value: "mid_y-300" } },
	_y2_bound: { type: "int", editor_info: { type: "y", value: "mid_y+300" } },
	


	
	
#-------------------------- this would get overridden for anything that wants to customize the position --------------------------#
	do_spawning_logic: "commands ::	spawn(spawn_type,
										mid_x + spawn_offset.x,
										mid_y + spawn_offset.y,
									1)",
},

on_create: "[
				set(activation_border, act_B),
				set(_mook_tracker._x_bound, _x_bound),
				set(_mook_tracker._x2_bound, _x2_bound),
				set(_mook_tracker._y_bound, _y_bound),
				set(_mook_tracker._y2_bound, _y2_bound),
				set(_mook_tracker.max_objects, max_objects)
			]", 

on_process: "[
		if(_mook_tracker.should_create_a_new_mook or _spawning != null, do_spawning_logic),
	]",

}
