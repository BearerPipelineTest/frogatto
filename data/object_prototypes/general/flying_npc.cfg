{
/*Implementor requires "fly", "turn", "turn_fly" animations.
Commands:	
			begin_flying - takes off and hovers in place
			cease_flying - lands, and enters a standing mode
*/
id: "flying_npc",
prototype: ["standing_npc"],
always_active: true,
zorder: "@include data/zorder.cfg:npcs",
friction: 2000,
traction: 1000,
traction_in_air: 1000,

editor_info: {
	category: "NPCs",
},

properties: {
#-------------------------- editor items --------------------------#
	start_mode: { type: "string", default: "stand", editor_info: { type: "enum", enum_values: ["stand","fly"] } },

#-------------------------- vars --------------------------#
	_current_target: { type: "{x:int, y:int}|null", default: null },	//NB: if we've got a list of nodes we're traversing, this is the current one
	_stand_at_destination: { type: "bool", default: false },	
	_target_callback: { type: "null|function()->commands", default: null },		//The commands to run, when we reach the target. (Will be fired in addition to reach_target.)
	_current_special_flight_anim: { type: "string", default: '' },	

	_targets: { type: "[{x:int, y:int}]", default: []},  
#-------------------------- behavior --------------------------#
	begin_flying: "[
		set(start_mode,'fly'),
		set(_current_target, null)]",
		
	begin_landing: "[set(start_mode, 'stand'),start_standing]",  //NB: start_standing's the standing_npc code which we don't want to overwrite here; just call or omit

		
	do_regular_behavior: "if(start_mode = 'stand', start_standing, start_flying)",
	core_anims: "[string] :: ['stand','turn','fly','turn_fly','takeoff']",
	
	start_flying: "if(_current_special_flight_anim != '', animation(_current_special_flight_anim), 
						if('takeoff' in available_animations and animation not in flight_animations, animation('takeoff'), animation('fly')))",
	
							

	flight_animations: "[string] :: ['fly', 'turn_fly','takeoff']", //a list of flying animations - inheritors may supply more than this
	
	check_for_special_fly_anim: "if(animation in flight_animations and animation not in ['fly', 'turn_fly','takeoff'], set(_current_special_flight_anim, animation), set(_current_special_flight_anim, ''))",



	change_to_fly_anim: "set(animation,
		if(_current_special_flight_anim != '',
			_current_special_flight_anim,
			'fly'
		)
	)",


#-------------------------- core behavior --------------------------#
	core_processing: "commands :: [
		if(animation in flight_animations, 
			[process_fly, check_for_special_fly_anim]
		),

		if(should_turn,
			turn_around,
		),

	]",


	end_anim_decisions: "commands :: [
		if(is_standing,
			change_to_stand_anim,
			change_to_fly_anim
		)
	]",


#-------------------------- turning-behaviour --------------------------#
	turn_around: "commands :: if(can_turn,
		[
			if(is_standing,
				if('turn' in available_animations, animation('turn')),
				if('turn_fly' in available_animations, animation('turn_fly'))
			),
			set(facing, -facing),
			set(_last_turned, level.cycle),
		],
		end_anim_decisions
	)",

	should_turn: "bool :: if(is_standing,
		should_turn__standing_npc_behavior,
		should_turn_during_flight
	)",

	should_turn_during_flight: "bool :: ((_current_target = null) or (sign(mid_x - _current_target.x) = facing)) and
										animation not in ['turn_fly']",

#-------------------------- target-seeking --------------------------#
	target_acquisition_bounds: "decimal :: if(is_at_last_node, 50, 200)",

	is_at_target: "bool :: (_current_target != null and dist_to_target < target_acquisition_bounds) and (speed < if(is_at_last_node, 10, 150) )",

	
	fly_to: "def([{x:int, y:int}] targets, bool stand_at_dest, null|function()->commands callback=null) -> commands execute(me, [
		set(_targets, targets),
		set(_current_target, targets[0]),
		set(_stand_at_destination, stand_at_dest),
		if(callback != null, set(_target_callback, callback)),
		set(start_mode, 'fly')
		]) asserting size(targets) > 0",

	dist_to_target: "decimal :: if(_current_target != null, lib.math.length( [_current_target.x,_current_target.y], me), 0)",

	flight_speed: "decimal :: 6 * max( dist_to_target/500, 3.0 )",  // decelerate upon approach to a target

	flight_vel: "{x:decimal, y:decimal} :: if(_current_target != null,
					{
						x: cos(angle) * flight_speed,
						y: sin(angle) * flight_speed
					} where angle = lib.math.angle(me,[_current_target.x, _current_target.y]),
					{x:0,y:0})",


	process_fly: "if(_current_target != null, if(not is_at_target, 
						[
							add(velocity_x, flight_vel.x),
							add(velocity_y, flight_vel.y),
						],
						check_next_node
					))",
					
	
	is_at_last_node: "size(_tail) = 0 where _tail = lib.standardize.tail(_targets)",
					
	check_next_node: "if( size( _tail) > 0,
							[set(_current_target, __tail[0] ), set(_targets, __tail )] where __tail = ([{x:int, y:int}] <-_tail),
							fire_event(me, 'reach_target')
	) where _tail = lib.standardize.tail(_targets)",

},
	

on_create: "do_regular_behavior",
					
on_resume: "do_regular_behavior",

on_process: "core_processing",


//note - it's REALLY important that target_callback be last - if this gets fired during a dialogue, the other commands after target_callback don't get executed until the dialogue is finished (which essentially breaks target-seeking entirely)	
on_reach_target: "[
	if(_stand_at_destination,
		begin_landing,
		begin_flying
	),
	set(_current_target,null),
	set(_target_callback, null),
	if(_target_callback != null, _target_callback())
]",

}
