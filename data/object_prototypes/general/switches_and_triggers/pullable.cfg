{
id: "pullable", //ie, levers.
prototype: ["pullable_untracked"],


properties: {
#-------------------------- constructor/destructor logic --------------------------#
	epihittable_obj_constructor: "commands :: 
		[
			force_event_storage,
			pullable_obj_constructor,
			coordinated_pullable_constructor
			;
			if(_event = 0, visually_turn_off, visually_turn_on),
		]
			asserting level.in_editor or event != '' | 'All toggleable trigger objects must have an event so they persist across levels.'
	",

	pullable_obj_constructor: "commands :: null",

#-------------------------- core toggling logic --------------------------#
	do_toggle: "if( not (event_is_irreversible and _event != default_event_state),
					if(_event = 0,
						[level.player.store_event(event, 1), visually_turn_on, statefully_turn_on, broadcast_trigger(1), set(last_toggled, cycle)],
						[level.player.store_event(event, 0), visually_turn_off, statefully_turn_off, broadcast_trigger(0), set(last_toggled, cycle)]
					)
				)",
	
		/*
			There are rare occasions where we want all the mechanics of a pullable object, but we don't want the complication of having to broadcast a signal to some arbitrary set of objects, because we really just want to pack all of that into the same object kicking off the trigger for simplicity's sake.  (The cutscene controller (specifically the ones on the source level, not the destination level - like "cross_level_cutscene_self_trigger") are a decent example).
			
			This is where we'd cram that if we're doing this.
		*/
	statefully_turn_on: "commands :: null",
	statefully_turn_off: "commands :: null",
			

#-------------------------- camera pan settings --------------------------#
	return_to_view_player_once_objects_are_triggered: "bool :: true",
	_post_camera_pan_callback: "commands :: fire_event(me, 'finish_cutscene')",
	
	
	last_did_camera_pan: { type: "int|null", default: null, serializable: false },
	
	has_done_camera_pan_too_recently: "bool :: last_did_camera_pan != null and (level.cycle - last_did_camera_pan < 1000)",

	
	are_any_responders_nearby: "bool :: if(size( distances ) > 0, distances[0] < 1000, false) 

								where distances = sort(map(observable_responders, lib.math.length(me, value)))
								where observable_responders = filter(event_specific_responders, value.should_be_observed)
								where event_specific_responders = filter(responders, value.event = me.event)
								where responders = ([obj triggerable] <- filter(level.chars, value is obj triggerable))
							",
	
	should_do_camera_pan: "bool :: event_is_irreversible or ((not has_done_camera_pan_too_recently) and ((not are_any_responders_nearby) or ignore_proximity_for_camera_pan))",
	
	ignore_proximity_for_camera_pan: "bool :: false", 
	
#-------------------------- camera pan logic --------------------------#
	broadcast_trigger: "def(int new_state) -> commands 
		/*
			In this function, we go through all the triggerables and activate them all (or deactivate, as the case may be).
			If they're meant to have the camera pan to them, then we want to specially wait to trigger them until the camera is on them.
		*/
		if(should_do_camera_pan,
			[
				set(last_did_camera_pan, level.cycle),
				level.player.observe_and_trigger_points_of_interest(observable_responders, bool(new_state), return_to_view_player_once_objects_are_triggered, _post_camera_pan_callback),
				map(event_specific_responders,
					[
						/*
							Temporarily lock the event state of all the observable responders, so they don't show their new status until actually triggered.
						*/
						if(value.should_be_observed,
							set(value.temporarily_lock_event_state, if(new_state = 1, 0, 1))
						),


						/*
							On the other hand, if they're not meant to be given the camera-spotlight treatment, then just trigger them right away.
						*/
						if((not value.should_be_observed),
							if(new_state = 1, value.trigger_on, value.trigger_off)
						)
					] 
				)
			],
			
			/* otherwise we're not supposed to do a camera pan, so just trigger these all immediately, the old-fashioned way: */
			map(event_specific_responders,
				[
					if(new_state = 1, value.trigger_on, value.trigger_off),
					schedule(100, _post_camera_pan_callback),
				]
			)
		)
				where observable_responders = filter(event_specific_responders, value.should_be_observed)
				where event_specific_responders = filter(responders, value.event = me.event)
				where responders = ([obj triggerable] <- filter(level.chars, value is obj triggerable))
	",


#-------------------------- event observance --------------------------#
	
	/*
		For quite a few pullable objects, we actually want to make it so that triggering the event is a one-time thing, not a thing that can be toggled on and off.
		This is only loosely on a type-by-type basis, we change the defaults for some types (in fact, certain objects will entirely break down if they're given the wrong setting).
		For some objects like pressure_plates, though, this is something we'll want to manually control on an instance-by-instance basis.
		
		On those particular objects, we'll check another internal variable - otherwise this will be a static value.
	*/
	event_is_irreversible: "bool :: false",
	
	force_event_storage: "if(level.player.get_stored_event(event) = null, level.player.store_event(event, default_event_state))",
},


}