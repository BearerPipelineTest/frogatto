{
id: "pullable", //ie, levers.
prototype: ["hittable"],
always_active: true,

zorder: "@include data/zorder.cfg:exterior_decor",
			
editor_info: {
	category: "keys & triggers",
	help: "A lever that can be pushed one way or the other. Can be connected to gates and such.",
},

properties: {
#-------------------------- constructor/destructor logic --------------------------#
	epihittable_obj_constructor: "commands :: 
		[
			force_event_storage,
			pullable_obj_constructor
			;
			if(_event = 0, visually_turn_off, visually_turn_on),
		]
			asserting level.in_editor or event != '' | 'All toggleable trigger objects must have an event so they persist across levels.'
	",

	pullable_obj_constructor: "commands :: null",

#-------------------------- hittable overrides --------------------------#
	team: "'neutral'",
	get_hit_by: "def(obj hittable collide_with) -> commands execute(me, if(not has_toggled_recently, filter_damage_triggering(collide_with) ))",


	filter_damage_triggering: "def(obj hittable collide_with) -> commands [
									if(	_event = 0 and
										(
											size(damage_types_allowed_to_toggle_this_to_on) = 0 or
											collide_with.damage_type in damage_types_allowed_to_toggle_this_to_on
										),
											do_toggle,
									),
									if(	_event = 1 and
										(
											size(damage_types_allowed_to_toggle_this_to_off) = 0 or
											collide_with.damage_type in damage_types_allowed_to_toggle_this_to_off
										),
											do_toggle,
									),
								]",										


#-------------------------- core toggling logic --------------------------#
	do_toggle: "if( not (event_is_irreversible and _event != default_event_state),
					if(_event = 0,
						[level.player.store_event(event, 1), visually_turn_on, statefully_turn_on, broadcast_trigger(1), set(last_toggled, cycle)],
						[level.player.store_event(event, 0), visually_turn_off, statefully_turn_off, broadcast_trigger(0), set(last_toggled, cycle)]
					)
				)",
	
		/*
			There are rare occasions where we want all the mechanics of a pullable object, but we don't want the complication of having to broadcast a signal to some arbitrary set of objects, because we really just want to pack all of that into the same object kicking off the trigger for simplicity's sake.  (The cutscene controller is a decent example).
			
			This is where we'd cram that if we're doing this.
		*/
	statefully_turn_on: "commands :: null",
	statefully_turn_off: "commands :: null",
			
		/*
			This is meant to be a cosmetic-only set of commands - it's everything related to the visual representation of the object when it's triggered on or off, but nothing related to broadcasting the signal, or changing the player state.
		*/
	visually_turn_on: "commands :: [sound('switch.wav'), set(animation, 'pushed')]",
	visually_turn_off: "commands :: [sound('switch.wav'), set(animation, 'normal')]", 

	last_toggled: { type: "int", default: -20 },
	has_toggled_recently: "bool :: cycle - last_toggled < 20",

	damage_types_allowed_to_toggle_this_to_on: "[DamageType] :: []",
	damage_types_allowed_to_toggle_this_to_off: "[DamageType] :: []",

#-------------------------- camera pan settings --------------------------#
	return_to_view_player_once_objects_are_triggered: "bool :: true",
	_post_camera_pan_callback: "commands :: fire_event(me, 'finish_cutscene')",
	
	
	last_did_camera_pan: { type: "int|null", default: null, serializable: false },
	
	has_done_camera_pan_too_recently: "bool :: last_did_camera_pan != null and (level.cycle - last_did_camera_pan < 1500)",

	
	are_any_responders_nearby: "bool :: if(size( distances ) > 0, distances[0] < 1000, false) 

								where distances = sort(map(observable_responders, lib.math.length(me, value)))
								where observable_responders = filter(event_specific_responders, value.should_be_observed)
								where event_specific_responders = filter(responders, value.event = me.event)
								where responders = ([obj triggerable] <- filter(level.chars, value is obj triggerable))
							",
	
	should_do_camera_pan: "bool :: event_is_irreversible or ((not has_done_camera_pan_too_recently) and (not are_any_responders_nearby))",
	
	
#-------------------------- camera pan logic --------------------------#
	broadcast_trigger: "def(int new_state) -> commands 
		/*
			In this function, we go through all the triggerables and activate them all (or deactivate, as the case may be).
			If they're meant to have the camera pan to them, then we want to specially wait to trigger them until the camera is on them.
		*/
		if(should_do_camera_pan,
			[
				set(last_did_camera_pan, level.cycle),
				level.player.observe_and_trigger_points_of_interest(observable_responders, bool(new_state), return_to_view_player_once_objects_are_triggered, _post_camera_pan_callback),
				map(event_specific_responders,
					[
						/*
							Temporarily lock the event state of all the observable responders, so they don't show their new status until actually triggered.
						*/
						if(value.should_be_observed,
							set(value.temporarily_lock_event_state, if(new_state = 1, 0, 1))
						),


						/*
							On the other hand, if they're not meant to be given the camera-spotlight treatment, then just trigger them right away.
						*/
						if((not value.should_be_observed),
							if(new_state = 1, value.trigger_on, value.trigger_off)
						)
					] 
				)
			],
			
			/* otherwise we're not supposed to do a camera pan, so just trigger these all immediately, the old-fashioned way: */
			map(event_specific_responders,
				if(new_state = 1, value.trigger_on, value.trigger_off)
			)
		)
				where observable_responders = filter(event_specific_responders, value.should_be_observed)
				where event_specific_responders = filter(responders, value.event = me.event)
				where responders = ([obj triggerable] <- filter(level.chars, value is obj triggerable))
	",


		
	event: { type: "string", default:"", editor_info: { type: "string" } },
	_event: "if(level.player.get_stored_event(event) = null, default_event_state, level.player.get_stored_event(event))",  //if it hasn't been defined yet, we want it to return 0 because some things explicitly check for zero, rather than falsey values
	default_event_state: { type: "int", default: 0, editor_info: { type: "int" }},
	
	/*
		For quite a few pullable objects, we actually want to make it so that triggering the event is a one-time thing, not a thing that can be toggled on and off.
		This is only loosely on a type-by-type basis, we change the defaults for some types (in fact, certain objects will entirely break down if they're given the wrong setting).
		For some objects like pressure_plates, though, this is something we'll want to manually control on an instance-by-instance basis.
		
		On those particular objects, we'll check another internal variable - otherwise this will be a static value.
	*/
	event_is_irreversible: "bool :: false",
	
	force_event_storage: "if(level.player.get_stored_event(event) = null, level.player.store_event(event, default_event_state))",
},


on_collide_object_body: "(
	if(collide_with.team = 'player' and (arg.collide_with_area in ['grab', 'attack', 'thrown']), [
		swallow_event(), 
		get_hit_by(collide_with),
	]) where collide_with = get_hittable_root_object(arg.collide_with)
) asserting arg.collide_with is obj hittable or arg.collide_with is obj hittable_attache",

}