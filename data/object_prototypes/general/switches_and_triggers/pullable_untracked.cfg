{
id: "pullable_untracked", //ie, levers.
prototype: ["hittable"],
always_active: true,
/*
	This prototype is for objects that are toggles/levers/buttons/etc.   The key difference between this and the prototype used by most of these is that this does NOT do any of the actual event-toggling/tracking, or camera movement.  This contains all the code necessary to handle flipping a switch, but defers the behavior for actually tracking it to a more sophisticated prototype that inherits from it.
	
	The rationale here is that although many switches are self-contained, some switches are essentially "compound" objects;  you're flipping multiple switches to trigger a single gate or somesuch.  In such a case, all of the flipping behavior and graphics and such are the same.  However, the logic for actually toggling the event and handling the camera must exist in only the "coordinator" object.

*/
zorder: "@include data/zorder.cfg:exterior_decor",
			
editor_info: {
	category: "keys & triggers",
	help: "A lever that can be pushed one way or the other. Can be connected to gates and such.",
},

properties: {

#-------------------------- constructor/destructor logic --------------------------#
	epihittable_obj_constructor: "commands :: 
		[
			if(_event = 0, visually_turn_off, visually_turn_on),
		]
			asserting level.in_editor or event != '' | 'All toggleable trigger objects must have an event so they persist across levels.'
	",


#-------------------------- hittable overrides --------------------------#
	team: "'neutral'",
	get_hit_by: "def(obj hittable collide_with) -> commands execute(me, if(not has_toggled_recently, filter_damage_triggering(collide_with) ))",


	filter_damage_triggering: "def(obj hittable collide_with) -> commands [
									if(	_event = 0 and
										(
											size(damage_types_allowed_to_toggle_this_to_on) = 0 or
											collide_with.damage_type in damage_types_allowed_to_toggle_this_to_on
										),
											do_toggle,
									),
									if(	_event = 1 and
										(
											size(damage_types_allowed_to_toggle_this_to_off) = 0 or
											collide_with.damage_type in damage_types_allowed_to_toggle_this_to_off
										),
											do_toggle,
									),
								]",										

#-------------------------- coordinator-interfacing logic --------------------------#
	coordinated_pullable_constructor: "commands ::
		if(event != '' and coordinator_object_type != null,
			[
				if(coordinator, [coordinator.add(me),set(_lock_coordinator, coordinator)], _lock_new_coordinator)
					where coordinator = _lock_coordinator_existing,
		
				if(_event != default_event_state, visually_turn_on)
			]
				where _lock_new_coordinator = [
					set(_lock_coordinator, the_coordinator),
					add_object(the_coordinator),
				] asserting the_coordinator is obj pullable_coordinator
				
				where the_coordinator = object(coordinator_object_type, 10, 10, {monitoring: [me], event: event, default_event_state: default_event_state})

				where _lock_coordinator_existing = 
					find(
						filter(
							filter(level.chars,
								value is obj pullable_coordinator
							),
							value.type = coordinator_object_type
						),
						value.event = event
					)

		)",

	coordinator_object_type: "string|null :: null",



				#----- temporary/runtime storage -----#
	_lock_coordinator: { type: "obj pullable_coordinator|null", dynamic_initialization: false, persistent: false },

#-------------------------- core toggling logic --------------------------#
		/*
			do_toggle here is where we get into a little prototypal funny-business.  Basically the implementation you see here pretty much "assumes" this is a coordinated object; every pullable which doesn't actually use the full pullable prototype essentially has no reason to exist unless its using this logic here.

		*/
	do_toggle: "commands :: null /*if(_lock_coordinator != null and (not _lock_coordinator.is_lock_active(me)),
								[	if(arg.collide_with is obj player_controlled, [_lock_coordinator.activate(me), do_aesthetic_activate]),
							])*/",

	

		/*
			This is meant to be a cosmetic-only set of commands - it's everything related to the visual representation of the object when it's triggered on or off, but nothing related to broadcasting the signal, or changing the player state.
		*/
	visually_turn_on: "commands :: [sound('switch.wav'), set(animation, 'pushed')]",
	visually_turn_off: "commands :: [sound('switch.wav'), set(animation, 'normal')]", 


	last_toggled: { type: "int", default: -20 },
	has_toggled_recently: "bool :: cycle - last_toggled < 20",

	damage_types_allowed_to_toggle_this_to_on: "[DamageType] :: []",
	damage_types_allowed_to_toggle_this_to_off: "[DamageType] :: []",


#-------------------------- event observance --------------------------#
/*
	These objects don't personally track their events.  However, they must have one listed, because THIS is the magic connection that tells them which coordinator to look for.
*/

	event: { type: "string", default:"", editor_info: { type: "string" } },
	_event: "if(level.player.get_stored_event(event) = null, default_event_state, level.player.get_stored_event(event))",  //if it hasn't been defined yet, we want it to return 0 because some things explicitly check for zero, rather than falsey values
	default_event_state: { type: "int", default: 0, editor_info: { type: "int" }},




},


on_collide_object_body: "(
	if(collide_with.team = 'player' and (arg.collide_with_area in ['grab', 'attack', 'thrown']), [
		swallow_event(), 
		get_hit_by(collide_with),
	]) where collide_with = get_hittable_root_object(arg.collide_with)
) asserting arg.collide_with is obj hittable or arg.collide_with is obj hittable_attache",

}