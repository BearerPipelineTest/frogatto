{
id: "gazerlet",
prototype: ["seeker_flying"],
always_active: true,

editor_info: {
	category: "enemies, cave",
},

solid_area: null,

properties: {
	#-------------------------- constructor/destructor logic --------------------------#
	specialized_creature_category_constructor: "commands :: [
		[
			add_object(my_particles),
			add_object(aggro_particles),
		]
		;
		[
			my_particles.turn_off,
			aggro_particles.turn_off,
		]
	]",


	#-------------------------- metadata --------------------------#
	points_value: 23,
	taxonomy: "TaxonomyType :: enum stone",
	
	title: "~Gazer~",
	description: "~It looks like a cue ball with a pupil on one side.~",
	taste: "~Observant.~",

	acquirable_item_drop_value: "if(animation = 'fly_aggro', 0, 10)",
	
	#-------------------------- prototype behavior --------------------------#
	altitude_adjustment: "(wave(cycle*5+1000)/50)",
	
	flight_animations: "[string] :: ['fly', 'turn','fly_aggro']",

	appropriate_turning_animation: "string :: if(is_seeking_any_target and _target_obj = level.player, 'turn_aggro','turn')", 


	#-------------------------- cosmetic settings --------------------------#
	_glow: {
		type: "obj effects_attache_glow_source",
		init: "object('effects_attache_glow_source', mid_x, mid_y, {
						time_to_die: 0,
						parent: me,
						flicker_type: enum window_light,
						graphics: enum gazer_flare,
						scale_factor: 0.20,
						base_alpha: 60,
						zorder: me.zorder,
						zsub_order: 1,
					})",
	},

	my_particles: { type: "obj legacy_particle_attache", init: "object('legacy_particle_attache', mid_x, mid_y, {_particle_type: 'gazerlet_red_contrail', parent: me, time_to_die: 20, zorder: me.zorder - 1})", },

	aggro_particles: {
		type: "obj legacy_particle_attache",
		init: "object('legacy_particle_attache', mid_x, mid_y, {
			_particle_type: 'gazer_boss_gazerlet_seek_and_destroy_particles',
			parent: me,
			time_to_die: 20,
			zorder: me.zorder + 1,

			customized_spawn_rate_modulations: [{
				particle_id: 'gazer_boss_gazerlet_seek_and_destroy_particles',
				expression: def(obj legacy_particle_attache particle_obj_context) -> int	
					if(particle_obj_context.last_toggled_off >= particle_obj_context.last_toggled_on,
						0,
						lib.math.round(1000 * fraction_towards_detonation)
					)
					where fraction_towards_detonation = lib.math.ease_in_quint(min(
						1.0,
						(level.cycle - particle_obj_context.last_toggled_on)/decimal(detonation_cooldown)
					))
			}],
		})",
	},

	flame_on:	"[my_particles.turn_on, add_object(_glow)]",
	flame_off:	"[my_particles.turn_off, remove_object(_glow)]",

	do_aggro_sound: "[
			sound_falloff('gazer-mini-aggro-start.wav'),
			spawn('sound_source_individual_attache',mid_x,mid_y,{parent:me, sound_file:'gazer-mini-aggro-loop.wav'}),
			add_object(_glow),
			aggro_particles.turn_on,
		]",

	#-------------------------- custom behavior --------------------------#
	detonation_cooldown: "200",
	
	do_aggro_behavior: "execute(me, [
		me.warn_flash_sequence,
		me.do_aggro_sound,
		schedule(20, me.fly_to_obj(level.player, def() me.detonate)),
		schedule(50 + detonation_cooldown, me.detonate),
	])",
	
	detonate: "bind_command(def() [
		sound_falloff('fire-explode.wav'), 
		spawn('${me.type}.explosion', mid_x, mid_y, facing), 
		force_death(enum neutral)
	])",
	
	
	spiral_info: {
		type: "{mid_x: int, mid_y: int, __index: int, num_mooks: int}|null",
	},
	
	spiral_anim: {
		type: "int",
		default: 0,
		set: "([
			set(me.mid_x, spiral_info.mid_x + offset.x),
			set(me.mid_y, (spiral_info.mid_y + (0.2 + (cos(value))* 0.8) * offset.y)),
			set(me.zsub_order, lib.math.round(lib.math.decimal_mod(angle+90,360.0)-180)),
			set(_glow.zsub_order, 1 + lib.math.round(lib.math.decimal_mod(angle+90,360.0)-180)),

			set(_data, value),
		]
		where location = _to_point([decimal, decimal] <- orbit(spiral_info.mid_x, spiral_info.mid_y, angle, dist))
		
		where offset = {x: dist * sin(angle), y: dist * cos(angle)}
		
		where _to_point = def([decimal, decimal] pt) -> {x: int, y: int} {x: lib.math.round(pt[0]), y: lib.math.round(pt[1])}
		where angle = speed_factor * 360.0*wave_offset + (spiral_info.__index * (360/spiral_info.num_mooks)) 
		where speed_factor = 3.0
		where dist =  125 + 175 * lib.math.ease_in_out_sine(input)
		where wave_offset = lib.math.ease_in_out_sine((lib.math.decimal_mod(value, 360.0) - 180.0)/360.0)
		where input = value/50.0
		)
		asserting spiral_info != null
		",
	},
},


on_end_anim: "
	if(animation = 'burning',
		set(animation, 'burning'),
		if(is_seeking_any_target and _target_obj = level.player,
			set(animation, 'fly_aggro'),
			set(animation, 'fly')
		)
	)
",


animation: [
	{
		"@base": true,
		pad: 3,
		accel_x: 0,
		accel_y: 0,
		body_area: "all",
	},{
		accel_x: 10,
		id: "fly",
		reverse: true,
		duration: 8,
	},{
		accel_x: 10,
		id: "fly_aggro",
		duration: 1,
		attack_area: "all",
		body_area: "none",
	},{
		id: "turn",
	},{
		id: "turn_aggro",
		reverse: true,
		attack_area: "all",
		duration: 5,
	},{
		accel_y: 20,
		id: "hurt",
		duration: 18,
	},{
		id: "burning",
		rect: [85,63,111,89],
		image: "enemies/gazer-grey-small-harmless.png",
		frames: 4,
		duration: 3,
		attack_area: "all",
		body_area: "none",
	},
],


object_type: [
	{
		id: "explosion",
		prototype: ["shot"],
		always_active: true,
		serializable: false,
		zorder: 20,

		properties: {
			dies_upon_dealing_damage: false,
			damage_type: "enum fire",
			damage_cooldown: "60",
		},
		
		on_end_anim: "force_death()",
		
		animation: [{
			id: "normal",
			image: "enemies/gazerlet-explosion.png",
			rect: [0,0,63,63],
			frames: 10,
			frames_per_row: 5,
			pad: 0,
			duration: 4,
			no_remove_alpha_borders: true,
			scale: 4,
			attack_area: 'all'
		}],
	},
],

}