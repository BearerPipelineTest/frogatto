{
id: "mushroom_flier",

friction: 4000,
prototype: ["ant_flying"],


platform_area: [7,13,20,14],
on_bounced_on: "add(velocity_y,450)",

solid_area: null,
editor_info: {
	category: "enemies, forest",
},



properties: {
#-------------------------- constructor/destructor logic --------------------------#
	specialized_creature_category_constructor: "commands :: null",

	custom_reinitialize_vars: "commands :: [
								if(_dive_height = null,
									set(_dive_height, if(floor != null, floor.y, mid_y))
								),
								/*
									Only reinitialize these flying values if we're on a different level or we've been spat out far enough from our original location.
								*/
								if(
										level.id != original_level_we_spawned_on or
										lib.math.length( [mid_x,mid_y], [_init_x,_init_y]) > 1000
									,
									[
										set(_init_x, mid_x),
										set(_init_y, mid_y - 350),
									]
								)]  where floor = find_floor(mid_x,mid_y,-900)",

	unique_attribute_extractor: "def(obj hittable source_object) -> map
		{
			_init_x:		source_object._init_x,
			_init_y:		source_object._init_y,
			_dive_height:	source_object._dive_height,
		} asserting source_object is obj mushroom_flier	
	",


#-------------------------- metadata --------------------------#
	title: "~Mushroom Jellyfish~",
	description: "~The lost tribe of Ter (who would say they knew quite where they were, thank you very much, if you could find them to ask) make a delicious soup with these little guys. Shame you canâ€™t find them, their soup, or the only recipe they left.~",
	taste: "~Deep and earthy, but only when somehow prepared right.~",

#-------------------------- prototype overrides --------------------------#
	springiness: 190,
	spring_amount: 1200,
	bounce_roundness: 1,
	material_sound: "enum fungus",
	
	altitude_adjustment: "(wave(cycle*5+1000)/50)",
	default_anim: "'fly1'",

	taxonomy: "TaxonomyType :: enum mushroom",
	acquirable_item_drop_value: 10,					
	points_value: 14,
	
#-------------------------- core behavior --------------------------#
	dive_speed_x: "int :: if(higher_difficulty, 12+1d12, 12)",
	dive_speed_y: "int :: if(higher_difficulty, 8+1d16, 8)",
	climb_speed_x: "int :: if(higher_difficulty, 8, 5)",
	climb_speed_y: "int :: if(higher_difficulty, 12, 8)",
	
	should_dive: "bool :: (	
						level.player.y > y + 50 and level.player.y < _dive_height and
						level.player.midpoint_x > _x_bound and
						level.player.midpoint_x < _x2_bound
					)",

	bounds_width_padding: "decimal :: 0",

	should_climb: "bool ::	(
								midpoint_y > _dive_height or
								midpoint_y < _desired_height-20 or
								midpoint_x > _x2_bound + bounds_width_padding or
								midpoint_x < _x_bound - bounds_width_padding
							)",

	dive_target: "{x: int, y: int} :: {x: level.player.mid_x, y: level.player.mid_y}", 

	begin_dive: " [
								if(level.player.midpoint_x > midpoint_x, facing(1), facing(-1)),
								set(_behavior, 'dive'),
								add(velocity_y,200)]",
	process_dive: " [	if(dive_target.y > midpoint_y, add(velocity_y, dive_speed_y),add(velocity_y,-dive_speed_y) ),
								if(dive_target.x > midpoint_x, [try_facing(1),add(velocity_x, dive_speed_x)],[try_facing(-1),add(velocity_x,-dive_speed_x)] ),

							   	consider_climb]",
							   	
	consider_climb: "commands :: if(should_climb, begin_climb )",
							   	
	begin_climb: " [	set(_behavior, 'climb')]",
	process_climb: " [	if(midpoint_x < _init_x, [try_facing(1),add(velocity_x, climb_speed_x)],[try_facing(-1),add(velocity_x,-climb_speed_x)] ),
								if(midpoint_y < _init_y, add(velocity_y, climb_speed_y),add(velocity_y,-climb_speed_y) ),
								if(should_hover, begin_hover)
									]",
	begin_hover: " [	set(_behavior, 'hover')]",
	process_hover: " [	if(midpoint_x < _init_x, [try_facing(1),add(velocity_x, climb_speed_x)],[try_facing(-1),add(velocity_x,-climb_speed_x)] ),
								if(midpoint_y < _init_y, add(velocity_y, climb_speed_y),add(velocity_y,-climb_speed_y) ),
								if(should_dive, begin_dive)
									]",
	should_hover: "bool :: (abs(midpoint_x - _init_x) < 100 and abs(midpoint_y - _init_y) < 100)",

	
	central_process: "commands :: [switch(_behavior,
							'', process_climb,
							'hover', process_hover,
							'dive', process_dive,
							'climb', process_climb,
							'regular', [proto_event('ant_flying', 'process_fly'), if(should_dive, begin_dive)]),
							set(rotate, sin(cycle*7) * 4.0),
							if(animation in ['fly1','fly2','fly3'], [set(animation, 'fly'+animation_suffix), set(time_in_animation, time_in_animation)])]",

	animation_suffix: "lib.math.round(sin(cycle*4)*1.0+1.0)+1",  //smoothly oscillate between 1 -> 3

#-------------------------- core processing --------------------------#
	process_fly: "central_process",
	
#-------------------------- vars --------------------------#
	_dive_height: { type: "int", editor_info: { type: "y", value: "midpoint_y+(9*32)" }, dynamic_initialization: true },

#-------------------------- tmp vars --------------------------#
	_behavior: { type: "string", default: "hover", persistent: false },
	_init_x: { type: "int", init: "midpoint_x" },
	_init_y: { type: "int", init: "midpoint_y" },
},

on_end_anim: "animation(default_anim)",
on_end_hurt_anim: "animation(default_anim)",

on_wingflap: "[add(velocity_y,-15), sound_falloff('Jellyfish-Squish'+1d3+'.wav')]",


on_turn: "if(cycle-_last_turned > 30,[set(_last_turned,cycle),set(facing, -facing)])", #symmetric creature, so overrule the usual turn behavior because we have no turn anim


}
