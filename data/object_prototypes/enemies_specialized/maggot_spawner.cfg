{
id: "maggot_spawner",
prototype: ["periodic_mook_spawner"],


editor_info: {
	category: "enemies, cave",
},


properties: {

	
#-------------------------- spawn controls --------------------------#
//TODO-	max_count: "decimal(zone_width/if(higher_difficulty,44.0,66.0))",
	
	spawn_frequency: "zone_width/if(higher_difficulty,9.0,3.0)",




#-------------------------- surface-detection logic --------------------------#
	find_surface: "def(int u, int v) -> [int,int]|null
		if(solid(level,u-1,v,2,2), _find_ceiling_open(u,v), _find_ceiling_solid(u,v))
	",

	_find_ceiling_open: "def(int u, int v) -> [int,int]|null
		//find and return the first open area, going down
		find_first_open_point_on_line(level, me, u, v, u, bounds.y2, 2)
	",  
	
	_find_ceiling_solid: "def(int u, int v) -> [int,int]|null
		//find and return the first solid area, going up
		find_first_solid_point_on_line(level, me, u, v, u, bounds.y1, 2)
	",  
	

	

#-------------------------- vars --------------------------#
	_spawn_countup: { type: "int", default: 0, persistent: false },
	
	
	
#-------------------------- override logic --------------------------#
	custom_setup_logic: "commands :: set(_mook_tracker.directly_tracks_objects, true)",

	do_spawning_logic: "commands :: [
		add(_spawn_countup, 1),
		if(_spawn_countup >= spawn_frequency,
			if(ceiling != null,
				/*
					If the point we've picked doesn't actually have open ceiling/floor in it, then don't try to spawn the maggot - it'd be stuck in solid terrain.  In general, we'd rather these get hand-placed so this doesn't happen.  Some sort of static-analysis to complain about this might be nice, but that's a job for later.  In the meantime, if this happens, it'll essentially lower the spawn rate of these.
				*/
				[
					set(_spawn_countup, 0),
					spawn(spawn_creature_type,
						ceiling[0],
						ceiling[1],
						facing,
						[
							set(child.activation_border, act_B), 
							_mook_tracker.register_tracked_object(child),
						]
					)
				]
			)
		)
	] where ceiling = find_surface(bounds.x1 + 1d(zone_width), bounds.y1 + 1d(zone_height))",
},





}