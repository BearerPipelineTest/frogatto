{
id: "throwable",
prototype: ["core_shaders"],

collide_dimensions: ["~player","enemy","~hazard"], //previously, this business of being strongly in 'enemy' was applied to all hittables; we're trying to see if we can back it away a bit and have it just on throwables.  'Enemy' needs to be strong so player-thrown shots can hit enemies (which via hittable are only weakly in 'enemy').  For enemy-originated attacks, 'player' does not need to be strong, because the player object already is, itself.

activation_border: 1000,
properties: {
#-------------------------- constructor/destructor logic --------------------------#
	epihittable_obj_constructor: "commands :: [
		throwable_object_contructor,
	]",

	throwable_object_contructor: "commands :: null",	//for any specific types of throwable objects, like keys

#-------------------------- hittable metadata --------------------------#
	swallowable: "bool :: true",
	is_player_ammo: "bool :: false",
		
		#two special exceptions here besides the 'no friendly-fire' rule;  evil_harmless is a special team for thrown enemies wherein they can't hurt anyone, regardless of the target's team, but also - stuff from team 'evil' won't friendly-fire them.  They can and will be hurt by any player actions, though, and any traps/neutral damage sources.
	team_and_area_condition: "def(obj hittable collide_with, string collide_with_area) -> bool area_condition(collide_with_area) and team_condition(collide_with)",
	
	team_condition: "def(obj hittable collide_with) -> bool
				team != 'evil_harmless' and
				collide_with.team != team and
				(not (team = 'evil' and collide_with.team = 'evil_harmless'))
			",

	area_condition: "def(string collide_with_area) -> bool (collide_with_area in ['body', 'armored'])",

	
	damage_type: "DamageType :: enum impact",
	damage_cooldown: "int :: 20",

	carry_gravity: "int :: 0",  // carried objects can cause the player to be burdened down, or even to become lighter than normal

	goes_through_enemy_shots: "bool :: true",
	thrown_type: "string :: me.type",
	set_to_animation: "def(string name) -> commands set(animation, name)",

	
	dies_on_impact: "bool :: false", //typically used for throwable_projectiles; this flags something that always dies if it hits any surface with force (not just enemies, but terrain as well)
	
	handle_flinch: "def(obj hittable collide_with) -> commands null",  //don't - this triggers at the moment of death and causes us to register as being on the player's team due to velocity
	
#-------------------------- vars --------------------------#
	time_last_played_fx: { type: "int", default: 0, persistent: false }, 
	time_spat: { type: "int|null", default: null, persistent: false }, 
	juggled: { type: "int", default: 0, persistent: false }, 
	_on_back_count: { type: "int", default: 0, persistent: false },
	cycle_thrown_anim: { type: "int", default: 0, persistent: false },

	in_change_dimensions_fail: { type: "int", default: 0, persistent: false}, 
	
#-------------------------- core functionality --------------------------#
	thrown_vel_x: "def(bool ctrl_down, bool ctrl_up, decimal spit_power) -> decimal
		200 + 7*if(ctrl_up or ctrl_down, spit_power/2, spit_power*2)
	",
	thrown_vel_y: "def(bool ctrl_down, bool ctrl_up, decimal spit_power) -> decimal
		600 + if(ctrl_up, if(ctrl_down, -200,200 + 7*spit_power), 0)
	",
	
	ignores_player_momentum: "bool :: false",

	maybe_output_hittable_collision_info: "def(string input) -> commands if(should_debug_output_damage_values, debug(input))",


	handle_collision_with_hittable: "def(obj hittable collide_with, string collide_with_area) -> commands execute(me, bind_command(def() 
		[

		if(not get_hittable_root_object(me).self_or_attache_already_got_hit_this_frame, [
			set(get_hittable_root_object(me).self_or_attache_last_hit, level.cycle ),

			maybe_output_hittable_collision_info( 'Throwable colliding against hittable (me/them) ' + addr(me) + ' ' + me.type + '/' + addr(collide_with) + ' ' + collide_with.type + ', team/cw_team/area for valid hit is: ' + me.team + '/' + collide_with.team + '/' + collide_with_area + '=' + team_and_area_condition(collide_with, collide_with_area) + ', collide_with is a shot: ' + collide_with.is_a_shot + collide_with.velocity_x + ' ' + collide_with.velocity_y),
			
			if(team_and_area_condition(collide_with, collide_with_area), [
				/*
					if it's not an enemy shot, try to deal damage to it (this will fire only in the case of hitting something's solid_area before actually hitting its body_area, because normally we'd get this hit event from the other object's side.  We prevent getting two hits in a frame by checking inside handle_body_collision to see if we've already done a get_hit_by this frame)
				*/
				if(not collide_with.is_a_shot, [collide_with.handle_body_collision(me, 'thrown')]),

			
				/*
					If it is an enemy shot, try to destroy it (so the player can throw projectiles out to kill incoming enemy attacks).
				*/
				if(collide_with.is_a_shot and (not collide_with.goes_through_enemy_shots), [collide_with.handle_body_collision(me,'thrown')]),


				/*
					Go ahead and receive collision damage, unless we're hitting an enemy shot.  If we are, get hit by it unless we're flagged to go through enemy shots.
				*/
				if((collide_with.is_a_shot and (not me.goes_through_enemy_shots)) or (not collide_with.is_a_shot),
					if( (sourceless_damage_cooldown < (level.cycle - time_last_hit)),
					[
						elastic_collision(collide_with, {multiplier: 0.5, constraint: {min: 500, max: 1500} } ), 	
						me.get_hit_sourceless(enum impact,standard_thrown_damage),
						set(time_last_hit, level.cycle),
					])
				)]
			)
		])]))",
	
	do_solid_impact_fx: "def(int x_bias, int y_bias) -> commands
								if( speed > 1000,
									impact_cloud(x_bias, y_bias, 'large'),
									if(speed > 100,
										impact_cloud(x_bias, y_bias, 'small')
									)
								)
						",
		
	general_collision_handler: "def(int x_bias, int y_bias, custom_obj|null collide_with, commands terrain_response) -> commands execute(me, bind_command(def() [
									if(dies_on_impact and speed > 900, force_death()),
									if(level.cycle - time_last_played_fx > 5, [
										set(time_last_played_fx, level.cycle),
										//play_impact_sound,
										do_solid_impact_fx(x_bias, y_bias),
									]),
									if(collide_with is obj hittable,
										if(should_use_special_handle_collision_with_hittable_behavior((obj hittable <- collide_with),'body'),
											special_handle_collision_with_hittable((obj hittable <- collide_with),'body'),
											handle_collision_with_hittable((obj hittable <- collide_with),'body'),
										),
										terrain_response
									),
								]))",

	/*
		When we hit something, we have standard behaviors for both terrain and hittable collidees - normally we either want to do the standard behavior, or do *nothing*.  However, as we started adding item abilities, we discovered there were a decent number of items that should have completely standard/normal behavior against *almost* everything in the game, except for when they hit a specific class of objects, for which they have special behavior.
		
		To accomodate this, we've added a hook so that - if something meets a totally arbitrary, subclass-defined criterion, we branch to an alternate (also subclass defined) set of behavior.
	*/
	should_use_special_handle_collision_with_hittable_behavior: "def(obj hittable collide_with, string collide_with_area) -> bool false",
	
	special_handle_collision_with_hittable: "def(obj hittable collide_with, string collide_with_area) -> commands 
		null
	",

#-------------------------- terrain collisions --------------------------#
	switch_to_being_on_back: "commands ::	if(animation = 'thrown',
												[
													set(_on_back_count, 0),
													if('on_back' in available_animations, animation('on_back')),
													custom_switch_to_being_on_back_behavior,
												]
											)",

		/*
			a hook for any special behavior an object wants to do when switching to being on its back.
		*/
	custom_switch_to_being_on_back_behavior: "commands :: null",

	terrain_response_head: "commands :: set(velocity_y, -velocity_y/2)",
	terrain_response_side: "commands :: set(velocity_x, -velocity_x/2)",
	terrain_response_feet: "commands :: 
							[
								if(animation = 'thrown' and velocity_y + abs(velocity_x) > 600, 
									[
										set(velocity_y, -(velocity_y*3)/5 - (velocity_x*slope_standing_on)/90.0),
										set(velocity_x, (velocity_x*4)/5 + (velocity_y*slope_standing_on)/90.0)
									],
									switch_to_being_on_back
								),
								set(rotate, slope_standing_on),
								set(juggled, 0),
							]
							",	
	
	annul_ground_velocity_if_nearly_at_rest: "commands ::
												if(abs(hypot(velocity_x, velocity_y)) < 5, 
													[set(velocity_x, 0), set(velocity_y, 0)],
													if(abs(hypot(velocity_x, velocity_y)) < 75 and is_standing,
														[set(velocity_x, (velocity_x*1)/5), set(velocity_y, (velocity_y*1)/5)]
													) 
												)",
},


#-------------------------- gets fired by frogatto immediately after the creature is launched --------------------------#
on_spat: "	[
				set(rotate, 0),
				set(time_spat,level.cycle),
				add(juggled, 1),
				set(brightness, 255),
			]",

#-------------------------- handle interaction --------------------------#

on_been_grabbed: "",
on_collide_damage: "force_death()",

#-------------------------- handle collisions during thrown animations --------------------------#
on_collide_head: "general_collision_handler(mid_x, y, arg.collide_with, terrain_response_head)",
on_collide_side: "general_collision_handler(mid_x, y2, arg.collide_with, terrain_response_side)",
on_collide_feet: "general_collision_handler(mid_x, y2, arg.collide_with, terrain_response_feet)",


#-------------------------- handle error conditions --------------------------#
on_stuck: "if(not solid(level, midpoint_x, y+self.img_h-10), add(velocity_y, -1200), add(velocity_x, 1d600-300))",

	/*
		Instead of dying if they collide with frogatto/others right away, give them a brief chance to get kicked out of the way.  The former concerns associated with instadying are still dealt with because if the player does entrap them and deliberately cause this, they still cause damage.
		
		If we're not colliding with an object, but instead are colliding with terrain, then just immediately die.
	*/
on_change_solid_dimensions_fail: "
	if(true, //thing is obj hittable,
		if(in_change_dimensions_fail > 15,
			die_from_bad_collision_state,
			/*[
				add(in_change_dimensions_fail, 1),
				add(velocity_x, if(thing.midpoint_x > midpoint_x, -500,500))
			]*/
		),
		die_from_bad_collision_state
	)",
			  
}
