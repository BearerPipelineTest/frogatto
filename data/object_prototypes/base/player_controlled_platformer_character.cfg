{
id: "player_controlled_platformer_character",
solid_dimensions: ["player","common","boss"],
vehicle: false,
is_human: true,
prototype: ["player_controlled"],
collide_dimensions: ["player","enemy","hazard","item"],

properties: {
#-------------------------- constructor/destructor logic --------------------------#
	general_player_obj_enter_level: "commands :: set(exempt_from_dying_whilst_falling_rules_for_a_cutscene, false)",



#-------------------------- hittable metadata --------------------------#

	hurt_velocity_y: "-800",
	hurt_velocity_x: "0",

	can_jump: "def() -> bool
	  bool(bool(is_standing) and (not animation in ['interact', 'fall', 'jump', 'start_jump']))",

#-------------------------- cutscene movement --------------------------#
	scripted_move_to_x: "def(int target_x, int target_facing, null|function()->commands callback=null) -> commands [
		set(me.scripted_target_x, target_x),
		set(me.scripted_target_facing, target_facing),
		if(callback != null, set(me.scripted_move_callback, callback)),
		fire_event(me, 'handle_move_script'),
	]",


	clear_move_script: "commands :: [
		remove_control_lock('scripted_move_to'),
		set(me.scripted_target_x, null),
		set(me.scripted_target_facing, null),
		set(me.scripted_move_callback, null),
		if(scripted_move_callback != null, scripted_move_callback() )
	]",

	handle_move_script: "commands :: [
		if(scripted_target_x is int and scripted_target_facing is int,
			if(abs(midpoint_x - scripted_target_x) < 10,
				if(abs(scripted_target_facing) = 1 and facing != scripted_target_facing, [
						remove_control_lock('scripted_move_to'),
						set(facing, if(scripted_target_facing > 0, 1, -1)),
						schedule(1, fire_event('handle_move_script')),
					] where direction_key = if(scripted_target_facing > 0, ['ctrl_right'], ['ctrl_left']),
					clear_move_script	
				),
				[
					if(does_control_lock_exist('scripted_move_to'), apply_registry, add_control_lock(direction_key, 'scripted_move_to')), 
					schedule(1, fire_event('handle_move_script')),
				] where direction_key = if(scripted_target_x > midpoint_x, ['ctrl_right'], ['ctrl_left'])
	
			)
		)
	]",

#-------------------------- cosmetic hittable stuff --------------------------#
	do_heartbeat_screen_flash: "if(me.hitpoints <= low_hp_cap and me.hitpoints > 0, [
									if(cycle > (last_player_heartbeat_fx_tick + repeat_interval),
										[
											heartbeat_screen_flash(magnitude, enum tick),
											schedule(lib.math.round(other_repeat_interval),
												heartbeat_screen_flash(magnitude, enum tock)
											)
										]
									),
								])
									
										where other_repeat_interval = repeat_interval * 0.3125   //the 'second beat' of a heartbeat  (nominally 25 ticks into an 80 tick cycle)
										where repeat_interval = 80 + (80 - 80 * trail_off)			//add something approaching 2x the duration when we've less recently been hit.
										where magnitude = trail_off * (1 - (me.hitpoints - 1)/low_hp_cap)		//the -1 makes it so it's always at 100% at 1hp.
										where trail_off = lib.math.constrain(0.00, (1-(me.cycle - last_got_hurt_for_heartbeat_fx)/1750.0), 1.0)
										where low_hp_cap = max_hitpoints/2.5",		//start flashing around 2/5 health.
										
										
	heartbeat_screen_flash: "def(decimal magnitude, enum {tick, tock} variant) -> commands [
								if(variant = enum tick,
									[
										sound('heartbeat-tick.wav',magnitude),
										set(last_player_heartbeat_fx_tick, cycle),
									]
								),
								if(variant = enum tock,
									[
										sound('heartbeat-tock.wav',magnitude),
									]
								),
								screen_flash([255, 0, 0,0], [255, 0, 0,lib.math.round(6*magnitude)], 16),
								schedule(16, screen_flash([255, 0, 0,lib.math.round(96*magnitude)], [255, 0, 0,-lib.math.round(6*magnitude)], 16) )]",


	//screen_flash(color, delta, duration):  flashes the screen the given color, and keeps the flash going for duration cycles. If delta is given, the color of the flash will be changed every cycle until the duration expires.
	player_damage_screen_flash: "def(int damage_amounts) -> commands
		if(damage_amounts > 2 or damage_amounts >= hitpoints, 
			screen_flash([255, 0, 0,255], [255, 0, 0,0], 4),  
			if(damage_amounts = 2, 
				screen_flash([255, 0, 0,200], [255, 0, 0,0], 3), 
				screen_flash([255, 0, 0,70], [255, 0, 0,0], 2)))",
	
	character_specific_damage_response: "def(DamageType damage_type, int amount) -> commands null",
	
	player_damage_response: "def(DamageType damage_type, int amount) -> commands [
		set(last_got_hurt_for_heartbeat_fx, cycle),
		play_haptic_effect('rumble'),
		player_damage_screen_flash(amount),
		set(solid_dimensions_in, ['player']),
		character_specific_damage_response(damage_type, amount)
	]",
	
	
	posthit_invicibility_period: "int :: 100",


	handle_interacting: "if(abs(velocity_x) < 100 and is_standing,
		/*
			This is first-come, only-served, because if all possible objects are allowed to interact, we've got the possibility of having situations where frogatto walks through a door at the same time as speaking to an NPC, resulting in the possibility of a permanent control lock (or other badness).  If we're gonna do multiple simultaneous interactions, we need to come up with a priority system and deal with a bunch of other difficult-to-solve problems.
		*/
		if(collidee != null,
			[
				set(interacting_with, collidee),
				fire_event(collidee, 'interact')
			]
		) where collidee = find(level.active_chars, 'char', collides(context.me, 'body', char, 'interact'))
	)",
	
	handle_down_key_interacting: "if(collidee is obj standard_values, 
									if(collidee.interacts_when_pressing_down,
										handle_interacting
									)
								) where collidee = find(level.active_chars, 'char', collides(context.me, 'body', char, 'interact'))",


#-------------------------- vars --------------------------#

	scripted_target_x: { type: "int|null", default: null },
	scripted_target_facing: { type: "int|null", default: null },
	scripted_move_callback: { type: "null|function()->commands", default: null },

#-------------------------- temporary vars --------------------------#
	last_player_heartbeat_fx_tick: { type: "int", default: 0, persistent: false },  

	last_got_hurt_for_heartbeat_fx: { type: "int", default: 0, persistent: false },  //use a separate counter for this because we want it to persist across levels + not interfere with other baked-in behavior for last_hit
	_last_standing_cycle: { type: "int", default: -1, persistent: false },
	left: 0,
	right: 0,
	lookup_time:{ type: "int", default: 0, persistent: false },
	lookdown_time: { type: "int", default: 0, persistent: false },
	fired_talk: { type: "int", default: 0, persistent: false },
	talking_to: { type: "custom_obj|null", default: null, persistent: false },
	interacting_with:  { type: "custom_obj|null", default: null, persistent: false },
},

on_process: "do_heartbeat_screen_flash",

on_end_hurt_anim: "animation('stand')",

on_handle_move_script: "handle_move_script",

timer_frequency: 2,
on_timer: "[
	//Handle ending of invincibility.
	if((level.cycle - time_last_hit)/2 <= 50 and (level.cycle - time_last_hit)/2 > 1,
		set(solid_dimensions_in, ['player', 'common', 'boss'])),
	if(not is_invincible_posthit, [
		if(underwater and water_object,
			if( the_liquid.liquid_damage, [
			    handle_damage_sourceless(enum acid, the_liquid.liquid_damage),
				display_hurt_visuals({damage_type: the_liquid.damage_type},the_liquid.liquid_damage),
				if(water_object.type = 'acid_controller', [		/*TODO:  port this to hittable?*/
					sound('acid.ogg'),
					spawn('acid_burn_particles',mid_x,mid_y,1,set(child.parent,me)),
				]),
			set(time_last_hit, level.cycle)]) where the_liquid = (obj liquid <- water_object)
		),
		set(alpha,255),
	]),
]",
			
on_ctrl_jump: "if(can_jump(), [
	if(not ctrl_down, [
		if('start_jump' in available_animations, animation('start_jump'), animation('jump')),
        /* workaround for friction not applying to jumping from the grace period */
		add(velocity_x, if(is_standing, velocity_x, velocity_x*0.52)),
		set(velocity_y, -jump_power)
	]),
	
	if(not ctrl_down or underwater, [
		set(jumpCloud.parent, self.standing_on),
		add_object(jumpCloud),
	] where jumpCloud = object('dust_cloud_jump', midpoint_x, y2 - 22, facing)),
	
	if(is_standing_on_platform,
		if(ctrl_down,
			[set(fall_through_platforms, 10),
			set(velocity_y, velocity_y + jump_power/10)]
		)
	),
])",
		
on_ctrl_up: "handle_interacting",
	
on_start_interact: "[
	animation('interact'), 
	set(fired_talk, 0),
]",

on_interacting: "if(interacting_with and fired_talk = 0, [
	set(fired_talk, 1), 
	fire_event(interacting_with, 'talk'),
])",

on_end_interact_anim: "animation('stand')",

#-------------------------- error condition handling --------------------------#
//if the player gets 'stuck' in a narrow gap, this gets them out by automatically making them jump
on_stuck: "if(not underwater, 
	if(not solid(level, midpoint_x, y+self.img_h-10), 
		add(velocity_y, -jump_power), 
		add(velocity_x, if(facing=1, 300, -300))))",

//if we change our solid dimensions -- i.e. try to come back from being hurt, and we can't because we're on top of another solid object, then we take more damage
on_change_solid_dimensions_fail: "if(not is_invincible_posthit, [
	add(hitpoints, -1), 
	set(time_last_hit, level.cycle),
])",

#-------------------------- damage handling --------------------------#

on_collide_damage: "[get_hit_sourceless(enum stab, int(arg.surface_damage)), cause_flinch(null)]",

//when falling, if we are standing for two consecutive frames, change us to a standing animation.
on_process_fall: "
	if(is_standing, 
		if(_last_standing_cycle = cycle-1, 
			animation('stand'), 
			set(_last_standing_cycle, cycle)))",

//check if we end up on a slope in which case we re-calculate our standing.
on_enter_stand_anim: "if(abs(slope_standing_on) > 20, start_standing)",
on_enter_stand_up_slope_anim: "if(slope_standing_on*facing > -20, start_standing)",
on_enter_stand_down_slope_anim: "if(slope_standing_on*facing < 20, start_standing)",
}
