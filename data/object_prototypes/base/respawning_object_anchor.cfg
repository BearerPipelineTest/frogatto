{
id: "respawning_object_anchor",
properties: {
	spawn_type:	"string|null :: null",
	current_child: { type: "custom_obj|null", default: null },
},
on_start_level: "[set(alpha,0),fire_event('spawn_thing')]",

#checking HP is our way of checking if the object is dead; since we retain a reference here, it may not be disposed of
on_become_active: "[fire_event('spawn_thing')]",
on_spawn_thing: "if(current_child = null or (not current_child in level.chars) or current_child.hitpoints <= 0,
					if(spawn_type != null,
						if(
							/*
								Don't spawn if there's another of the same type awfully near our spawn point.  We've nested this code so that hopefully, it never executes if we've actually got a current_child, and if we do find one, we want to re-assign the value to the current child, so it doesn't continue incurring the perf loss.

								The reason why there would -be- an existing one that wasn't already considered a current_child is a weird saving/serialization bug.
							*/

							not existing_one,
							spawn(spawn_type, midpoint_x, midpoint_y, facing, [set(me.current_child, child)] ),
							set(current_child, existing_one)
						) where existing_one = find(filter(level.chars, value.type = spawn_type), lib.math.length(me, value) < 100)
					)
				)",
editor_info: {
	category: "ammo",
},
}