{
id: "hittable_attache",
is_strict: true,
collide_dimensions: ["~enemy","~hazard"],
prototype: ["transient_object"],
serializable: false,



properties: {
#-------------------------- connections --------------------------#
	_parent_obj: "(obj hittable <- me.parent)
						asserting not (me.parent = null) | 'An object of type:' + me.type + ' and _addr:' + addr(me) + ' ended up without a parent object.  The design of this prototype demands that these objects always have a parent, period.  They need one upon creation, and if a parent dies, it must immediately remove all child objects of this type.'",
	
	attach_to_spawner: "commands :: if(not me in _parent_obj._hittable_attaches, add(_parent_obj._hittable_attaches, [me]))",


#-------------------------- constructors/destructors --------------------------#
	hittable_obj_constructor: "[attach_to_spawner, do_setup]",
	hittable_obj_destructor: "additional_death_cleanup",

	do_setup: "[]",
	additional_death_cleanup: "commands :: null",

},



#-------------------------- collision event handling --------------------------#

	on_collide_object_body: "if(arg.collide_with != _parent_obj,
								[_parent_obj.handle_body_collision(arg.collide_with, arg.collide_with_area, arg.all_collisions, arg.collision_index)]
							)",



}
