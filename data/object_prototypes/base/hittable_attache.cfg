{
id: "hittable_attache",
is_strict: true,
collide_dimensions: ["~enemy","~hazard"],
prototype: ["transient_object"],
serializable: false,



properties: {
#-------------------------- constructors/destructors --------------------------#
	hittable_obj_constructor: "[attach_to_spawner, do_setup]",
	hittable_obj_destructor: "additional_death_cleanup",

	do_setup: "[]",



#-------------------------- vars --------------------------#
	custom_relative_pos_default: { type: "{mid_x: decimal, mid_y: decimal}|null", default: null },


#-------------------------- connections --------------------------#
	_parent_obj: "(obj hittable <- me.parent)
						asserting not (me.parent = null) | 'An object of type:' + me.type + ' and _addr:' + addr(me) + ' ended up without a parent object.  The design of this prototype demands that these objects always have a parent, period.  They need one upon creation, and if a parent dies, it must immediately remove all child objects of this type.'",
	
	attach_to_spawner: "commands :: if(not me in _parent_obj._hittable_attaches, add(_parent_obj._hittable_attaches, [me]))",
	remove_from_spawner: "commands ::	if(me in _parent_obj._hittable_attaches,
											; set(_parent_obj._hittable_attaches,
												filter(_parent_obj._hittable_attaches, value != me)
											)
										)",


#-------------------------- cosmetics --------------------------#
	relative_pos_default: "{mid_x: decimal, mid_y: decimal} :: if(custom_relative_pos_default, custom_relative_pos_default, { mid_x: 0, mid_y: 0 })",
	initialize_position: "commands :: execute(me, [
						set(relative_x, relative_pos_default.mid_x),
						set(relative_y, relative_pos_default.mid_y),
					])",


#-------------------------- logic --------------------------#
	additional_death_cleanup: "commands :: null",

		/*
			Unlike effects_attaches, hittable_attaches currently have to die immediately.
			
			There are reasons why deferring their death would be cosmetically desirable (imagine a segmented worm that explodes, segment-by-segment, as it dies).   However, if we actually go down that road, we're gonna have a real rabbit-hole mess to deal with:  `hittable_attaches` have a strong, baked-in assumption their parent is alive and can be referenced to pass damage to.   Would be nice to do at some point, but for the immediate moment, we support the same externally-visible API, but instantly remove the object.
		*/
		
		/*
			TODO: Upon further reflection - we'd really like to bring these up to parity with effects_attache, but this is way to much of a mess to refactor before this release.
			
			I think our goal in refactoring it is we should really eliminate that "magic" in the matched `scheduled_death_at` and `recorded_transfer_at` calls -- specifically because the way they're designed right now plays poorly with immediate deaths, and just generally is a bad/brittle code style.
		*/
	//schedule_death_cleanup: "commands :: execute(me, [])",
},


#-------------------------- collision event handling --------------------------#

	on_collide_object_body: "if(arg.collide_with != _parent_obj,
								[_parent_obj.handle_body_collision(arg.collide_with, arg.collide_with_area, arg.all_collisions, arg.collision_index)]
							)",



}
