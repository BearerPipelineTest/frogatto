{
id: "shot",
is_strict: true,
prototype: ["core_shaders"],
activation_border: 1000,  //most shots need to persist for a good bit further than most standing creatures do; they're often fired off-screen.



collide_dimensions: ["player","enemy","~hazard","obstruction"],
#solid_dimensions: ["enemy","player","common"],
solid_dimensions: ["~shot"],

#make it so when the object runs into solid parts of the level, an on_collide_level event is fired so the shot can be destroyed.
object_level_collisions: true,
has_feet: false,

/*
expected things a user of this prototype must implement to deal damage
	properties.attack_damage - how much damage is dealt
	properties.attack_knockback - a power-level for how hard it hits.
	properties.damage_cooldown - how long the enemy will be invincible, used to cap the DPS of flamethrower-esque weapons, whilst allowing nigh-unlimited numbers of shots to make the attack easy to hit with.
		Note that if cooldown is zero, the enemy should always take damage.
	animation attack_area - an area that will trigger a hit
	animation body_area - only set this if you want this shot to be neutralizable by enemy shots
*/
properties: {
#-------------------------- hittable overrides --------------------------#
	team: "string :: 'evil'",
	attack_knockback: "int :: 0",
	attack_damage: "int :: if(higher_difficulty, 2, 1)",
	damage_cooldown: "int :: 0",
	
	taxonomy: "TaxonomyType :: enum neutral",  //TODO - this could be evil; this opts shots out of damage-type calcs completely (with regards to shots, themselves receiving damage, not their victims).

	has_mini_hp_bar: "bool :: false",

#-------------------------- cosmetic tools --------------------------#
	set_rotation_to_angle_of_motion: "commands :: set(rotate, facing_adjusted_velocity_angle)",


#-------------------------- shot settings --------------------------#
		// only for death upon striking an enemy body/armor area, NOT for from hitting enemy attack areas.  Always dies instantly.
	dies_upon_dealing_damage: "bool :: true",

		// causes the shot to bleed HP (usually to die instantly because it has only one HP) if it hits an enemy attack area.  Primarily used to allow frogatto to breathe fire/energy-shots at the enemy and deflect their shots with his shots - almost always set in favor of the player.
	deflectable_via_attacks: "bool :: if(team = 'player', false, true)",  

		// these two properties exist because there may be cases (like the homing shot) where we want a projectile that does expire upon successfully hitting, but only if it successfully hits an actual enemy, not shots fired by the enemy.  
	is_a_shot: 	"bool :: true",
	goes_through_enemy_shots: "bool :: false",

	is_aquatic: "bool :: false",

	/*
		This is specifically for on_collide_level.  All that event provides is notification that our opaque pixels touched the level's solid pixels - it does nothing for our collide areas.  For most shots, this is fine and good, because their actual graphical size is quite small, but for some rather large shots like the player's super-shots, we want the area within which they hit enemies to be much, much larger than that within which they'll die from colliding with terrain - this is most prominent on the fireball - we want the targeting for it to be very, very forgiving - but at its default height off the ground (to be correctly spaced WRT the player), it's graphics are actually touching the ground, and it'd normally detonate from those pixels touching the ground, unless we deliberately worked around it.
		
		Thus, what we do with shots like that is we actually give them a solid_area, and keep them out of all the normal solid_dimensions so this solid_area only collides when they hit the actual level itself.  We then use the following to prevent them from potentially double-triggering the event from multiple collide mechanisms (they'll handle self-destructing in their collide_ side/feet/head events).
		
		Note here that the value of solid_rect when it's null, outputs as:  {x: 0, y: 0, x2: 0, y2: 0, w: 0, h: 0}
	
		note: this `ignores_object_level_collisions` is JUST a "sensible default" - so that if we have a solid shot it automatically does what we describe above.
	*/
	
	ignores_object_level_collisions: "bool :: do_we_have_a_solid_area",


	dies_upon_colliding_with_level: "bool :: true",

#-------------------------- collision handlers --------------------------#
	enter_water: "if(not is_aquatic, me.force_death())",

	
		#remember, these events are NOT for dealing damage to an enemy - the enemy takes care of that in its copies of these events (in hittable).  These are only for potentially dealing damage to ourselves.  The design pattern in frogatto is that the victim decides everything WRT its own damage; the attacker simply provides info the victim makes decisions with.
	maybe_get_hit_by: "def(obj hittable collide_with) -> commands
								/* if we hit our body, try bleeding HP from potential deflections */
									if(deflectable_via_attacks, get_hit_by(collide_with))",

	
	handle_attack_area_collision_with_hittable_body: "def(obj hittable collide_with) -> commands execute(me,
								/*
									when our attack hits, decide if we want to kill ourselves.
									it's assumed, but only enforced externally, that this is our attack area hitting something else's body
								*/	  

								if(dies_upon_dealing_damage and if(collide_with is obj shot, 
									collide_with.deflectable_via_attacks = true, true),
									if(me.goes_through_enemy_shots and collide_with.is_a_shot,
										null,
										me.force_death()
									)
								)	
							)",
	

	general_collision_handler: "def(int x_bias, int y_bias, custom_obj|null collide_with, commands terrain_response) -> commands
										if(collide_with is obj hittable,
											/* if we've somehow managed to have our solid area collide *before* handling of the body area colliding, and the thing on the other end is an obj hittable, then we pretend we got hit on our 'body area' rather than our solid area */
											maybe_get_hit_by(collide_with),
											
											/* otherwise we do some special logic for colliding with terrain */
											if(not dies_upon_colliding_with_level,
												terrain_response,
												me.force_death()
											)
										)",	

		/* These are pretty much pure-virtual; if you choose to not let a shot die-on-impact, and don't give it custom behavior here, it's gonna look pretty bad. */
	terrain_response_head: "commands :: null",
	terrain_response_side: "commands :: null",
	terrain_response_feet: "commands :: null",
	
	
		/* These are a bunch of functions for extracting the angle-of-incidence for a `on_collide_side` - i.e. our solid_rect hitting a wall that's not vertical.  We can't use slope_standing_on because we're not considered to be 'standing' on the ground, so we have to directly query the level-solidity and use some trig to figure out what the actual angle is.  */
	
		//if any of the columns are the full height of our solid rect, then we've just hit a vertical wall, and atan won't be able to calculate this - we therefore had to hard-code a 90Â° angle here.			
	get_ground_angle_from_xy_values: "decimal :: if(abs(vals.y) = solid_rect.h, -90, atan2(vals.x, vals.y) ) where vals = extract_xy_values_from_heights",

	extract_xy_values_from_heights: "{x:int,y:int} :: {x: 2, y: cols[2] - cols[0] }  where cols = convert_columns_into_heights",
	convert_columns_into_heights: "[int] :: map(split_solid_grid_into_columns, size(filter(value, value = true)))",
	split_solid_grid_into_columns: "[[bool]] :: map(range(3), grid[index*column_length:index*column_length+column_length])
										where column_length = solid_rect.h
										where grid = get_solid_grid_of_impact_point",
	get_solid_grid_of_impact_point: "[bool] :: solid_grid(level, if(velocity_x < 0, solid_rect.x - 1, solid_rect.x2 - 1), solid_rect.y + 1, 3, solid_rect.h)",
		//weird notes:  the "+1" on the solid_rect.y is to correct for an odd biasing effect, where the solid rect wouldn't reach down far enough
	
},

	/* remember:  these trigger if our *solid area* touches something, whether an enemy or the level */
on_collide_head: "general_collision_handler(mid_x, y, arg.collide_with, terrain_response_head)",
on_collide_side: "general_collision_handler(mid_x, y2, arg.collide_with, terrain_response_side)",
on_collide_feet: "general_collision_handler(mid_x, y2, arg.collide_with, terrain_response_feet)",

	/* this triggers if `object_level_collisions: true` and one of our named collision areas (attack, body, etc) hits the level */
on_collide_level: "	if(not ignores_object_level_collisions,
						if(dies_upon_colliding_with_level,
							me.force_death()
						)
					)",

}
