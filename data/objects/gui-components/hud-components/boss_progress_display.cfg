//The mana bar displays how much energy for abilities we have.
{
	id: "boss_progress_display",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	hidden_in_game: false,
	serializable: false,
	
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	no_compile_image: "gui/progress-bar-center.png,gui/progress-bar-well-center.png",

	properties: {
		bar_tween_speed: 16.0, //Decimal. Larger numbers = slower bar adjustment.
	

		
		last_displayed_value: { type: "decimal", default: 0.0 },
		recent_max_hitpoints: { type: "int", default: 0 },
		
		reset: "def() -> commands [
			//set((object<-level.gui[0].vars).bosses, []),                //Clear any saved bosses from the level. When the checkpoint is activated, it doesn't muck around with any of the level variables.
			map([widget]<-widgets.children, set(value.visible, false)), //Hide the display.
			set(last_displayed_value, 0.0),                             //And set the length to zero, so the bar starts off empty
		]",
		
		reset_boss_list: "commands :: set(me.boss_list, [])",
		
		//potential_bosses: "[obj hittable] :: filter(level.chars, value is obj hittable and value.is_a_boss)",
		boss_list: { type: "[obj hittable]", default: [] },









		mana_bar_center: {
			type: "obj boss_progress_display.bar_center",
			init: "object('boss_progress_display.bar_center', mid_x, mid_y, {parent: me})",
		},
		mana_bar_left: {
			type: "obj boss_progress_display.left_cap",
			init: "object('boss_progress_display.left_cap', mid_x, mid_y, {parent: me})",
		},
		mana_bar_right: {
			type: "obj boss_progress_display.right_cap",
			init: "object('boss_progress_display.right_cap', mid_x, mid_y, {parent: me})",
		},
		angry_heart_icon: {
			type: "obj boss_progress_display.angry_heart_icon",
			init: "object('boss_progress_display.angry_heart_icon', mid_x, mid_y, {parent: me})",
		},


		constructor: "[
			add_object(mana_bar_center),
			add_object(mana_bar_left),
			add_object(mana_bar_right),
			add_object(angry_heart_icon),
			
			set(angry_heart_icon.relative_x, generic_padding_value + angry_heart_icon.img_w/2),
		]",
		
		generic_padding_value: "int :: 16", //used on both sides of the screen, and between the icon and the bar.
		heart_icon_margin: "int :: angry_heart_icon.img_w + generic_padding_value",
		hitpoint_bar_length: "int :: level.camera_position[2] - heart_icon_margin - (generic_padding_value * 3)",

		draw_bar: "[
			[
				set(mana_bar_left.relative_x, x_offset),
				set(mana_bar_left.relative_y, y_offset),
				
				set(mana_bar_right.relative_x, x_offset + display_length + mana_bar_left.img_w ),
				set(mana_bar_right.relative_y, y_offset),
				
				if(display_length > 8, 
					[
						add_object(mana_bar_center),
						add_object(mana_bar_left),
						add_object(mana_bar_right),
						mana_bar_center.set_draw_params( x_offset + mana_bar_left.img_w, y_offset, display_length)
					],
					[
						remove_object(mana_bar_center),
						remove_object(mana_bar_left),
						remove_object(mana_bar_right),
					]
				)
			]
				where x_offset = heart_icon_margin + generic_padding_value
				where y_offset = -2
			 
				where display_length = if(max_hp > 0, lib.math.ceil( hitpoint_bar_length * hitpoint_fraction ), 0)
				where hitpoint_fraction = (currently_displayed_hitpoint_amount / max_hp)
				where currently_displayed_hitpoint_amount = if(abs(step) < 0.01, hp, last_displayed_value+step)
				where step = (hp - last_displayed_value) / bar_tween_speed
				where hp = fold([int]<-map(_bosses, value.hitpoints), a+b)
		]
			where max_hp = recent_max_hitpoints
			where direct_boss_max_hp = fold([int]<-map(_bosses, value.max_hitpoints), a+b)
			where _bosses = me.boss_list
		",
	},
	
	on_create: "[
		constructor,
	]",
	
	on_player_death: "reset_boss_list",
	
	on_process: "[[
		[
			set(last_displayed_value, display_value),
				// cache the hitpoints, because if the boss dies, we can no longer directly access it.
			if(direct_boss_max_hp > 0, set(recent_max_hitpoints, max(recent_max_hitpoints, direct_boss_max_hp))),
		
			if(display_value, 
				draw_bar,
				[set(recent_max_hitpoints, 0), set(boss_list,[])]
			),

		]
	] 
		where display_length = if(max_hp > 0, round(1*display_value/1.0/max_hp), 0)
		where display_value = if(abs(step) < 0.01, hp, last_displayed_value+step)
		where step = (hp - last_displayed_value) / bar_tween_speed
		where hp = fold([int]<-map(_bosses, value.hitpoints), a+b)
	] where max_hp = recent_max_hitpoints
	  where direct_boss_max_hp = fold([int]<-map(_bosses, value.max_hitpoints), a+b)
	  where _bosses = me.boss_list
	  ",


	object_type: [{
			"@base": true,
			serializable: false,
			zorder: "@include data/zorder.cfg:in_front_of_everything",
			zsub_order: 2,
			is_strict: true,
			use_absolute_screen_coordinates: true,
		},
		{
			id: "bar_center",
			properties: {
				_length: { type: "int", default: 10 },
				set_draw_params: "def(int new_x, int new_y, int new_length) -> commands [
										set(relative_x, new_x),
										set(relative_y, new_y),
										set(_length, new_length)
									]"
						

			},
			on_process: "set(draw_area, [0.0, 0.0, lib.math.ceil(_length/2.0), img_h/2.0])",
		
			animation: {
				id:	'normal',
				image: 'gui/progress-bar-center.png',
				rect: [0,0,7,7], 
				no_remove_alpha_borders: true,
			},
		},{
			id: "left_cap",

			animation: {
				id:	'normal',
				image: 'gui/progress-bar-endcaps.png',
				rect: [0,0,7,7],
				no_remove_alpha_borders: true,
			},
		},{
			id: "right_cap",

			animation: {
				id:	'normal',
				image: 'gui/progress-bar-endcaps.png',
				rect: [0,8,7,15], 
				no_remove_alpha_borders: true,
			},
		},
		
		
		{
			id: "angry_heart_icon",

			animation: {
				id:	'normal',
				image: 'gui/hud.png',
				rect: [101,47,126,72], 
				no_remove_alpha_borders: true,
			},
		},	
	],


}