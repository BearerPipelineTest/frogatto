//Show the currently selected ability, such as 'tongue' or 'firebreath'.
{
	id: "ability_display",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	serializable: false,
	
	zorder: "@include data/zorder.cfg:in_front_of_everything",

	properties: {
		player: "level.player",
		super_mode_active: "true",


		
#-------------------------- components --------------------------#
		super_indicator: {
			type: "custom_obj",  
			init: "object('${me.type}.super_indicator',0,0,1)",
		},

		graphic: {
			type: "custom_obj",  
			init: "object('${me.type}.graphic',0,0,1, {zsub_order: -1})",
		},
		
		graphic_post1: {
			type: "custom_obj",  
			init: "object('${me.type}.graphic',0,0,1)",
		},

		graphic_post2: {
			type: "custom_obj",  
			init: "object('${me.type}.graphic',0,0,1)",
		},

		graphic_pre1: {
			type: "custom_obj",  
			init: "object('${me.type}.graphic',0,0,1)",
		},

		graphic_pre2: {
			type: "custom_obj",  
			init: "object('${me.type}.graphic',0,0,1)",
		},

		overlay: {
			type: "custom_obj",  
			init: "object('${me.type}.overlay',0,0,1)",
		},


#-------------------------- core behavior --------------------------#
		graphic_cells: "[custom_obj] ::
							[graphic_pre2, graphic_pre1, graphic, graphic_post1, graphic_post2]",

		set_to_animation: "def( custom_obj target, [int,int,int,int] rect) -> commands
			set(target.animation, {
				image: 'gui/hud4.png',
				duration: -1,
				id: 'normal',
				rect: rect
			},
		)",

		has_just_changed: "bool :: player.last_toggled_ability = player.cycle - 1",  //We're putting this a frame in the past because I'm not sure we can consistently rely on the player object to execute before this object, and if we were ever in a situation where that happened, the flag wouldn't be set by the time we checked this (and the player's cycle would probably be updated even before its processing, so effectively this would get "missed".  Maybe - it being a bug is contingent on that second thing actually being true, but this way there's no bug either way.

		do_carousel_anim: "commands :: 
			map(graphic_cells, 
				[
					//debug(cycle),
					set(value.alpha, 255),
					set(value.mid_x, mid_x  + 90*index),
					;
					animate(value, {
							mid_x: mid_x  + 90*index,
							mid_y: mid_y ,
						},{
							duration: 60,
							name: 'hud_item_carousel',
							replace_existing: true,
							on_complete: anim2
					}) where anim2 = animate(value, {
							alpha: if(index = 2, 255, 0),
							mid_x: mid_x ,
							mid_y: mid_y ,
						},{
							duration: 35,
							name: 'hud_item_carousel',
							replace_existing: true,
							easing: lib.math.ease_in_sine
					})
				]
			)
		",


#-------------------------- constructor/destructor --------------------------#
		constructor: "[
			map(graphic_cells, add_object(value)),
			map(graphic_cells, [
				set(value.mid_x, mid_x),
				set(value.mid_y, mid_y),
			]),
			add_object(overlay),
			add_object(super_indicator),
			set(super_indicator.parent, graphic),
			set(overlay.parent, graphic)
			;
			set(super_indicator.relative_x, 0),
			set(super_indicator.relative_y, 0),
			set(overlay.relative_x, 0),
			set(overlay.relative_y, 0),
			set(me.alpha, 0),
		]"

	},
	
	on_start_level: "constructor", //When we enter a new level, the frogatto object retains the reference to ability_display object. Frogatto takes care of adding this object to the level. However, this object must add any objects it added previously. Since the object is only created once, on_create only ever fires once. Since the first level is not entered when this object is around, on_start_level only fires every time after the first level we enter.

	on_create: "constructor",
	
	//Sync UI state with Frogatto.
	on_process: "
		if(player is obj frogatto_playable,
			[
				map(graphic_cells,
					set_to_animation(value, item_info(index).hud_img_rect )
				),
				
				set(graphic.brightness, 255/if(has_enough_mana or player.current_ability = enum item_tongue, 1, 3)),
				set(si_uniforms.speed, if(has_enough_mana, 0.012, 0.004)),
				set(si_uniforms.show_ants, player.is_in_super_mode),

				if(has_just_changed,
					do_carousel_anim
				),				
			]
				where has_enough_mana = player.current_mana_availability
				where item_info = def(int offset) -> class inventory_item
					(if(not player.is_in_super_mode,
						if(not player.underwater,
							(if(normalized_index = 0, 
								player.item_info(player.current_ability),
								player.item_info( player.nth_item_away_from_current_item_of_category(normalized_index, enum primary_ability) )
							)),
					
							(if(normalized_index = 0, 
								player.item_info(player.current_underwater_ability),
								player.item_info( player.nth_item_away_from_current_item_of_category(normalized_index, enum underwater_ability) )
							)),
						),
						
						(if(normalized_index = 0, 
							player.item_info(player.current_super_ability),
							player.item_info( player.nth_item_away_from_current_item_of_category(normalized_index, enum super_ability) )
						)) 						
					) where normalized_index = offset - 2)

				
		) where si_uniforms = super_indicator.shader.uniform_commands asserting super_indicator.shader
	",
	
	animation: {
		id: "bg", //black bg, goes behind overlay
		image: "gui/hud3.png",
		rect: [80,0,127,47],
	},
	
	object_type: [
		{
			id: "graphic",
			is_strict: true,
			use_absolute_screen_coordinates: true,
			serializable: false,
			zorder: "@include data/zorder.cfg:in_front_of_everything",
			zsub_order: -2,
			
			animation: [{
				"@base": true,
				image: "gui/hud4.png",
			}],
		},


		{
			id: "overlay",
			is_strict: true,
			use_absolute_screen_coordinates: true,
			serializable: false,
			zorder: "@include data/zorder.cfg:in_front_of_everything",
			zsub_order: 0,
			
			animation: [{
				id: "normal",
				image: "gui/hud3.png",
				rect: [128,0,183,55],
			}],
		},

		
		{
			id: "super_indicator",
			is_strict: true,
			use_absolute_screen_coordinates: true,
			serializable: false,
			zorder: "@include data/zorder.cfg:in_front_of_everything",
			zsub_order: 1,
			
			animation: {
				id: "effect_mask", //'marching ants' effect overlay to indicate super ability
				image: "gui/hud3.png",
				rect: [32,67,79,114],
			},
			
			shader: {
				name: "ant_highlight",
				//This shader draws a magic colour (25,152,77) as a sort of marching ants effect.
				
				draw: "set(uniform_commands.u_cycle, parent.cycle)",
				
				vertex: "
					#version 120
					uniform mat4 u_anura_mvp_matrix;
					attribute vec4 a_anura_vertex;
					attribute vec2 a_anura_texcoord;
					varying vec2 v_texcoord;
					void main() {
						gl_Position = u_anura_mvp_matrix * a_anura_vertex;
						v_texcoord = a_anura_texcoord;
					}
				",

				fragment: "
					#version 120
					//image data
					uniform sampler2D u_tex_map;
					varying vec2 v_texcoord;
					uniform vec4 u_anura_sprite_area;
					uniform float u_cycle;
					
					//config options
					uniform bool show_ants = true;
					uniform float line_size = 0.29; //Tweak this so there are as many lines as you need at a time...
					uniform float line_offset = 0.015; //Then tweak this so they line up at the corners.
					uniform float speed = 0.010;
					
					//constants
					const vec4 mask_colour = vec4(25/255.0,152/255.0,77/255.0,255/255.0);
					
					void main() {
						vec4 pixel_colour = texture2D(u_tex_map, v_texcoord); //[r,g,b,a], 0..1
						vec2 sprite_center = vec2((u_anura_sprite_area[0] + u_anura_sprite_area[2])/2.0, (u_anura_sprite_area[1] + u_anura_sprite_area[3])/2.0);
						
						//Pass through colours which aren't keyed to allow embedding of ant effect in an image.
						if(pixel_colour != mask_colour) {
							gl_FragColor = pixel_colour;
						} else if(show_ants) {
							float dir = v_texcoord[0] - sprite_center[0] < v_texcoord[1] - sprite_center[1] ? 1 : -1; //Reverse if we're below the diagonal, so an ant comes full circle.
							float line_intensity = 1 - mod((v_texcoord[0]*dir+v_texcoord[1]*dir) + u_cycle*speed + line_offset*dir, line_size)/line_size; //Gradient, repeating.
							gl_FragColor = vec4(1*line_intensity, 1*line_intensity, 1*line_intensity, 1);
						} else {
							discard;
						}
					}
				",
			},
		},
	],
}