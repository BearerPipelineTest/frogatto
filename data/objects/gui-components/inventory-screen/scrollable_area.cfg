{
	id: "scrollable_area",
	is_strict: true,
	hidden_in_game: false,
	zorder: 500,
	always_active: true,
	use_absolute_screen_coordinates: true,

	types: {
		ChildObj: "{ obj: custom_obj, rel_pos: {x: int, y: int} }",
	},

	properties: {
		viewport_width: { type: "int" },
		viewport_height: { type: "int" },
		
		interior_dimensions: { type: "{ w: int, h: int }", default: {w:100, h:100} },


		scroll_offset: { type: "{ x: int, y: int }", default: {x:0, y:0} },
		add_scroll_offset: "def({x: int, y: int} delta) -> commands
			set_scroll_offset({
				x: lib.math.round( lib.math.constrain(0, scroll_offset.x + delta.x, interior_dimensions.w)),
				y: lib.math.round( lib.math.constrain(0, scroll_offset.y + delta.y, interior_dimensions.h)),
			})
		",

		scroll_offset_fraction: "decimal :: scroll_offset.y / decimal(interior_dimensions.h)",


		children: { type: "[ChildObj]", default: [] },

		_scrollbar: {
			type: "obj scroll_bar_vertical",
			init: "object('scroll_bar_vertical',x,y,
				{
					_scroll_area: me,
					zorder: me.zorder+1,
					parent: me,	
			} )" 
		},
		
		set_scroll_offset_constrained: "def({x: int, y: int} new_offset) -> commands
			set_scroll_offset({
				x: lib.math.round( lib.math.constrain(0, new_offset.x, interior_dimensions.w)),
				y: lib.math.round( lib.math.constrain(0, new_offset.y, interior_dimensions.h)),
			})
		",

		
		set_scroll_offset: "def({x: int, y: int} new_offset) -> commands [
			map(children, [
				set(value.obj.relative_x, value.rel_pos.x + new_offset.x),
				set(value.obj.relative_y, (value.rel_pos.y) + (new_offset.y)),
			]),
			set(scroll_offset, {
				x: new_offset.x,
				y: new_offset.y,
			}),

			_scrollbar.render,
			map(children,
				if(	value.obj.x < me.x or
					value.obj.x + value.obj.img_w >= x + viewport_width or
					value.obj.y < me.y or
					value.obj.y + value.obj.img_h >= y + viewport_height,
					[
						//set(value.obj.clip_area_absolute, true),
						set(value.obj.clip_area, dump([clip_x1, clip_y1, clip_x2, clip_y2])),
					]
						where clip_x1 = if(new_x > me.x,
											0,
											me.x - new_x
										)
						where clip_x2 = if(new_x2 < (me.x + viewport_width),
											value.obj.img_w,
											value.obj.img_w + (viewport_width - mid_correction) - (new_x2)
										)
						where clip_y1 = if(new_y > me.y,
											0,
											me.y - new_y
										)
						where clip_y2 = if(new_y2 < (viewport_height - mid_correction),
											value.obj.img_h,
											value.obj.img_h + (viewport_height - mid_correction) - (new_y2)
										)
					
						where new_x = me.mid_x + (value.rel_pos.x - value.obj.img_w/2) + new_offset.x
						where new_x2 = (value.rel_pos.x + value.obj.img_w/2) + new_offset.x
						
						where new_y = me.mid_y + (value.rel_pos.y - value.obj.img_h/2) + new_offset.y
						where new_y2 = (value.rel_pos.y + value.obj.img_h/2) + (new_offset.y)
						
						where mid_correction = (me.mid_y - me.y) //it's the same in xy for both directions of our gear icon
					,
					[
						set(value.obj.clip_area, null),
					]
				)
			),
		]",
	
		border: { type: "obj scrollable_area.border",  init: "object('scrollable_area.border', x, y, {zorder: me.zorder+5, parent: me})" },

	},

	on_create: "[
		add_object(_scrollbar),
		set(_scrollbar.relative_x, dump(viewport_width - 2)),
		set(_scrollbar.relative_y, viewport_height/2),
		
		set(border.rect_width, viewport_width),
		set(border.rect_height, viewport_height),
		set(border.relative_x, 0-img_w/2 + viewport_width / 2),
		set(border.relative_y, 0-img_h/2 + viewport_height / 2),
		add_object(border),

		
		
		map(children, add_object(value.obj)),
		map(children, set(value.obj.parent, me)),
		;
		set_scroll_offset({x:0, y:0}),
	]",

	on_process: "[
//		set_scroll_offset({x:0 - cycle%viewport_width, y:0 - cycle%viewport_height}),
	]",

	on_being_removed: "[
		map(children, remove_object(value.obj)),
		remove_object(_scrollbar),
	]",


	object_type: [{
		id: "border",
		use_absolute_screen_coordinates: true,

		properties: {
			rect_width: { type: "int" },
			rect_height: { type: "int" },
		
			render: "commands ::
				[
					set(animation, lib.gui.render_frame(c, rect_width, rect_height,
						[
							c.set_source_color(lib.gui.color_normalize([255,255,255])),
						
							c.rectangle(0, 0, 1, rect_height),
							c.fill(),

							c.rectangle(0, rect_height - 1, rect_width, 1),
							c.fill(),

							c.rectangle( rect_width - 1, 0, 1, rect_height),
							c.fill(),

							c.rectangle(0, 0,  rect_width, 1),
							c.fill(),

						])
					) where c = canvas(),
				]
			",
		},
		
		on_create: "me.render",
	}]


}
