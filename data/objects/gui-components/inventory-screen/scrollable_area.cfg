{
	id: "scrollable_area",
	is_strict: true,
	hidden_in_game: true,
	zorder: 500,
	always_active: true,
	use_absolute_screen_coordinates: true,

	types: {
		ChildObj: "{ obj: custom_obj, rel_pos: {x: int, y: int} }",
	},

	properties: {
		viewport_width: { type: "int" },
		viewport_height: { type: "int" },
		
		interior_dimensions: { type: "{ w: int, h: int }", default: {w:100, h:100} },


		scroll_offset: { type: "{ x: int, y: int }", default: {x:0, y:0} },
		add_scroll_offset: "def({x: int, y: int} delta) -> commands
			set_scroll_offset({
				x: lib.math.round( lib.math.constrain(0, scroll_offset.x + delta.x, interior_dimensions.w)),
				y: lib.math.round( lib.math.constrain(0, scroll_offset.y + delta.y, interior_dimensions.h)),
			})
		",

		scroll_offset_fraction: "decimal :: scroll_offset.y / decimal(interior_dimensions.h)",


		children: { type: "[ChildObj]", default: [] },

		_scrollbar: {
			type: "obj scroll_bar_vertical",
			init: "object('scroll_bar_vertical',x,y,
				{
					_scroll_area: me,
					zorder: me.zorder+2,
					parent: me,	
			} )" 
		},
		
		set_scroll_offset_constrained: "def({x: int, y: int} new_offset) -> commands
			set_scroll_offset({
				x: lib.math.round( lib.math.constrain(0, new_offset.x, interior_dimensions.w)),
				y: lib.math.round( lib.math.constrain(0, new_offset.y, interior_dimensions.h)),
			})
		",

		
		set_scroll_offset: "def({x: int, y: int} new_offset) -> commands [
			map(children, [
				set(value.obj.relative_x, value.rel_pos.x + new_offset.x),
				set(value.obj.relative_y, (value.rel_pos.y) - (new_offset.y)),
			]),
			set(scroll_offset, {
				x: new_offset.x,
				y: new_offset.y,
			}),

			_scrollbar.render,
			map(children,
				if(/*	value.obj.x < me.mid_x or
					value.obj.x + obj_img_w >= x + viewport_width or
					value.obj.y < me.mid_y or
					value.obj.y + obj_img_h >= y + viewport_height*/ true,
					[
						//set(value.obj.clip_area_absolute, true),
						set(value.obj.clip_area, [clip_x1, clip_y1, clip_x2, clip_y2]),
					]
						where clip_x1 = max(me.mid_x - new_x, 0)
						where clip_x2 = obj_img_w - max(new_x2 - viewport_x2,0)

						where clip_y1 = max(me.mid_y - new_y, 0)
						where clip_y2 = obj_img_h - max(new_y2 - viewport_y2,0)
											

						where viewport_x2 = (me.mid_x + viewport_width)
						where viewport_y2 = (me.mid_y + viewport_height)
					

							/*
								These are in 'regular' coords, not 'inside the viewport' coords
								Note for the y1/x1 values - we're trying to extract the value of y from the midpoint, so we subtract half the gear sprite, not half the text box.  (hence `-value.obj.img_h/2`, rather than `-obj_img_h`)
							*/
					
						where new_x2 = new_x + obj_img_w
						where new_x = me.mid_x + (value.rel_pos.x - value.obj.img_w/2) + new_offset.x
						
						where new_y2 = new_y + obj_img_h
						where new_y = me.mid_y + (value.rel_pos.y - value.obj.img_h/2) - new_offset.y

						
						where obj_img_w = if(text_dim, (int <- text_dim[2]), value.obj.img_w)
						where obj_img_h = if(text_dim, (int <- text_dim[3]) - 0, value.obj.img_h)
						where text_dim = if(value.obj is obj text_controller and value.obj.text_info, value.obj.text_info.dimensions)
											
					,
					[
						set(value.obj.clip_area, null),
					]
				)
			),
		]",
	
		border: { type: "obj scrollable_area.border",  init: "object('scrollable_area.border', x, y, {zorder: me.zorder+1, parent: me})" },

	},

	on_create: "[
		add_object(_scrollbar),
		set(_scrollbar.relative_x, viewport_width + 5),
		set(_scrollbar.relative_y, viewport_height/2),
		
		set(border.rect_width, viewport_width),
		set(border.rect_height, viewport_height),
		set(border.relative_x, 0 + viewport_width / 2),
		set(border.relative_y, 0 + viewport_height / 2),
		//dummying this out because it's mostly for debugging:  add_object(border),

		
		
		map(children, add_object(value.obj)),
		map(children, set(value.obj.parent, me)),
		;
		map(children, if(value is obj text_controller, value.do_setup))
		;
		schedule(1, set_scroll_offset({x:0, y:0})),
	]",

	on_process: "[
//		set_scroll_offset({x:0 - cycle%viewport_width, y:0 - cycle%viewport_height}),
	]",

	on_being_removed: "[
		map(children, remove_object(value.obj)),
		remove_object(_scrollbar),
		remove_object(border),
	]",


	object_type: [{
		id: "border",
		use_absolute_screen_coordinates: true,

		properties: {
			rect_width: { type: "int" },
			rect_height: { type: "int" },
		
			render: "commands ::
				[
					set(animation, lib.gui.render_frame(c, rect_width, rect_height,
						[
							c.set_source_color(lib.gui.color_normalize([150,126,93])),
						
							c.rectangle(0, 0, 2, rect_height),
							c.fill(),

							c.rectangle(0, rect_height - 2, rect_width, 2),
							c.fill(),

							c.rectangle( rect_width - 2, 0, 2, rect_height),
							c.fill(),

							c.rectangle(0, 0,  rect_width, 2),
							c.fill(),

						])
					) where c = canvas(),
				]
			",
		},
		
		on_create: "me.render",
	}]


}
