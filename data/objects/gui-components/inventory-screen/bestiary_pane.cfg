{
id: "bestiary_pane",
prototype: ["inventory_screen_pane"],

properties: {
	initialize_parts: "commands :: [
//		add_object(icon1);
//		add_object(icon2);
//		add_object(icon3);
//		add_object(icon4);

		add_object(scroller),


		set(scroller.relative_x, -200),
		set(scroller.relative_y, -200),

	]",

	scroller: { type: "obj scrollable_area", init: "object('scrollable_area',
		{
			x: 50,
			y: 50,
			z: 1000,
			viewport_width: 200,
			viewport_height: 290,
			interior_dimensions: {w: 200, h: 500},
			children: [
				{rel_pos: {x: 50, y: 0  },  obj: icon1},
//				{rel_pos: {x: 50, y: 90 },  obj: icon2},
//				{rel_pos: {x: 50, y: 180},  obj: icon3},
//				{rel_pos: {x: 50, y: 270},  obj: icon4}
			],
			parent: me
		})"
	},

	creature_list: "[obj hittable] :: filter(
						map(keys(frogatto.enemies_seen), obj hittable <- object(value)), 
						value.is_enemy_character or value is obj throwable_projectile
					)",

	icon1: { type: "obj bestiary_pane.skull_icon", init: "object('bestiary_pane.skull_icon')"	},
	icon2: { type: "obj bestiary_pane.skull_icon", init: "object('bestiary_pane.skull_icon')"	},
	icon3: { type: "obj bestiary_pane.skull_icon", init: "object('bestiary_pane.skull_icon')"	},
	icon4: { type: "obj bestiary_pane.skull_icon", init: "object('bestiary_pane.skull_icon')"	},

#-------------------------- input handling --------------------------#

		handle_dispatched_input: "def(InputValue input) -> commands [
			switch(input,
				enum arrow_left,	null,
				enum arrow_right,	null,
				enum arrow_up,		scroller.add_scroll_offset({x:0, y: -10}),
				enum arrow_down,	scroller.add_scroll_offset({x:0, y:  10}),
		
				enum trigger_1, 	null
		)]",

},



animation: {
	id: "normal",
	image: 'gui/pause-menu/panel-background.png',
	x:0, y:0, w:256, h:256,
},



object_type: [
	{
		always_active: true,
		use_absolute_screen_coordinates: true,
		zorder: 5000,
		id: "skull_icon",
		animation: {
			id: "normal",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [0,147,41,188], 
		},
		
		//on_process: "debug(x,y)",		
	},

],
}
