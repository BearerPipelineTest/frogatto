{
id: "bestiary_pane",
prototype: ["inventory_screen_pane"],

properties: {
	initialize_parts: "commands :: [
		set(scroller.children, visual_entry_list),
		;
		add_object(scroller),


		set(scroller.relative_x, -200),
		set(scroller.relative_y, -200),
		//debug(map(visual_entry_list, value.obj.type)),
	]",

	scroller: { type: "obj scrollable_area", init: "object('scrollable_area',
		{
			x: 50,
			y: 50,
			z: 1000,
			viewport_width: 400,
			viewport_height: 400,
			interior_dimensions: {w: 400, h: 500},
			children: [
//				{rel_pos: {x: 50, y: 0  },  obj: icon1},
//				{rel_pos: {x: 50, y: 90 },  obj: icon2},
//				{rel_pos: {x: 50, y: 180},  obj: icon3},
//				{rel_pos: {x: 50, y: 270},  obj: icon4}
			],
			parent: me
		})"
	},

	icon1: { type: "obj bestiary_pane.skull_icon", init: "object('bestiary_pane.skull_icon')"	},
	icon2: { type: "obj bestiary_pane.skull_icon", init: "object('bestiary_pane.skull_icon')"	},
	icon3: { type: "obj bestiary_pane.skull_icon", init: "object('bestiary_pane.skull_icon')"	},
	icon4: { type: "obj bestiary_pane.skull_icon", init: "object('bestiary_pane.skull_icon')"	},

#-------------------------- items --------------------------#
	creature_list: "[obj hittable] ::
			filter(
				map(
					keys(frogatto.enemies_seen),
					obj hittable <- object(value)
				),
				value.is_enemy_character or value is obj throwable_projectile
			)",

	visual_entry_list: "map(creature_list,
							{
								rel_pos: {x: 50, y: index * 150 },
								obj: object('bestiary_pane.bestiary_item', x, y, {displayed_obj: value, pane: me})
							}
						)",
						


#-------------------------- input handling --------------------------#

		handle_dispatched_input: "def(InputValue input) -> commands [
			switch(input,
				enum arrow_left,	null,
				enum arrow_right,	null,
				enum arrow_up,		scroller.add_scroll_offset({x:0, y: -10}),
				enum arrow_down,	scroller.add_scroll_offset({x:0, y:  10}),
		
				enum trigger_1, 	null
		)]",

},



animation: {
	id: "normal",
	image: 'gui/pause-menu/panel-background.png',
	x:0, y:0, w:256, h:256,
},



object_type: [
	{
		always_active: true,
		use_absolute_screen_coordinates: true,
		zorder: 5000,
		id: "skull_icon",
		animation: {
			id: "normal",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [0,147,41,188], 
		},
		
		//on_process: "debug(x,y)",		
	},
	{
		always_active: true,
		use_absolute_screen_coordinates: true,
		zorder: 5000,
		id: "bestiary_item",
		properties: {
			displayed_obj: { type: "obj hittable", dynamic_initialization: true },
			pane: { type: "obj inventory_screen_pane", dynamic_initialization: true },
			wrapped: "pane.wrapped",
			frogatto: "pane.frogatto",
			displayed_obj_animation: "{
								id: string,
								image: string,
								duration: int,
								frames: int,
								frames_per_row: int,
								pad: int,
								x: int,
								y: int,
								w: int,
								h: int,
							} :: {
								id: doa.id,
								image: doa.image,
								duration: doa.duration,
								frames: lib.math.round( doa.total_animation_time / doa.duration ),
								frames_per_row: if(doa.frames_per_row = -1, lib.math.round( doa.duration / doa.total_animation_time ), doa.frames_per_row),
								pad: doa.pad,
								x: doa.x,
								y: doa.y,
								w: doa.x2 - doa.x,
								h: doa.y2 - doa.y
							}
								where doa = get_object_type_animation(displayed_obj.type, desired_anim)
								where desired_anim =	switch(true,
															'walk' in displayed_obj.available_animations, 'walk',
															'fly' in displayed_obj.available_animations, 'fly',
														displayed_obj.animation)
						",
			
							
							
			spawn_text_controller: "commands :: [
								add_object(bestiary_note_display),
							] where 
								bestiary_note_display = object('text_controller', 0,0, {
									relative_x: 100,
									relative_y: 0,
									use_absolute_screen_coordinates: true,
									zorder: int<-lib.json.get_document_map('data/zorder.cfg').overlaid_gui_dialog_gui_element,
									font: 'door_label_dark',
									txt: 
											 displayed_obj.title+' ('+displayed_obj.my_taxonomy_as_string+')\n \n'
											+ wrapped(displayed_obj.description, 41)+'\n \n'
											+ if(frogatto.enemies_tasted[displayed_obj.frogourmet_tag] and displayed_obj.taste, wrapped(~Taste: ~+displayed_obj.taste, 41) + '\n', ''),
									parent: me,
								})",
		},
		on_create: "[
						//debug(displayed_obj_animation),
						set(me.animation, displayed_obj_animation),
						//debug(displayed_obj_animation);
						//debug(me.animation_obj)
						;
						spawn_text_controller
					]",
		on_end_anim: "set(animation, displayed_obj_animation)",		
	}
],
}
