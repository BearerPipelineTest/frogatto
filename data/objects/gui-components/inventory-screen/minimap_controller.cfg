{
id: "minimap_controller",
is_strict: true,
zorder: "@include data/zorder.cfg:overlaid_gui_dialog_gui_element",
use_absolute_screen_coordinates: true,
always_active: true,
serializable: false,
solid_dimensions: [],

editor_info: {
	category: "controllers",
},

properties: {
	level_scale: "decimal <- 1.0 / (240.0 / (level.dimensions[2] - level.dimensions[0])) //A good default is 25. Currently sets the scale to about half of the screen width.",
	
	icons: { type: "[custom_obj]", default: [] },

	_world_to_canvas_x: "def (int x) -> decimal (x - level.dimensions[0] - level_scale)/level_scale",
	_world_to_canvas_y: "def (int y) -> decimal (y - level.dimensions[1] - level_scale)/level_scale",
	_canvas_range: "def (decimal min, decimal max) -> [int]
		range(lib.math.floor(min), lib.math.ceil(max) + 1)",
	_secret_areas: "def () -> [[int, int, int, int]] [
	  [int, int, int, int] <- [passage._x_bound, passage._x2_bound, passage._y_bound, passage._y2_bound]
	  | passage <- level.chars,
	  passage is obj secret_passage_controller | obj nonsecret_passage_controller
	]",
},

on_create: "[
	[fire_event(evt) | evt <- [
		'set_background', 
		'align_right', //after set_background, because that determines our size
		'add_icons',
	]], 
	//set(alpha, 128),
]",

on_die: "map(icons, remove_object(value))",

on_set_background: "[
	(
	set(me.animation, {
		id: 'fbo', 
		image: 'fbo', 
		pivot_origin: [0,0],
		blend: ['one_minus_dst_color','one_minus_src_alpha'], //white is blue
		//blend: ['src_color','dst_color'], //black/transparent is saturated, white is solid
		//blend: ['src_alpha','dst_color'], //black/transparent/white is saturated
		//blend: ['src_color','one_minus_src_alpha'], //
		
		/*
		SRC:
		zero
		one
		src_color
		one_minus_src_color
		dst_color
		one_minus_dst_color
		src_alpha
		one_minus_src_alpha
		dst_alpha
		one_minus_dst_alpha
		src_alpha_saturate
		constant_color
		one_minus_constant_color
		constant_alpha
		one_minus_constant_alpha

		DST:
		zero
		one
		src_color
		one_minus_src_color
		dst_color
		one_minus_dst_color
		src_alpha
		one_minus_src_alpha
		dst_alpha
		one_minus_dst_alpha
		src_alpha_saturate
		constant_color
		one_minus_constant_color
		constant_alpha
		one_minus_constant_alpha
		*/
		
		fbo: c.render(lWidth,lHeight, ([
			[ //Draw white dots.
				c.set_source_rgba(0,0,0,
					if(solid(
						level, 
						round(level.dimensions[0] + px*scale + scale), 
						round(level.dimensions[1] + py*scale + scale)
					), (40d2)/(40*1.47), 0.0) //subtle noise or empty
				), 
				c.rectangle(px,py,1,1), 
				c.fill(),
			] | px <- range(lWidth),
			    py <- range(lHeight)
		] + [
			[
				[
					c.set_source_rgba(0,0,0,
						(40d2)/(40*1.47) //subtle noise
					),
					c.rectangle(px,py,1,1),
					c.fill(),
				] | px <- _canvas_range(_world_to_canvas_x(area[0]), _world_to_canvas_x(area[1])),
				    py <- _canvas_range(_world_to_canvas_y(area[2]), _world_to_canvas_y(area[3]))
			] | area <- _secret_areas()
		] + [
			c.set_source_rgba(1,0,0,1),
		] /*+ [[ //Draw hittable objects in red.
			c.rectangle(
				(obj.mid_x - level.dimensions[0])/scale, 
				(obj.mid_y - level.dimensions[1])/scale, 
				2, 2),
			c.fill(),
			] | obj <- filter(level.chars, value is obj hittable)
		]*/ + [
			//Secret areas seem to be applied after the map renders, so they're not an issue?
		])) where c = canvas(),
		         
		x:0, y:0, w:lWidth, h:lHeight,
		scale: 2,
	})
	where lWidth = round((level.dimensions[2] - level.dimensions[0]) / scale),
	      lHeight = round((level.dimensions[3] - level.dimensions[1]) / scale),
	where scale = level_scale,
	),
]",

on_align_right: "set(xy, [level.camera_position[2]-img_w, 0])",

on_add_icons: "[
	[add_object(icon) | icon <- icon_objs],
	set(icons, icon_objs),
	] where icon_objs = (fold(map(['icon_static'], [
		object('${me.type}.${value}', 0, 0, 1, {
			tracking: trackable_obj, 
			minimap: me,
			animation: trackable_obj.type,
		})
	| trackable_obj <- filter(level.chars, value.type in icon.available_animations) 
		where icon = object('${me.type}.${value}')
	]), a+b))
",

on_type_updated: "[
	fire_event(find_or_die(level.chars, value is obj inventory_screen_controller_2), 'type_updated'),
]",

object_type: [{
	always_active: true,
	serializable: false,
	solid_dimensions: [],
	use_absolute_screen_coordinates: true,
	is_strict: true,
	
	properties: {
		tracking: {type: "custom_obj"},
		minimap: {type: "obj minimap_controller"},
	},
	
	id: "icon_static", //A stationary icon. Will NOT remove itself if object dies. Fastest.
	zorder: "@include data/zorder.cfg:overlaid_gui_dialog_gui_element + 23",
	
	on_create: "[
		set(parent, minimap),
		// set(pivot, 'origin'), //can't be set in spawn OR just plain broken
		set(relative_x, pos[0]),
		set(relative_y, pos[1]),
	] where pos = [int] <- zip([int,int]<-minimap.img_wh, //This compensates for 'pivot' not working.
				zip(level.dimensions[0:2], tracking.mid_xy, //Calculate the position of the icon from the upper-left corner.
					round((b-a)/minimap.level_scale*2)), 
				b-a/2)",
		
	animation: "@eval [{ //Add all the doors found in the game via regex.
		id: doors,
		image: 'props/icons-minimap.png',
		x:50, y:40, w:5, h:10,
		frames: 1,
	} | doors <- [
		'cave_side_doorway_interior',
		'close_door',
		'door',
		'door_label',
		'doorway_open',
		'dungeon_interior_door',
		'dungeon_save_door',
		'dungeon_side_doorway',
		'forest_cave_side_doorway',
		'forest_house_exterior_door',
		'forest_house_exterior_door2',
		'grey_rock_cave_doorway_dark',
		'grey_rock_cave_doorway_lit',
		'open_door',
		'seaside_cave_side_doorway',
		'seaside_house_2_upper_door',
		'seaside_house_exterior_door',
		'seaside_house_exterior_door_house_1',
		'seaside_house_exterior_door_large',
		'seaside_house_interior_door',
		'seaside_house_interior_door_large',
		'seaside_house_interior_save_door',
		'seaside_interior_side_doorway',
		'trap_door',
		'wood_door_titlescreen',
		'wooden_door',
	]] + [{
		id: 'match_lock',
		image: 'props/icons-minimap.png',
		x:59, y:39, w:9, h:10,
		frames: 1,
	}] + /*1*/ [{
		image: 'props/icons-minimap.png',
		y:13, w:7, h:9,
		frames: 1,
	} + f | f <- [
		{ id: 'padlock', x:8, }, //The padlock animation will get reassigned on create to the proper colour.
		{ id: 'lock gold', x:8, },
		{ id: 'lock silver', x:18, },
		{ id: 'lock green', x:28, },
		{ id: 'lock red', x:38, },
		{ id: 'lock purple', x:48, },
		{ id: 'lock blue', x:58, },
		{ id: 'lock cyan', x:68, },
	]] + /*2*/ [{
			image: 'props/icons-minimap.png',
			y:23, w:7, h:9,
			frames: 1,
		} + f | f <- [
		{ id: 'padlock_key', x:8, }, //The padlock animation will get reassigned on create to the propor colour.
		{ id: 'key gold', x:8, },
		{ id: 'key silver', x:18, },
		{ id: 'key green', x:28, },
		{ id: 'key red', x:38, },
		{ id: 'key purple', x:48, },
		{ id: 'key blue', x:58, },
		{ id: 'key cyan', x:68, },
		{
			id: 'frogatto_playable',
			x:9, y:40, w:9, h:10,
			frames: 2,
			pad: 1,
		},
	]]",
}],

}