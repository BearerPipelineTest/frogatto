{
	id: "scroll_bar_vertical",
	is_strict: true,
	use_absolute_screen_coordinates: true,

	properties: {
		_scroll_area: { type: "obj scrollable_area" },

		scrollbar_width: "8",
		scrollbar_height: "_scroll_area.viewport_height",
		scrollbar_color: { type: "Color", default: [125,58,37] },
		
		handle_height: "int :: lib.math.round(min(scrollbar_height, scrollbar_height * (_scroll_area.viewport_height / decimal(_scroll_area.interior_dimensions.h))))",



		handle: { type: "obj scroll_bar_vertical.handle", init: "object('scroll_bar_vertical.handle', x, y, {_scrollbar: me, zorder: me.zorder+1, parent: me})" },

		render: "commands ::
			[
				set(animation, lib.gui.render_frame(c, scrollbar_width, scrollbar_height,
					[
						c.rectangle(0,0, scrollbar_width, scrollbar_height),
						c.set_source_color(lib.gui.color_normalize(scrollbar_color)),
						c.fill(),
					])
				) where c = canvas(),
				set(handle.relative_x, 0),
				set(handle.relative_y, 
					(room_to_move * _scroll_area.scroll_offset_fraction) - room_to_move/2
				) where room_to_move = (scrollbar_height - handle_height),
			]
		",


		adjust_position: "def(int y_offset) -> commands [
			_scroll_area.add_scroll_offset({x: 0, y: y_offset})
		]",
		set_position: "def(int y_offset) -> commands [
			_scroll_area.set_scroll_offset_constrained({x: _scroll_area.scroll_offset.x, y: y_offset})
		]",
	},

	events: {
		mouse_wheel: "adjust_position( -step_size * arg.yscroll) where step_size = 20",
		create: "
			add_object(handle)
			;
			render
		",

		click: "swallow_mouse_event();
			if(mouse_y < handle.y,
			   adjust_position(-handle_height),
			   mouse_y > handle.y2,
			   adjust_position(handle_height)
			)
			where mouse_y = lib.gui.mouse_pos(level)[1]
		",

		being_removed: "remove_object(handle)",
	},

	object_type: [{
		id: "handle",
		use_absolute_screen_coordinates: true,
		mouse_drag_threshold: 2,
		properties: {
			_scrollbar: { type: "obj scroll_bar_vertical" },
			handle_width: "int :: _scrollbar.scrollbar_width",
			handle_height: "int :: _scrollbar.handle_height",

			render: "def() ->commands
				set(animation, lib.gui.render_frame(c, handle_width, handle_height,
				[
					c.rectangle(0, 0, handle_width, handle_height),
					c.set_source_color(lib.gui.color_normalize(handle_color)),
					c.fill(),
				]))
				where c = canvas()
			",

			handle_color: { type: "Color", default: [207,117,35] },

			_drag_pos: { type: "null|int" },
			_start_drag: { type: "null|decimal" },
		},

		events: {
			create: "render(); set(alpha, 128)",
			mouse_enter: "animate(me, { alpha: 255 }, { duration: 10 })",
			mouse_leave: "animate(me, { alpha: 128 }, { duration: 10 })",

			drag_start: "[
				swallow_mouse_event(),
				set(_drag_pos, mouse_y),
				set(_start_drag, _scrollbar._scroll_area.scroll_offset.y),
			]
				where mouse_y = lib.gui.mouse_pos(level)[1]",

			drag: "if(_drag_pos != null and _start_drag != null, [
				swallow_mouse_event(),
				_scrollbar.set_position( int(_start_drag + (mouse_y - _drag_pos)*speed_mult)),
			])
				where mouse_y = lib.gui.mouse_pos(level)[1]
				where speed_mult = 4.0",
			
			click: "swallow_mouse_event()",
		},
	}]
}
