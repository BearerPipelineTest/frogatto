{
id: 'language_menu_controller',
is_strict: true,
zorder: 1100000,
use_absolute_screen_coordinates: true,
properties: {
	level_width: 'int :: level.dimensions[2]',
	level_height: 'int :: level.dimensions[3]',
	_text_area: { type: 'null | obj text_area', },
	_buttons: { type: '[obj button_controller]', default: [], },
	__languages: {  // XXX   Unhwardwire this.
		type: '{ string -> string }',
		default: {
			de: 'Deutsch',
			en: 'English',
			es: 'Español',
			fr: 'Français',
			gd: 'Gàidhlig',
			it: 'Italiano',
			pt_BR: 'Português (Brasil)',
			zh_CN: '简体中文 (zh_CN)',
		},
	},  // XXX   Unhardwire this.
	languages: "def
		() -> { string -> string }
		__languages  // XXX   Unhardwire this.
	",
	as_list: "def
		({ string -> string } dictionary) -> [{ string -> string }]
		map(dictionary, {key: value})
	",
	text_width: { type: 'int', init: 'lib.gui.py(260)' },
	render: "def () -> commands [
// 		debug(['language_menu_controller#render()']),
// 		debug(['w', w, 'h', h]),
	]",  //   render
	show_dialog: "def () -> commands [
		execute(me, [
			// XXX
			lib.sound.play_sound(me, 'interface/enter-escape-menu'),

			[remove_object(c) | c <- spawned_children],

			spawn('text_area', 0, 0, {
				mid_x: lib.gui.screen_width / 2,
				mid_y: lib.gui.screen_height / 2,
				use_absolute_screen_coordinates: true,
				bg_color: [0.3, 0.3, 0.3, 1.0],
				bg_border_color: [0.40, 0.42, 0.45, 1.0],
				border: lib.gui.py(20),
				border_sides: lib.gui.py(50),
				border_bot: size(languages())
					* lib.gui.py(60)
						+ sum(map(languages(), 0))
						+ lib.gui.py(40),
				_text: q(<font size='12'>Language change will take effect in next level.</font>),
				text_width: text_width,
				zorder: zorder,
			}, [
				set(_text_area, child),
			]);

			if(_text_area != null, [
				map(languages() + {(back_button_key): 'Back'},
					spawn('button_controller', {
						mid_x: lib.gui.screen_width / 2,
						y: lib.gui.screen_height / 2
							+ lib.gui.py(02)
							- size(languages()) * lib.gui.py(48) / 2
							- sum(map(languages(), 0)) / 2
							+ index * lib.gui.py(48)
							+  sum(map(as_list(languages())[:index + 1], 0)),
						button_width: lib.gui.py(212),
						zorder: zorder + 10,
						text: value,
						on_click: (def()->commands [
							remove_object(me);
							if(key != back_button_key,
								set_lang(key))
						]),
						_font_size: lib.gui.py(16),
						color_scheme: {
							normal: [255, 192, 0],
							depressed: [255, 255, 255],
							focus: [192, 255, 0],
							text_normal: [116, 122, 74],
							text_depressed: [0, 0, 0],
							text_focus: [0, 0, 255],
						},
						trap_escape: key = back_button_key,
					}, [
						add(_buttons, [child]),
					])
				)  //   map(languages(), ...)
				where back_button_key = 'zzz_back'
			])  //   if(_text_area != null, ...)
		]),  //   execute(me, [...])
	]",  //   show_dialog
	set_lang: "def
		(string requested_lang) -> commands
	[
		debug(['language_menu_controller#set_lang', requested_lang]),
		if(status != 0,
			debug(['WARNING.......']))  // XXX Decorate this.
		where status = set_language(requested_lang)
	]",  //   set_lang
},  //   properties
events: {
	create: '[
		render();
		show_dialog(),
	]',
	being_removed: "[
		debug(['language_menu_controller#being_removed']),
		map(_buttons, remove_object(value)),
		remove_object(_text_area),
	]",
},  //   events
}  //   language_menu_controller
