{
id: 'controls_menu_controller',
is_strict: true,
zorder: 1100000,
hidden_in_game: true,
use_absolute_screen_coordinates: true,
properties: {
	level_width: 'int :: level.dimensions[2]',
	level_height: 'int :: level.dimensions[3]',
	_text_area: { type: 'null | obj text_area', },
	_buttons: { type: '[obj button_controller]', default: [], },
	_labels: { type: '[obj label]', default: [], },
	__controls_names: {  // XXX   Unhardwire this.
		type: '[string]',
		default: [
			'control_up', 'control_down',
			'control_left', 'control_right',
			'control_inventory',
			'control_jump',
			'control_attack',
			'control_previous_attack',
			'control_next_attack',
		],
	},
	__controls_labels: {  // XXX   Unhardwire this.
		type: '{ string -> string }',
		default: {
			control_up: 'Direction up',
			control_down: 'Direction down',
			control_left: 'Direction left',
			control_right: 'Direction right',
			control_inventory: 'Inventory',
			control_jump: 'Jump',
			control_attack: 'Attack',
			control_previous_attack: 'Previous attack',
			control_next_attack: 'Next attack',
		},
	},
	__controls_keys: {  // XXX   Unhardwire this.
		type: '{ string -> string }',
		default: {
			control_up: '<arrow up>',
			control_down: '<arrow down>',
			control_left: '<arrow left>',
			control_right: '<arrow right>',
			control_inventory: 'i',
			control_jump: 'a',
			control_attack: 's',
			control_previous_attack: 'w',
			control_next_attack: 'e',
		},
	},  // XXX   Unhardwire this.
	controls_names: "def
		() -> [string]
		__controls_names  // XXX   Unhardwire this.
	",
	controls_labels: "def
		() -> { string -> string }
		__controls_labels  // XXX   Unhardwire this.
	",
	controls_keys: "def
		() -> { string -> string }
		__controls_keys  // XXX   Unhardwire this.
	",
	text_width: { type: 'int', init: 'lib.gui.py(260)' },
	render: "def () -> commands [
		debug(['controls_menu_controller#render()']),
		debug(['w', w, 'h', h]),
	]",  //   render
	show_dialog: "def () -> commands [
		execute(me, [
			// XXX
			lib.sound.play_sound(me, 'interface/enter-escape-menu'),

			[remove_object(c) | c <- spawned_children],

			spawn('text_area', 0, 0, {
				mid_x: lib.gui.screen_width / 2,
				mid_y: lib.gui.screen_height / 2,
				use_absolute_screen_coordinates: true,
				bg_color: [0.3, 0.3, 0.3, 1.0],
				bg_border_color: [0.40, 0.42, 0.45, 1.0],
				border: lib.gui.py(20),
				border_sides: lib.gui.py(50),
				border_bot: lib.gui.py(360),
				_text: '# # # # # # # # # # # #',
				text_width: text_width,
				zorder: zorder,
			}, [
				set(_text_area, child),
			])
			;
			if(_text_area != null, [
				map(controls_names(),
					[
					spawn('label', 0, 0, {
						x: lib.gui.screen_width / 2 /* + */ /* 50 */ /* fixme */
							- lib.gui.px(118),
						y: lib.gui.screen_height / 2
							+ index * lib.gui.py(40)
							- size(controls_names()) * lib.gui.py(40) / 2,
						use_absolute_screen_coordinates:
							true,
						_halign: 'left',
						_valign: 'top',
						zorder: zorder + 20,
						_font_size: lib.gui.py(14),
						_text: [controls_labels()[value]
							+ ':'],
					}, [
						add(_labels, [child]),
					])
					,
					spawn('button_controller', {
						mid_x: lib.gui.screen_width / 2
							+ lib.gui.px(58)
							,
						y: lib.gui.screen_height / 2
							+ index * lib.gui.py(40)
							- size(controls_names()) * lib.gui.py(40) / 2
							,
						button_width: lib.gui.px(112),
						button_height: lib.gui.py(28),
						zorder: zorder + 10,
						text: controls_keys()[value],
						on_click: (def()->commands [
							remove_object(me)
							;
// 							if(key != back_button_key,
								debug(['key'])
// 							)
// 							,
						]),
						_font_size: lib.gui.py(14),
						color_scheme: {
							normal: [255, 192, 0],
							depressed: [255, 255, 255],
							focus: [192, 255, 0],
							text_normal: [116, 122, 74],
							text_depressed: [0, 0, 0],
							text_focus: [0, 0, 255],
						},
// 						trap_escape: false,
					}, [
						add(_buttons, [child]),
					])
					,
					]
				)  //   map(controls_names(), ...)
// 				where back_button_key = 'zzz_back'
			])  //   if(_text_area != null, ...)
		])  //   execute(me, [...])
	]",  //   show_dialog
},  //   properties
events: {
	create: '[
// 		render();
		show_dialog(),
	]',
	being_removed: "[
// 		debug(['language_menu_controller#being_removed']),
		map(_buttons, remove_object(value)),
		map(_labels, remove_object(value)),
		remove_object(_text_area),
	]",
},  //   events
}  //   controls_menu_controller
