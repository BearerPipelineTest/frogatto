{
id: "fan_horizontal",
affected_by_currents: false,
zorder: "@include data/zorder.cfg:interior_decor",
has_feet: false,
solid_area: [7,6,24,47],
prototype: ["triggerable"],
properties: {

#-------------------------- effects attaches --------------------------#
	sfx: { type: "obj sound_source_individual_attache", init: "object('sound_source_individual_attache', mid_x, mid_y, {parent: me, sound_file:'ambient/fan.ogg', starts_with_sound_on: false})" },

	air_particles: { type: "obj legacy_particle_attache", init: "object('legacy_particle_attache', mid_x, mid_y, {
			_particle_type: 'air_current',
			zorder: me.zorder + 1,
			parent: me,
			time_to_die: 200,
			custom_relative_pos_default: {mid_x: 0, mid_y: 0},
			customized_spawn_rects: [{
				particle_id: 'air_current',
				rect: [
						min(_x_bound, _x2_bound) - mid_x,
						max(_x_bound, _x2_bound) - mid_x,
						min(_y_bound, _y2_bound) - mid_y, 
						max(_y_bound, _y2_bound) - mid_y
					],
			}],

			customized_spawn_velocities: [{
				particle_id: 'air_current',
				numbers: [
							facing * lib.math.round(_current_vel_x * 10.0 * axis_fudge_factor),
							0,
							lib.math.round(_current_vel_y * 10.0 * axis_fudge_factor),
							0
						],
			}],

			/*
				Set up the TTL to make faster particles die quicker, so that the overall "visual spread" on the level still seems to mostly be confined to the actual box where the current pushes the player.
			*/
			customized_times_to_live: [{
				particle_id: 'air_current',
				magnitude: lib.math.round(50 * (300.0/_current_vel_x)),
			}],
		})",
	},

	axis_fudge_factor: "1.6",  //our x and y physics basically have different scales, so to 'feel' similar we need a much stronger current, but we don't want the particles to look crazy in that direction.

#-------------------------- triggerable overrides --------------------------#
	trigger_on: "commands :: [
		animation('on'),
		sfx.turn_on,
		air_particles.turn_on,
		set(current_generator, rect_current(min(_x_bound, _x2_bound), min(_y_bound, _y2_bound) ,abs(_x_bound - _x2_bound) ,abs(_y_bound - _y2_bound) , _current_vel_x * facing, _current_vel_y, _strength*10))
	]",
	trigger_off: "commands :: [
		animation('off'),
		sfx.turn_off,
		air_particles.turn_off,
		set(current_generator, null )
	]",



#-------------------------- setup --------------------------#
	set_activation_border:  "set(activation_border,max(abs(_x_bound - _x2_bound), abs(_y_bound - _y2_bound))*1.5)",

	is_active: "if(event = '', true, bool(event_status))",

#-------------------------- editor values --------------------------#
	_x_bound: "if(facing > 0, x2, x)",
	_x2_bound: { type: "int", editor_info: { type: "x", value: "if(facing > 0, x2+300, x-300)" } },
	_y_bound: "y",
	_y2_bound: "y + img_h",
	_strength: { type: "int", default: 100, editor_info: { type: "int", value: 100 } },
	_current_vel_x: { type: "int", default: 300, editor_info: { type: "int", value: 300 } },
	_current_vel_y: { type: "int", default: 0, editor_info: { type: "int", value: 0 } },
},


on_start_level: "set_activation_border",

on_create: "[
				set(sfx.starts_with_sound_on, is_active)
				;
				add_object(sfx),
				add_object(air_particles),
				;
				if(is_active, trigger_on, trigger_off)

			]",


on_end_on_anim: "animation('on')",
on_end_off_anim: "animation('off')",

editor_info: {
	category: "props",
},
animation: [
	{
		id: "on",
		image: "props/fan.png",
		rect: [0,0,31,47],
		frames: 4,
		duration: 2,
		pad: 0,
	},
	{
		id: "off",
		image: "props/fan.png",
		rect: [0,0,31,47],
		frames: 1,
		duration: 200,
		pad: 0,
	},
],
}