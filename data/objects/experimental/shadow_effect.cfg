{
	id: "shadow_effect",
	zorder: "@include data/zorder.cfg:shadow",

	is_strict: true,
	always_active: true,

	properties: {
	},

	events: {
		create: "render(); set(xy, [0,0]); set(width, SCREEN_WIDTH), set(height, SCREEN_HEIGHT)",
	},

	shader: {
		//this is the full screen shader which applies lighting to the whole screen
		name: "light_and_darkness",
		new: true,
		vertex: "
			//boiler plate vertex shader. Probably doesn't need modification. The fragment shader
			//is where the fun is.
			uniform mat4 u_anura_mvp_matrix;
			//uniform float u_anura_cycle;
			//uniform vec4 u_anura_sprite_area;
			//uniform vec4 u_anura_draw_area;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
			uniform sampler2D u_anura_tex_map;
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				//look up the color of the pixel from the texture already rendered
				gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
				
				//here's where the magic will happen, we add whatever light/dark effects
				//on the pixel. For now let's just saturate the red channel to demonstrate
				//that something is happening.
				gl_FragColor.r = 1.0;
			}
		",
		draw: "
			//this is some FFL that gets executed every frame before drawing. We can use
			//it to find the light_and_darkness_controller and get information about the
			//scene to pass as parameters to the shader
		[
		]
		//where ctrl = find_or_die(level.chars, value is obj light_and_darkness_controller)
		"
	},
}
