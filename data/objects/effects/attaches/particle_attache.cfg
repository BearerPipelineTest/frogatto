{
id: "particle_attache",
prototype: ["effects_attache"],
zorder: "@include data/zorder.cfg:near_player_foreground_effects",



properties: {
#-------------------------- effects_attache overrides --------------------------#
/*
	At first, this seemed like a pretty slick idea;  automatically taper down all the particles when they're close to being removed.  In retrospect, this ended up botching one particular use of particles:  many of our particles end up being used as short-term "bursts" that happen right when a shot "dies" or is fired.  Due to a quirk in our timing, these objects happen to trigger their `turn_off` command, which is of course what trigger this change to `emission_rate` _immediate_ upon being spawned (if they're this kind of 'burst' effect).
	
	What this does, is that it makes any "indivdual types" of particles that do this entirely unable to customize their `emission_rate`, because literally from cycle 0 onwwards, their `emission_rate` is in control of the `turn_off` command listed below, and of course these animations aren't "summed up"; they're last-come, only served.
	
	More generally, this is just a problematic design, because unless we have a way to turn it off, it's the old "one size doesn't quite fit all" problem.  So what we do in this case is a pretty bulletproof solution:  we check, precisely, to see if they're trying to customize it at all, and if they are, we just entirely disable that "nice default" and let their customization be the thing that takes total control.
*/

	animation_attributes: "[string] :: if(_animations != null, map(_animations, (ParticleSystemAnimation <- value).attribute), [])",
	
	turn_off: "if(not 'emission_rate' in animation_attributes,
				animate(me, {
					emission_rate: 0,
				},{
					duration: time_to_die/5,
				}))",

#-------------------------- vars --------------------------#
	_particle_type: {
		type: "string",
		set: "[
			set(_data, value),
			set(particles, info.info),
			set(_animations, info.animations),
		] where info = ParticleSystemInfo<- get_document(sprintf('data/particles/%s.cfg', value))",
	},

	_animations: { type: "null|[ParticleSystemAnimation]" },

	emission_rate: {
		variable: false,
		type: "decimal",
		set: "
		if(particles.emission_rate is decimal,
			set(particles.emission_rate, value),
			set(particles.emission_rate, m + {
				min: min_value*ratio,
				max: value,
			})

			where ratio = value/(max_value or 1.0)
			where min_value = decimal|int<- m['min']
			where max_value = decimal|int<- m['max']
			where m = map<- particles.emission_rate
		) asserting particles != null",
		get: "if(particles.emission_rate is decimal, particles.emission_rate,
			decimal<- m['max']
			where m = map<- particles.emission_rate
		) asserting particles != null",
	},


	circle_radius_random: {
		variable: false,
		type: "{ min: decimal, max: decimal }",
		get: "if(particles.circle_radius is decimal, { min: particles.circle_radius, max: particles.circle_radius },
		         particles.circle_radius is map and particles.circle_radius['type'] = 'random',
				 { min: decimal<- particles.circle_radius['min'], max: decimal<- particles.circle_radius['max'] },
		         particles.circle_radius is map and particles.circle_radius['type'] = 'fixed',
				 { min: decimal<- particles.circle_radius['value'], max: decimal<- particles.circle_radius['value'] },
				 { min: 1.0, max: 1.0 }
			  ) asserting particles != null",
		set: "set(particles.circle_radius, { type: 'random' } + value) asserting particles != null",
	},




	/*
		this is commented out for now because at the engine-level we don't have this feature of particle systems accessible for editing.
	circle_radius_max: {
		variable: false,
		type: "any",
		set: "set(particles.circle_radius.max, value) asserting particles.circle_radius != null asserting particles != null",
		get: "particles.circle_radius.max asserting particles.circle_radius != null asserting particles != null",
	},*/

	time_to_live: {
		default: -1.0,
		type: "decimal",
		set: "[set(_data, value), if(value = 0, remove_object(me))]",
	},

#-------------------------- special setup behavior --------------------------#
	apply_animation: "def(ParticleSystemAnimation anim) ->commands
	animate(me, {
		(anim.attribute): anim.target,
	}, {
		duration: anim.duration,
		easing: lib.easing.get(anim.easing),
	})
	",
},

on_create: "proto_event('effects_attache', 'create'); if(_animations, map(_animations, apply_animation(value)))",

//Nasty little hack, it seems when loading property setters don't get run. (This causes our earlier particles != null asserts to fail.)
on_load: "set(_particle_type, _particle_type); proto_event('effects_attache', 'load')"

}
