{
	id: "hp_bar_attache",
	is_strict: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	always_active: true,
	solid_dimensions: [],

	prototype: ["effects_attache"],



	properties: {
#-------------------------- effects attache overrides --------------------------#
		do_setup: "[
			initialize_position,
			set(previous_hitpoints, _parent_obj.hitpoints),
			bind_command(def() render_bar),
		]",

		/*
			Some units, notably the ninja kitties, need to be able to hide their HP bars if they, themselves, are hiding.  It's a (hilarious) dead-giveaway of their position.
		*/
		turn_on: "commands :: set(alpha, 255)",
		turn_off: "commands :: set(alpha, 0)",


#-------------------------- core behavior --------------------------#
		hitpoint_bar_width: "_parent_obj.physical_size",
		relative_pos_default: "{ mid_x: 0, mid_y: -(_parent_obj.img_h * 0.45) }",
	
		fraction_of_hitpoints: "decimal :: _parent_obj.hitpoints / decimal(_parent_obj.max_hitpoints)",
		missing_fraction_of_hitpoints: "decimal :: 1.0 - fraction_of_hitpoints",
		previous_hitpoints: { type: "int", dynamic_initialization: true },

		consider_drawing: "commands :: if(_parent_obj.hitpoints != previous_hitpoints, [set(previous_hitpoints, _parent_obj.hitpoints),render_bar])",

		interpolate_colors: "def(decimal fraction) -> [decimal]
			map(_interpolate_colors_as_ints(fraction), color_as_fraction(value))",

		_interpolate_colors_as_ints: "def(decimal fraction) -> [decimal]
			 ([decimal] <- lib.math.interpolate(color_list, fraction))",

		color_as_fraction: "def(decimal input) -> decimal (input) / 255.0",
		color_list: "[[int, int, int, int]] :: [
						[ 59, 247,  65, 255],
						[137, 242,  53, 255],
						[209, 249,  93, 255],
						[242, 255,  29, 255],
						[255, 208, 102, 255],
						[255, 158, 110, 255],
						[255, 117, 107, 255],
						[255,   0,  50, 255],
					]",

	
		render_bar: "commands :: [
			//debug(lib.math.interpolate(color_list, missing_fraction_of_hitpoints)),
			//debug( interpolate_colors(missing_fraction_of_hitpoints) ),
			(
			set(me.animation, {
				id: 'default', //The object must have a valid animation frame before it can be loaded. Using the id 'default' means that before on_load is fired, the default animation supplied for every object will be used.
				image: 'fbo', 
				pivot_origin: [0,0],
				//blend: ['src_color','one_minus_src_alpha'],

				fbo: c.render(bar_width,bar_height+1, (
		
				[
					c.set_source_rgba(clr[0], clr[1], clr[2], conditional_alpha(clr[3])) where clr = interpolate_colors(missing_fraction_of_hitpoints), 
					c.rectangle(0, 0, bar_width, bar_height),
					c.fill(),

					//render black portion
					c.set_source_rgba(0,0,0, conditional_alpha(1.0)), 
					c.rectangle(bar_width - proportional_width, 0, proportional_width, bar_height),
					c.fill(),

					//render shadow
					c.set_source_rgba(0,0,0, conditional_alpha(0.2)), 
					c.rectangle(0, bar_height, bar_width, 1),
					c.fill(),
				])),
				 
				x:0, y:0, w:bar_width, h:bar_height+1,
				scale: 2,
			})
				where	c = canvas(),
				where	proportional_width = lib.math.round(bar_width * missing_fraction_of_hitpoints),
				where	bar_width = hitpoint_bar_width,
						bar_height = 3,
				where	conditional_alpha = def(decimal val) -> decimal if(_parent_obj.hitpoints = _parent_obj.max_hitpoints, 0.0, val)
			),
		]",
		
	},

	on_load: "do_setup",
	
	on_process: "consider_drawing",

}
