{
id: "bouncing_debris_chunk",
zorder: "@include data/zorder.cfg:near_player_foreground_effects",
dies_on_inactive: true,
solid_dimensions: ["effects"],
friction: 2000,
has_feet: false,
solid_area: [9,9,10,10],
prototype: ["transient_object"],

#-------------------------- physics --------------------------#
on_collide_feet: "	[
						set(velocity_y, -(velocity_y*600)/1000),
						if(velocity_y < 200 and (not has_settled),
							[
								do_settle,
								set(rotate,0)
							]
						),
						if(velocity_y < 40,
							set(velocity_y,0)
						),
						if(abs(velocity_y) > 100,
							play_sound
						)
					]",
on_collide_side: "set(velocity_x, -(velocity_x*850)/1000)",


#-------------------------- cosmetic behavior --------------------------#

on_create: "[
				animation(animation_for_material(debris_type)),
				set(rotate, 1d4*90),
				set_initial_velocity(init_vel),
				special_type_based_setup
			]",
timer_frequency: 5,
on_timer: "if(not has_settled, add(rotate, 15))",

on_end_anim: "animation(animation)",
on_enter_water: "do_settle",
on_die: "[spawn('bouncing_debris_chunk.particle_system_holder', x,y, {particle_colors: particle_colors}), remove_object(me)]",


on_process: "if(has_settled, set(time_in_animation, 0))",


#-------------------------- core behavior --------------------------#
types: {
	DebrisSound: "enum { bone, metal, metal_medium, wooden, wooden_hollow, wooden_big, stone, stone_big, ceramic, ceramic_small, electric, arcane }",
	DebrisMaterialParticleType: "enum { wooden, metal, stone }",
	DebrisMotionStyle: "enum { burst, fall_down }",
},

properties: {
	debris_type: { type: "DebrisType", dynamic_initialization: true},
	init_vel: { type: "DebrisMotionStyle", dynamic_initialization: true},
	
	has_settled: { type: "bool", default: false },
	do_settle: "[set(has_settled, true), schedule(100, die())]",

	set_initial_velocity: "def(DebrisMotionStyle style) -> commands execute(me, switch(style,
					enum burst,		[set(velocity_x, (1d1000-500)), set(velocity_y, -1d600-200)],
					enum fall_down,	[set(velocity_x, (1d500-250)), set(velocity_y, -1d100+200)],
				))",
					
	particle_colors: "DebrisMaterialParticleType :: switch(debris_type,
							enum metal_corner,				enum metal,
							enum metal_flat,				enum metal,
							enum metal_round,				enum metal,
							enum glass_small,				enum metal,
							enum ceramic,					enum stone,
							enum porcelain,					enum stone,
							enum porcelain_small,			enum stone,
							enum wooden_corner,				enum wooden,
							enum wooden_flat,				enum wooden,
							enum peat,						enum wooden,
							enum peat_small,				enum wooden,
							enum rock_big_cement,			enum stone,
							enum rock_small_cement,			enum stone,
							enum bone_straight,				enum stone,
							enum bone_skull,				enum stone,
															enum stone
				)",
	sound_type: "DebrisSound :: switch(debris_type,
							enum metal_corner,				enum metal_medium,
							enum metal_flat,				enum metal_medium,
							enum metal_round,				enum metal_medium,
							enum glass_small,				enum metal,
							enum ceramic,					enum ceramic,
							enum porcelain,					enum ceramic,
							enum porcelain_small,			enum ceramic_small,
							enum wooden_corner,				enum wooden,
							enum wooden_flat,				enum wooden_big,
							enum rock_big_cement,			enum stone_big,
							enum rock_small_cement,			enum stone,
							enum bone_straight, 			enum bone,
							enum bone_skull, 				enum bone,
							enum peat, 						enum bone,
							enum peat_small, 				enum bone,
							enum electric_mote,				enum electric,
							enum arcane_shard_small1,		enum arcane,
							enum arcane_shard_small2,		enum arcane,
							enum arcane_shard_big1,			enum arcane,
															enum stone
				)",
				
	play_sound:	"commands :: switch(sound_type,
							enum bone,						sound('clatter-bone'+1d10+'.wav',0.8),
							enum metal,						sound('Collide-Metal'+1d10+'.wav',0.8),
							enum metal_medium,				sound('collide-metal-medium'+1d9+'.wav',0.5),
							enum wooden,					sound('collide-wood'+1d10+'.wav'),
							enum wooden_hollow,				sound('collide-wood-hollow'+1d30+'.wav',0.22),
							enum wooden_big,				sound('collide-wood-large'+1d11+'.wav',0.22),
							enum stone,						sound('gravel-bounce'+1d20+'.wav', 0.7),
							enum stone_big,					sound('Collide-Rock'+1d8+'.wav',0.8),
							enum ceramic,					sound('collide-ceramic'+1d12+'.wav',0.8),
							enum ceramic_small,				sound('collide-ceramic-small'+1d21+'.wav'),
							enum electric,					null,
							enum arcane,					null,
															sound('Collide-Rock'+1d8+'.wav',0.8)
				)",
				
	animation_for_material: "def(debris_type) -> string
				switch(debris_type,
							enum metal_corner,				'metal_corner',
							enum metal_flat,				'metal_flat',
							enum metal_round,				'metal_round',
							enum glass_small,				'glass_small',
							enum ceramic,					'ceramic',
							enum porcelain,					'porcelain',
							enum porcelain_small,			'porcelain_small',
							enum wooden_corner,				'wooden_corner',
							enum wooden_flat,				'wooden_flat',
							enum rock_big_cement,			'rock_big_cement',
							enum rock_small_cement,			'rock_small_cement',
							enum bone_straight,				'bone_straight',
							enum bone_skull,				'bone_skull',
							enum peat,						'peat',
							enum peat_small,				'peat_small',
							enum electric_mote,				'electric_mote',
							enum arcane_shard_small1,		'arcane_shard_small1',
							enum arcane_shard_small2,		'arcane_shard_small2',
							enum arcane_shard_big1,			'arcane_shard_big1',
															'rock_small_cement'
				)",
				
	special_type_based_setup: "commands :: switch(debris_type,
							enum electric_mote,				spawn('bouncing_debris_chunk.electric_sparks', x, y, {parent: me, relative_x:0, relative_y:0, time_to_die: 0}),
							enum arcane_shard_small1,		set(alpha, 100),
							enum arcane_shard_small2,		set(alpha, 100),
							enum arcane_shard_big1,			set(alpha, 100),
															null
				)",
},

animation: [
	{
		"@base": true,
		image: "effects/particles3.png",
		accel_y: 40,
		pad: 3,
		body_area: null,
		palettes: "@include data/palettes.cfg:dungeon_palettes + cave_palettes",
		duration: 5,
		frames: 7,
	},

	{
		id: "wooden_corner",
		rect: [1,1,17,17],
	},
	{
		id: "wooden_flat",
		rect: [1,21,17,37],
		frames: 6,
	},
	{
		id: "metal_corner",
		rect: [1,41,17,57],
	},
	{
		id: "metal_flat",
		rect: [1,61,17,77],
		frames: 6,
	},
	{
		id: "metal_round",
		rect: [1,121,17,137],
	},
	{
		id: "glass_small",
		rect: [147,1,154,8],
		frames: 6,
	},
	{
		id: "ceramic",
		rect: [1,141,17,157],
		frames: 6,
	},
	{
		id: "porcelain",
		rect: [141,161,157,177],
		frames: 8,
		frames_per_row: 4,
	},
	{
		id: "porcelain_small",
		rect: [141,201,157,217],
		frames: 6,
		frames_per_row: 3,
	},
	{
		id: "rock_big_cement",
		rect: [1,81,17,97],
	},
	{
		id: "rock_small_cement",
		rect: [1,101,17,117],
		frames: 6,
	},
	{
		id: "bone_straight",
		rect: [146,81,165,100],
		frames: 9,
		frames_per_row: 3,
	},
	{
		id: "bone_skull",
		rect: [221,28,240,47],
		frames: 9,
		frames_per_row: 1,
	},
	{
		image: "effects/electric-sparks2.png",
		id: "electric_mote",
		accel_y: 10,
		solid_area: [6,4,7,5],
		rect: [2,2,16,16],
		frames: 18,
		frames_per_row: 9,
		duration: 1,
	},
	{
		id: "peat",
		rect: [1,161,17,177],
	},
	{
		id: "peat_small",
		rect: [1,181,17,197],
		frames: 6,
	},
	{
		image: "effects/electric-sparks2.png",
		id: "electric_mote",
		accel_y: 10,
		solid_area: [6,4,7,5],
		rect: [2,2,16,16],
		frames: 18,
		frames_per_row: 9,
		duration: 2,
	},
	{
		image: "effects/electric-sparks2.png",
		id: "electric_mote",
		accel_y: 10,
		solid_area: [6,4,7,5],
		rect: [2,2,16,16],
		frames: 18,
		frames_per_row: 9,
		duration: 3,
	},
	{
		id: "arcane_shard_small1",
		rect: [1,262,17,278],
		frames: 8,
		duration: 3,
	},
	{
		id: "arcane_shard_small2",
		rect: [1,284,17,300],
		frames: 10,
		duration: 3,
	},
	{
		id: "arcane_shard_big1",
		rect: [1,306,21,326],
		frames: 12,
		frames_per_row: 6,
		duration: 3,
	},


],






object_type: [
	{
		id: "electric_sparks",
		prototype: ["effects_attache"],
		zorder: "@include data/zorder.cfg:near_player_foreground_effects",

		properties: {
		},
		
		on_create: "[set(relative_x,0),set(relative_y,0)]",


		on_end_anim: "[
			animation(animation),
			set(rotate,1d360),
			set(facing, if(1d2=2, -1, 1)),
		]",

		animation: [
			{
				"@base": true,
				image: "effects/electric-sparks2.png",
				accel_y: 10,
				pad: 3,
				body_area: null,
				duration: 2,
				frames: 7,
			},
			{
				id: "normal",
				rect: [2,38,16,52],
				frames: 9,
				duration: 2,
			},
			{
				id: "normal",
				rect: [2,38,16,52],
				frames: 9,
				duration: 3,
			},
			{
				id: "normal",
				rect: [2,56,16,70],
				frames: 7,
				duration: 2,
			},
			{
				id: "normal",
				rect: [2,74,16,88],
				frames: 9,
				duration: 2,
			},
			{
				id: "normal",
				rect: [2,74,16,88],
				frames: 9,
				duration: 3,
			},
		]
	},


	{
		id: "particle_system_holder",
		types: {
			ParticleColorNames: "enum {wooden, metal, stone}",
		},
		zorder: 100,
		hitpoints: 300,
		dies_on_inactive: true,
		properties: {
			set_time_to_live:  "def(int time) -> commands [set(max_hitpoints, time),set(hitpoints,time)]",
			particle_colors: { type: "ParticleColorNames",  init: "enum stone" },
			particle_name: "switch(	particle_colors,
														enum wooden, 'wooden',
														enum metal, 'metal',
														enum stone, 'stone'
													)",
			
		},

		timer_frequency: 10,
		on_create: "[
						set(velocity_x, 0),
						set(velocity_y, 0),
						set(animation, 'normal'),
						add_particles(particle_name)
					]",
		on_timer: "set(hitpoints, hitpoints-10)",
		on_turnOff: "[set(particle_systems[particle_name].generation_rate, 0)]",
		animation: {
			accel_y: 0,
			accel_x: 0,
			id: "normal",
			image: "effects/particles2.png",
			events: "2:turnOff",
			duration: 10000,
			x: 0,
			y: 0,
			w: 0,
			h: 0,
		},
		particle_system: [{
			"@base": true,
			type: "point",
			dot_rounded: true,
			generation_rate_millis: 10000,
			time_to_live: 60,
			time_to_live_rand: 24,
			pos_x: 0,
			pos_y: 0,
			pos_x_rand: 30,
			pos_y_rand: 30,
			velocity_x: -500,
			velocity_x_rand: 1000,
			velocity_y: -500,
			velocity_y_rand: 1000,
			dot_size: 3,
		},{
			id: "wooden",
			colors: ["f9f9dbff","ffc20eff","ffc20eaa","ff7e0088","ae4a2855"],
		},{
			id: "metal",
			colors: ["fceec5ff","dfd7d3ff","a99e96aa","796d6288","584d4055"],
		},{
			id: "stone",
			colors: ["f4dcbbff","cdbaa7ff","a88e81aa","7b535e88","692c4155"],
		}],
	}],
}