{
ignore_collide: true,
id: "torch_glow",
prototype: ["effects_attache"],
is_strict: true,
serializable: false,
zorder: "@include data/zorder.cfg:near_player_foreground_effects",
timer_frequency: 5,
activation_border: 500,


properties: {
	_base_alpha: "80",
	_glowSize: "150",
	
	_norm_x: {type: "int", init: "mid_x" },
	_norm_y: {type: "int", init: "mid_y" },
	_cycle_offset: {type: "int", init: "1d6000", persistent: false },
	_glow_speed: {type: "int", init: "1", persistent: false },
	_gutter: {type: "int", init: "0", persistent: false },
	
	
	attenuate_gutter: "commands :: if(_gutter >= 20, set(_gutter, _gutter - 1d70 - 20))",
	should_gutter: "bool :: lib.math.length(self, level.player) < 100 and
						_gutter < (((100 - lib.math.length(self, level.player))*(abs(level.player.velocity_x) + abs(level.player.velocity_y)))/100)",
	do_gutter: "commands :: set(_gutter, lib.math.round(((100 - lib.math.length(self, level.player))*(abs(level.player.velocity_x) + abs(level.player.velocity_y)))/100))",

	light_circular: {
		type: "obj light_source_attache",
		init: "object('light_source_attache', mid_x, mid_y, {
			_sprite_type: enum eased_halo,
			time_to_die: 0,
			parent: me,
			custom_relative_pos_default: {mid_x: 0,	mid_y: 0},
			scale: 1.0,
			variable_name: 'light_circular',
		})",
	},

	
	set_flicker: "commands :: [
		set(light_circular.scale, 1.0 * light_magnitude),
		set(light_circular.brightness, max(lib.math.round(255 * light_magnitude * 0.66),255)), 

		set(_cycle_offset, _cycle_offset + _glow_speed),
		attenuate_gutter,
		if(should_gutter, do_gutter),
		if(cycle%8=3, [set(_glow_speed, 1d30+((_gutter+6000)/100)), set(_cycle_offset, 1d6000)]),
		if(cycle%3=1,
			[set(mid_x, _norm_x + (1d6)-3),
			set(mid_y, _norm_y + (1d6)-3)]
		),
	] where light_magnitude = (
			wave(_cycle_offset) / abs(150 - (_gutter/20))
			+ _glowSize
			- _gutter * 0.08
		) * 0.01
	
	",
#-------------------------- constructor/destructor --------------------------#
	do_setup: "[
		set(alpha,_base_alpha), /*set(green,69), set(blue,31), */
		set(_norm_x, mid_x),
		set(_norm_y, mid_y),
		add_object(light_circular),
	]",
},



on_process: "set_flicker",
on_end_anim: "animation('normal')",
on_timer: "[set(alpha, _base_alpha + (wave(cycle*(10 +1d2))*20)/2000) ]",


animation: {
	id: "normal",
	image: "props/glow2.png",
	rect: [0,0,63,63],
	frames: 1,
	duration: 100000,
	blend:["src_alpha","one"],
	//blend: ["dst_color","zero"],
	//blend_equation:["reverse_subtract","reverse_subtract"]
	//blend:["src_alpha","one_minus_src_alpha"],

},
}
