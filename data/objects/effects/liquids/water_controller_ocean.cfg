{
id: "water_controller_ocean",
prototype: ["liquid"],
zorder: "@include data/zorder.cfg:liquid_particle_effects",

properties: {
	liquid_texture: "string :: 'liquids/water-texture2.png'",
	texture_speed: "decimal :: 0.002",

	add_water_effect: "add_water(_x_bound, _y_bound, _x2_bound, _y2_bound)",


#-------------------------- fx objects --------------------------#
	volume_bubbles: { 
		type: "obj particle_attache", 
		init: "object('particle_attache', x,y, {
			_particle_type:'bubbles_2', //Silence check for this existing. `particles`, which this sets, is overwritten later.
			parent: me,
			time_to_die: 0,
			x:x, y:y,
			zorder: lib.zorder.get('liquid_particle_effects'),
		})",
		serializable: false,
	},

	underlay_obj: {
		type: "obj water_controller_ocean.underlay",
		init: "object('water_controller_ocean.underlay', mid_x, mid_y, {
				controller: me,
			})",
	},
	lights_obj: {
		type: "obj water_controller_ocean.lights",
		init: "object('water_controller_ocean.lights', mid_x, mid_y, {
				controller: me,
			})",
	},
	lights_transverse_obj: {
		type: "obj water_controller_ocean.lights",
		init: "object('water_controller_ocean.lights', mid_x, mid_y, {
				controller: me,
				_timeshift: 1.4,
			})",
	},



#-------------------------- constructors --------------------------#
	liquid_obj_constructor: "commands :: [
		add_particle_effect ;
		setup_particles ;
		[
			setup_shader,
			add_object(underlay_obj),
			add_object(lights_obj),
			add_object(lights_transverse_obj),
		]

	]",

	add_particle_effect: "[
		add_object(volume_bubbles),
	]",

	setup_particles: "[
		set(volume_bubbles.clip_area, [_x_bound-mid_x, _y_bound-mid_y, _x2_bound - _x_bound, _y2_bound - _y_bound, ]),
		set(volume_bubbles.particles, (
			raw_particle_system_info + {
				position: [
					(_x_bound + _x2_bound)/2 - mid_x, //Horizontal offset of particle system as wide as the water, to handle when the emitter object isn't square within the bounds of the water.
					_y2_bound - mid_y, //Position the center point (of the box emitter) at the bottom of the body of water.
					0
				],
				fast_forward: (map <- raw_particle_system_info.fast_forward) + {
					time: bubble_average_lifetime, //Pump the water full of bubbles when we first encounter it.
				},
				emitter: (map <- raw_particle_system_info.emitter) + {
					time_to_live: bubble_average_lifetime, //Make the bubbles live until the top of the water.
					box_width: _x2_bound - _x_bound, //Make the bubbles as wide as the water. (To position the bubbles, see `position` above.)
					emission_rate: (map <- (map <- raw_particle_system_info.emitter).emission_rate) + {
						max: (_x2_bound - _x_bound) / 20, //Particle density. (Particles per pixel of water surface, divided by 2 on average because random floor is 0.)
					}
				},
			} where
				raw_particle_system_info = 
					(ParticleSystemInfo <- get_document('data/particles/bubbles_2.cfg')).info,
				bubble_average_lifetime = 
					(_y2_bound - _y_bound) / average_vertical_bubble_speed / 60/*fps*/
					where average_vertical_bubble_speed = 0.65 //as experimentally verified ([DDR 2020-40-24] 0.6 is actually more proper, but I like the bubbles disappearing before they hit the surface sometimes.)
		)),
	]",
},


on_editor_changed_variable: "[
	//Hack: Fix water not moving in response to editor. (I think it gets set to the original object, not the 'shadow object' we're editing.)
	set(volume_bubbles.parent, me),
	set(underlay_obj.controller, me),
	set(top_obj.controller, me),
	set(lights_obj.controller, me),
	set(lights_transverse_obj.controller, me),
	
	proto_event('liquid', 'editor_changed_variable'),
]",


animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 117, y: 42, w: 28, h: 28,
	frames: 1,
	duration: 1000,
},



object_type: [
	{
		id: "underlay",
		zorder: "@include data/zorder.cfg:background_parallax_walls_further",
		properties: {
		#-------------------------- vars --------------------------#
			controller: { type: "obj liquid", persistent: false },
			_offset: { type: "decimal", default: 0, persistent: false },
		},
		on_create: "[fire_event('calculate_segments')]",
		on_calculate_segments: "[
			set(x,controller._x_bound),
			set(y,controller._y_bound),
			set(draw_area, [
				0,
				_offset, 
				abs(controller._x2_bound-controller._x_bound)/2, 
				abs(controller._y2_bound-controller._y_bound)/2
			]),
		]",
		on_process: "[add(_offset,0.25),fire_event('calculate_segments')]",

		#we don't want to compile the image since we rely on it tiling.
		no_compile_image: "liquids/water-texture.png",
		animation: {
			image: "liquids/water-texture.png",
			id: "normal",
			x: 0,
			w: 256,
			y: 0,
			h: 256,
		},
	},
	{
		id: "lights",
		zorder: "@include data/zorder.cfg:exterior_near_background",
		zsub_order: 1,
		properties: {
		#-------------------------- vars --------------------------#
			controller: { type: "obj liquid", persistent: false },
			_offset: { type: "decimal", default: 0, persistent: false },
			_timeshift: { type: "decimal", default: 0, persistent: false },
		},
		on_create: "[
			fire_event('calculate_segments'),
			set(alpha,127),
		]",
		on_calculate_segments: "[
			set(x,controller._x_bound),
			set(y,controller._y_bound),
			set(draw_area, [
				5.0*_timeshift*sin(controller._offset), 
				0, 
				abs(controller._x2_bound-controller._x_bound)/2, 
				img_h/2
			]),
		]",
		on_process: "[add(_offset,1.5),fire_event('calculate_segments')]",

		#we don't want to compile the image since we rely on it tiling.
		no_compile_image: "liquids/water-texture-lights.png",
		animation: {
			image: "liquids/water-texture-lights.png",
			blend:["src_alpha","one"],
			id: "normal",
			x: 0,
			w: 256,
			y: 0,
			h: 128,
		},
	},
],

}
