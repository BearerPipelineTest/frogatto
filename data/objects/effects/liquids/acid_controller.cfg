{
id: "acid_controller",
prototype: ["liquid"],
zorder: "@include data/zorder.cfg:liquid_particle_effects",

properties: {
	liquid_texture: "string :: 'liquids/toxic-acid.png'",
	
	add_water_effect: "add_water(_x_bound, _y_bound, _x2_bound, _y2_bound, [70, 0, 70, 50])",
	add_particle_effect: "[
		add_particles('bubbles'),
		add_particles('fizz'),
		fire_event('setup_particles')]",

	liquid_damage: "if(higher_difficulty, 3,1)",
	damage_type: "enum acid",
	
	//Surface bubbles can float left or right. We can't set up one emitter to do this, so we just use two and switch the emitter direction.
	acid_surface_bubbles: { 
		type: "obj particle_attache", 
		init: "object('particle_attache', x,y, {
			_particle_type:'acid_surface_bubbles', //Silence check for this existing. `particles`, which this sets, is overwritten later.
			parent: me,
			time_to_die: 0,
			x:x, y:y,
			zorder: lib.zorder.get('liquid_particle_effects'),
		})"
	},
},

on_setup_particles: "[
	set(particle_systems['bubbles'].area, [_x_bound, _y_bound, _x2_bound, _y2_bound]),
	set(particle_systems['fizz'].min_x, _x_bound - x),
	set(particle_systems['fizz'].max_x, _x2_bound - x),
	set(particle_systems['fizz'].min_y, (_y_bound - 15) - y),
	set(particle_systems['fizz'].max_y, (_y_bound + 15) - y),
	set(particle_systems['fizz'].spawn_rate, 2*(_x2_bound - _x_bound)),
	
	set(acid_surface_bubbles.particles, (
		raw_particle_system_info + {
			position: [
				(_x_bound + _x2_bound)/2 - mid_x, //Horizontal offset of particle system as wide as the water, to handle when the emitter object isn't square within the bounds of the water.
				-(_y_bound - mid_y - 3), //Position the center point (of the box emitter) at the top of the body of water. Less 4px to float on top of water surface.
				0
			],
			emitter: (map <- raw_particle_system_info.emitter) + {
				box_width: _x2_bound - _x_bound - 64*2, //Make the bubbles as wide as the water. (To position the bubbles, see `position` above.) Less 64px for fade in/out margins.
				emission_rate: (map <- (map <- raw_particle_system_info.emitter).emission_rate) + {
					max: (_x2_bound - _x_bound) / 125, //Particle density. (Particles per pixel of water surface, divided by 2 on average because random floor is 0.)
				}
			},
		} where
			raw_particle_system_info = 
				(ParticleSystemInfo <- get_document('data/particles/acid_surface_bubbles.cfg')).info
	)),
	add_object(acid_surface_bubbles),
]",

on_create: "[
	%PROTO%, //Add the liquid surface effect.
	if(find(level.frame_buffer_shaders, value.shader_info = 'new_acid_distort') = null,
		add(level.frame_buffer_shaders, [{
			begin_zorder: -10000000,
			end_zorder: lib.zorder.get('water'),
			shader_info: 'new_acid_distort'
		}])
	),
]",

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 147, y: 102, w: 28, h: 28,
	frames: 1,
	duration: 1000,
},

particle_system: [
	{
		id: "bubbles",
		type: "water",
		number_of_particles: 100,
		repeat_period: 200,
		velocity_y: -1,
		velocity_x: 0,
		velocity_rand: 4,
		dot_size: 2,
		color: [120,250,200,200],
	},
	{
		id: "fizz",
		type: "simple",
		spawn_rate: 600,
		time_to_live: 80,
		min_x: -60,
		max_x: 260,
		min_y: -15,
		max_y: 15,
		velocity_y: -200,
		velocity_x: 260,
		velocity_x_random: 200,
		velocity_y_random: 400,
		accel_y: -10,
		delta_a: 2,
		animation: {
			id: "sparkle",
			image: "effects/particles.png",
			rect: [3,93,9,99],
			pad: 3,
			frames: 5,
			frames_per_row: 5,
			scale: 2,
			duration: 8,
		},
	},
],
}
