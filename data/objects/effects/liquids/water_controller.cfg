{
id: "water_controller",
prototype: ["liquid"],
zorder: "@include data/zorder.cfg:liquid_particle_effects",

properties: {
	liquid_texture: "string :: 'liquids/water.png'",
	texture_speed: "decimal :: 0.002",

	add_water_effect: "add_water(_x_bound, _y_bound, _x2_bound, _y2_bound)",
	add_particle_effect: "[
		fire_event('setup_particles'),
	] ",
	
	volume_bubbles: { 
		type: "obj particle_attache", 
		init: "object('particle_attache', x,y, {
			_particle_type:'bubbles_2', //Silence check for this existing. `particles`, which this sets, is overwritten later.
			parent: me,
			time_to_die: 0,
			x:x, y:y,
			zorder: lib.zorder.get('liquid_particle_effects'),
		})"
	},
},

on_setup_particles: "[
	set(volume_bubbles.clip_area, [_x_bound-mid_x, _y_bound-mid_y, _x2_bound - _x_bound, _y2_bound - _y_bound, ]),
	set(volume_bubbles.particles, (
		raw_particle_system_info + {
			position: [
				(_x_bound + _x2_bound)/2 - mid_x, //Horizontal offset of particle system as wide as the water, to handle when the emitter object isn't square within the bounds of the water.
				_y2_bound - mid_y, //Position the center point (of the box emitter) at the bottom of the body of water.
				0
			],
			fast_forward: (map <- raw_particle_system_info.fast_forward) + {
				time: bubble_average_lifetime, //Pump the water full of bubbles when we first encounter it.
			},
			emitter: (map <- raw_particle_system_info.emitter) + {
				time_to_live: bubble_average_lifetime, //Make the bubbles live until the top of the water.
				box_width: _x2_bound - _x_bound, //Make the bubbles as wide as the water. (To position the bubbles, see `position` above.)
				emission_rate: (map <- (map <- raw_particle_system_info.emitter).emission_rate) + {
					max: (_x2_bound - _x_bound) / 20, //Particle density. (Particles per pixel of water surface, divided by 2 on average because random floor is 0.)
				}
			},
		} where
			raw_particle_system_info = 
				(ParticleSystemInfo <- get_document('data/particles/bubbles_2.cfg')).info,
			bubble_average_lifetime = 
				(_y2_bound - _y_bound) / average_vertical_bubble_speed / 60/*fps*/
				where average_vertical_bubble_speed = 0.65 //as experimentally verified ([DDR 2020-40-24] 0.6 is actually more proper, but I like the bubbles disappearing before they hit the surface sometimes.)
	)),
	add_object(volume_bubbles),
]",

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 117, y: 42, w: 28, h: 28,
	frames: 1,
	duration: 1000,
},

particle_system: [
	{
		id: "bubbles",
		type: "water",
		number_of_particles: 0,
		repeat_period: 200,
		velocity_y: -1,
		velocity_x: 0,
		velocity_rand: 4,
		dot_size: 2,
		color: [120,160,255,100],
	},
],

on_create: "[
	%PROTO%,
	if(find(level.frame_buffer_shaders, value.shader_info = 'water_distort') = null,
		add(level.frame_buffer_shaders, [{
			begin_zorder: -10000000,
			end_zorder: lib.zorder.get('water'),
			shader_info: 'water_distort'
		}])
	),
]",
}
