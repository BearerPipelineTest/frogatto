{
id: "current_generator",
ignore_collide: true,
is_strict: true,
activation_border: 350,
hidden_in_game: true,
zorder: "@include data/zorder.cfg:in_front_of_everything",
prototype: ["transient_object"],

editor_info: {
	category: "controllers",
	help: "Produce a current to push against Frogatto!",
},

properties: {
#-------------------------- constructor/destructor --------------------------#
	transient_obj_constructor: "[
		fire_event('setup_particles'),
	]",

#-------------------------- vars --------------------------#
	_x_bound: { type: "int", editor_info: { type: "x", value: "x-100" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "x+150" } },
	_y_bound: { type: "int", editor_info: { type: "y", value: "y-100" } },
	_y2_bound: { type: "int", editor_info: { type: "y", value: "y+150" } },
	strength: { type: "int", default: 1000, editor_info: { type: "int", min_value:0, max_value:2000, value: "1000" } },
	current_vel_x: { type: "int", editor_info: { type: "int", min_value:-2000, max_value:2000, value: "0" } },
	current_vel_y: { type: "int", editor_info: { type: "int", min_value:-2000, max_value:2000, value: "200" } },
	invisible: { type: "bool", default: false, editor_info: { type: "boolean", value: "false" } },

	//the purpose of 'invisible' isn't to hide the controller; it's to hide the particles.  I.e. to allow some other graphical feature like a waterfall to represent the thing creating the current.
	
	air_particles: {
		type: "obj legacy_particle_attache", 
		init: "object('legacy_particle_attache', mid_x, mid_y, {
			_particle_type: 'air_current',
			zorder: me.zorder,
			parent: me,
			time_to_die: 200,
			custom_relative_pos_default: {mid_x: 0, mid_y: 0},
		})",
		persistent: false,
		variable_name: 'air_particles',
	},
},


on_setup_particles: "[
	//Set up the particle effects.
	if(invisible, [
		air_particles.turn_off,
	],[
		add_object(air_particles); //gotta do this first, or the particles don't exist to be set
		
		[
			set(air_particles.customized_spawn_rects, [{
				particle_id: 'air_current',
				rect: [
						min(_x_bound, _x2_bound) - mid_x,
						max(_x_bound, _x2_bound) - mid_x,
						min(_y_bound, _y2_bound) - mid_y, 
						max(_y_bound, _y2_bound) - mid_y
					],
			}]),

			set(air_particles.customized_spawn_velocities, [{
				particle_id: 'air_current',
				numbers: [
					facing * lib.math.round(current_vel_x * 10.0),
					0,
					(-upside_down) * lib.math.round(current_vel_y * 10.0),
					0
				],
			}]),

			set(air_particles.customized_spawn_rates, [{
				particle_id: 'air_current',
				magnitude: floor((
					(area * strength) * particle_density where
					area = (abs(_x_bound - _x2_bound) * abs(_y_bound - _y2_bound)),
					particle_density = 0.000192
				)),
			}]),

			//Set up the TTL to make faster particles die quicker, so that the overall 'visual spread' on the level still seems to mostly be confined to the actual box where the current pushes the player.
			set(air_particles.customized_times_to_live, [{
				particle_id: 'air_current',
				magnitude: floor(lib.math.constrain(
					2, 
					50 * (300.0/lib.math.length(current_vel_x, current_vel_y)),
					10
				)),
			}]),
		];
		
		air_particles.turn_on //must do this last, because it applies the changes we just set
	]),
	
	//Set up the current, so it agrees with the particle effects.
	set(current_generator, rect_current(
		_x_bound, _y_bound,
		abs(_x_bound - _x2_bound), abs(_y_bound - _y2_bound),
		current_vel_x, current_vel_y, 
		strength
	)),
]",

on_editor_changed_variable: "fire_event('setup_particles')",

on_end_anim: "animation('normal')",
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 86,
	y: 11,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},

}