{
id: "gazer_boss",
prototype: ["hittable"],
always_active: true,
editor_info: {
	category: "boss",
},

types: {
	GazerBossBehaviorModeTypes: "enum {
		aggro_mooks,
		charging_laser,
		attack_laser,
		spawn_mooks,
		scattershot,
		spiral_attack,
		idle,
	}",
},


preload_objects: ["gazer_small_bare", "coin_silver_kinetic", "bouncing_debris_chunk", "die_cloud_medium", "heart_object"],

properties: {
#-------------------------- hittable overrides --------------------------#
	attack_damage:  "if(true, kill_anything, 0)",
	team:  			"if(true, 'evil', 'evil_harmless')",
	
	title: "~Gazer Boss~",
	description: "~When you stare into The Great Eye, it also stares into you!  And fires death beams at you, because eyes totally do that sometimes.  Honest.~",
	taste: "~AHA!~",

	
	taxonomy: "TaxonomyType :: enum stone",
	custom_damage_table: "{
		enum neutral: 1.0,
		enum fire: 0.0,
		enum energy: 0.0,
		enum arcane: 0.0,
		enum acid: 0.0,
		enum impact: 1.0,
		enum impale: 1.0,
		enum lacerate: 1.0
	}",

#-------------------------- custom death logic --------------------------#
	death_fx_type: "'moth-boss'",
	corpse_object_type: "'${me.type}.corpse'",
	death_fx_ignore_damage_type: "true",

#-------------------------- boss HUD stuff --------------------------#
	is_a_boss: { default: true },


#-------------------------- setup --------------------------#
	setup: "commands :: [
		set_max_hitpoints({casual: standard_thrown_damage * 20, challenging: standard_thrown_damage * 45}),
		spawn('gazer_boss_bg_effect', {
			use_absolute_screen_coordinates: true,
			width: SCREEN_WIDTH,
			height: SCREEN_HEIGHT,
		})
	]",


#-------------------------- core behavior --------------------------#
	process_behavior: "				[		
										switch(_state,
											enum aggro_mooks,		process_aggro_mooks,
											enum charging_laser,	process_charging_laser,
											enum attack_laser,		process_laser,
											enum spawn_mooks,		process_spawn_mooks,
											enum scattershot,		process_scattershot,
											enum spiral_attack,		process_spiral_attack,
											enum idle,				null
										),
										//debug(cycle - _phase_started_at, ' : ', _current_phase_random_timer)
									]",
													
	pick_random_behavior: "commands :: [
											switch(_behavior_mode_prng.get_next_value,
//												0, ; begin_charging_laser,
												0, ; if(should_spawn_mooks, begin_spawn_mooks, begin_aggro_mooks),
												1, ; if(me.hitpoints <= me.max_hitpoints/2, begin_charging_laser, begin_scattershot),
												2, ; if(should_spawn_mooks, begin_spawn_mooks, begin_spiral_attack),
												3, ; begin_scattershot,
												
											),
											_behavior_mode_prng.iterate_random_pool,
											; set(_phase_started_at, cycle)
										]",
										
	pick_specific_behavior: "def( commands new_behavior ) -> commands	[
																			; new_behavior,
																			; set(_phase_started_at, cycle)
																		]",
#-------------------------- aggro-mooks mode --------------------------#
	/*
		In this mode, the various gazerlets will all, sequentially, "catch fire" and start chasing the player - they'll home in on the player until they explode.  This will burn through an entire roster of them, leaving the boss with none.
	*/

	begin_aggro_mooks: "commands ::	[
									set(_state, enum aggro_mooks),
									set(_current_phase_random_timer, 170+1d50)
								]",

	process_aggro_mooks: "		[
									add(rotate, sin(cycle*7) * 0.05 + sin(cycle*3) * 0.15 + sin(cycle*2.5) * 0.25),
									if(mod(cycle - _phase_started_at, 75) = 0, trigger_single_mook_aggro),
									if(cycle - _phase_started_at = _current_phase_random_timer,
										if(size(existing_non_aggroed_mooks) > 0,
											pick_specific_behavior(begin_aggro_mooks),
											pick_random_behavior
										)
									)
								]",

	
	trigger_single_mook_aggro: "if(the_mook != null, 
									[
										if(the_mook is obj gazer_small_bare,
											[
												the_mook.warn_flash_sequence,
												the_mook.do_aggro_sound,
												schedule(20, the_mook.fly_to_obj(level.player, def() the_mook.detonate)),
											]
										),
										if(the_mook is obj gazer_small_bare_harmless,
											the_mook.do_aggro_behavior
										)
									]
								) where the_mook = choose(existing_non_aggroed_mooks)",

#-------------------------- scattershot mode --------------------------#
	/*
		Within this block of behavior; we talk about 'arcs'.  Basically the scattershot mode works by the boss rotating quickly between several different angles.  It comes to rest at a target angle after rotating (something in the ballpark of 100Â°), and then quickly fires off a shot.  We have a tally listing how many times it's going to do this; once the tally is exhausted, it considers this mode "done" and goes back to picking a random behavior.
	*/
	begin_scattershot: "commands ::	[
									set(_state, enum scattershot),
									set(_remaining_scattershot_shot_count, 6) //we don't set a specific end-time for this mode, because the depletion of this set of shots does it for us
								]",

	process_scattershot: "commands :: 	[
									if(cycle - _time_started_current_scattershot_arc > _current_shattershot_arc_duration, 
										if(_scattershot_stall_timer > 0,
											[if(_scattershot_stall_timer = lib.math.round(scattershot_stall_duration/2), spawn_scattershot_instance), add(_scattershot_stall_timer, -1)],
											[consider_doing_another_scattershot]
										)
									),
								]",

	consider_doing_another_scattershot: "commands :: [ //debug('consider_doing_another_scattershot ' + cycle),
									if(_remaining_scattershot_shot_count = 0, pick_random_behavior, begin_individual_scattershot_arc)
								]",

	begin_individual_scattershot_arc: "commands :: [
									animate(me, {
											rotate: rotate + approximate_scattershot_arc_length * rot_dir,
										},{
											duration: arc_duration,
									}),
	
									set(_current_shattershot_arc_duration, arc_duration),
									set(_scattershot_stall_timer, scattershot_stall_duration),
									set(_rotation_direction, rot_dir),
									add(_remaining_scattershot_shot_count, -1),
									set(_time_started_current_scattershot_arc,cycle), 
								]
									where arc_duration = lib.math.round( base_scattershot_duration + 1d(scattershot_duration_variance) )
									where rot_dir = if(1d2=2, -1, 1)",

	
		#------ timing controls ------#
	scattershot_stall_duration: "2",
	approximate_scattershot_arc_length: "choose([20.0, 40.0, 60.0, 80.0, 100.0, 120.0, 0, 360.0 ])",
	base_scattershot_duration: "decimal :: if(me.hitpoints > me.max_hitpoints/2, 30.0, if(me.hitpoints > me.max_hitpoints/4, 22.0, 16.0))",
	scattershot_duration_variance: "base_scattershot_duration * 1.0/5.0",
								
		#------ fire shot ------#
	spawn_scattershot_instance: "commands ::	[
													spawn_large_shot('gazer_boss.scatter_shot', 300),
													sound('wobbly-projectile'+1d3+'.wav'),
												]
													",
	spawn_large_shot: "def(string shot_type, decimal shot_speed) -> commands [
													spawn(shot_type, shot_offset.x, shot_offset.y, {velocity_x: shot_velocity.x, velocity_y: shot_velocity.y}),
													spawn('gazer_boss.scatter_shot_bloom', bloom_offset.x, bloom_offset.y, {rotate: rotate}),
												]
													where shot_velocity = { x: decimal, y: decimal } :: { x: shot_speed * cos(shot_angle), y: shot_speed * sin(shot_angle)}
													where bloom_offset =  { x: decimal, y: decimal } :: { x: mid_x + bloom_dist * cos(shot_angle), y: mid_y + bloom_dist * sin(shot_angle)}
													where shot_offset =  { x: decimal, y: decimal } :: { x: mid_x + shot_dist * cos(shot_angle), y: mid_y + shot_dist * sin(shot_angle)}
													where bloom_dist = 43
													where shot_dist = 49
													where shot_angle = rotate-90
												",
			

		#------ variables ------#
	_scattershot_stall_timer: { type: "int", init: "0" },
	_remaining_scattershot_shot_count: { type: "int", init: "0" },
	_current_shattershot_arc_duration: { type: "int", init: "0" },
	_time_started_current_scattershot_arc: { type: "int", init: "0", persistent: false },



												
														
#-------------------------- laser mode --------------------------#
		#------ charging laser ------#
	_laser_chargeup_duration: { type: "int", init: "0" },
	_time_started_laser_chargeup: { type: "int", init: "0", persistent: false },
		
	begin_charging_laser: "commands :: [
									set(_laser_chargeup_duration, 100),
									set(_state, enum charging_laser),
									set(_time_started_laser_chargeup,cycle),
									
									add_object(_laser_charge_bloom),
									fire_event(_laser_charge_bloom,'create'),
									set(_laser_charge_bloom.mid_x, mid_x + bloom_offset.x),
									set(_laser_charge_bloom.mid_y, mid_y + bloom_offset.y),
									set(_laser_charge_bloom.rotate, rotate),
									spawn('effects_attache_glow_source', mid_x, mid_y, {
										time_to_die: 0,
										parent: me,
										flicker_type: enum window_light,
										graphics: enum gazer_flare,
										scale_factor: 0.1,
										base_alpha: 20,
										custom_relative_pos_default: {mid_x: bloom_offset.x, mid_y: bloom_offset.y},
										zorder: 50,
									},[
										animate(child, {base_alpha: 180}, {duration: 40, easing: lib.math.ease_in_quint}),
										animate(child, {scale: 0.3}, {duration: 100, easing: lib.math.ease_in_quint}),
										schedule(100, remove_object(child)),
									])
								]",

	process_charging_laser: "commands ::	[
												if(cycle - _time_started_laser_chargeup > _laser_chargeup_duration, begin_laser),
												if(cycle % 10 = 0 and (cycle - _time_started_laser_chargeup < _laser_chargeup_duration * 3/5.0),
													map(chargeup_particle_positions, spawn('gazer_boss.laser_chargeup_particle', value.x, value.y, {_target_obj: _laser_charge_bloom}))
												)
											]",

	chargeup_particle_positions: "lib.math.randomized_even_spread_radial_distribution({count: 4, min_angle: 0, max_angle: 359, angle_delta_scale: 1.0, origin: {x: me.mid_x, y: me.mid_y}, min_length: 200, max_length: 300})",

	bloom_offset: "{ x: decimal, y: decimal } :: { x: beam_dist * cos(beam_angle), y: beam_dist * sin(beam_angle)}
								where beam_dist = 38
								where beam_angle = me.rotate - 90",



		#------ firing mah lazor ------#
	_current_laser_duration: { type: "int", init: "0" },
	_time_started_laser: { type: "int", init: "0", persistent: false },

	begin_laser: "commands :: [
									set(_current_laser_duration, lib.math.round( base_laser_duration - (laser_duration_variance/2.0) + 1d(laser_duration_variance) )),
									set(_rotation_direction, if(1d2=2, -1, 1)),
									set(_state, enum attack_laser),
									set(_time_started_laser,cycle), 
									add_object(_laser_beam),
									_laser_beam.do_setup,
								]",
	stop_laser: "[
					remove_object(_laser_beam),
					pick_specific_behavior(begin_aggro_mooks)
				]",
	
	process_laser: "[
						add(rotate, laser_rotation_speed),
						if(cycle - _time_started_laser > _current_laser_duration, stop_laser),
					]",

	laser_rotation_speed_max: "decimal :: 1.1",
	laser_rotation_speed: "if(cycle - _time_started_laser < laser_deceleration_timeslice, 
						lib.math.constrain(0, laser_rotation_speed_max*((cycle - _time_started_laser)/laser_deceleration_timeslice), laser_rotation_speed_max),
						if(_time_started_laser + _current_laser_duration - cycle < laser_deceleration_timeslice,
							lib.math.constrain(0, laser_rotation_speed_max*((_time_started_laser + _current_laser_duration - cycle)/ laser_deceleration_timeslice), laser_rotation_speed_max),
							laser_rotation_speed_max
						)
					) * _rotation_direction",


	approximate_laser_arc_length: "360.0",
	base_laser_duration: "decimal :: (approximate_laser_arc_length / laser_rotation_speed_max) * (1 + (2.0 * laser_deceleration_timeslice_ratio))",
	laser_deceleration_timeslice: "decimal :: base_laser_duration * laser_deceleration_timeslice_ratio",
	laser_deceleration_timeslice_ratio: "decimal :: 1/6.0",
	laser_duration_variance: "decimal :: base_laser_duration * 1.0/5.0",
	
	
#-------------------------- spawn mooks mode --------------------------#
	begin_spawn_mooks: "commands :: [
									set(_state, enum spawn_mooks),
									set(_current_phase_random_timer, 100+1d50)
							]",

	process_spawn_mooks: "commands :: 	[
									add(rotate, sin(cycle*7) * 0.05 + sin(cycle*3) * 0.15 + sin(cycle*2.5) * 0.25),
									if(cycle - _phase_started_at = 50, spawn_mooks),
									if(cycle - _phase_started_at = _current_phase_random_timer, pick_random_behavior)
								]",

								
	/* unused */ single_mook_position: "lib.math.random_radial_pos({min_angle: 0, max_angle: 359, angle_delta_scale: 1.0, origin: {x: me.mid_x, y: me.mid_y}, min_length: 250, max_length: 350})",

	mook_positions: "def(int mook_count) -> [{x:decimal, y:decimal}]
			lib.math.randomized_even_spread_radial_distribution({count: mook_count, min_angle: 0, max_angle: 359, angle_delta_scale: 0.10, origin: {x: me.mid_x, y: me.mid_y}, min_length: 350, max_length: 375})",

	existing_mooks: "[obj gazer_small_bare|obj gazer_small_bare_harmless] :: ([obj gazer_small_bare|obj gazer_small_bare_harmless] <- filter(level.chars, value is obj gazer_small_bare or value is obj gazer_small_bare_harmless))",
	existing_non_aggroed_mooks: "filter(existing_mooks, value._target_obj != level.player)",
	max_mook_count: "5",
	should_spawn_mooks: "size(existing_non_aggroed_mooks) <= max_mook_count / 2",

	spawn_mooks:	"[
						map(mook_positions(max_mook_count),
							if(index = 1,
								spawn('gazer_small_bare_harmless', mid_x, mid_y, {facing: if(1d2=2,1,-1)}, [child.fly_to([{x: lib.math.round(value.x), y: lib.math.round(value.y)}])]),
								spawn('gazer_small_bare', mid_x, mid_y, {facing: if(1d2=2,1,-1)}, [child.fly_to([{x: lib.math.round(value.x), y: lib.math.round(value.y)}])]),
							)
						),
						sound('gazer-boss-spawn-gazerlet'+1d4+'.wav'),
					]",


#-------------------------- mook spiral attack --------------------------#
	begin_spiral_attack: "commands :: [
									set(_state, enum spiral_attack),
									set(_current_phase_random_timer, 50 + (100 + 640) + (50 + 1d75) )
							]",

	process_spiral_attack:  "commands :: 	[
									if(cycle - _phase_started_at = 50, start_mook_spiral_animation),
									if((cycle - _phase_started_at) % 200 = 0, prepare_aimed_shockwave_shot),
									if(cycle - _phase_started_at = _current_phase_random_timer, pick_random_behavior)
								]",
								
		#-------------------------- stuff for the shots the boss fires during the spiral attack --------------------------#

	prepare_aimed_shockwave_shot:  "commands :: 	[
									animate(me, {
											rotate: angle_to_player + 90,
										},{
											duration: arc_duration,
											on_complete: fire_aimed_shockwave_shot
									}),
								]
									where arc_duration = 30
									where angle_to_player = lib.math.angle(me, level.player)",

	fire_aimed_shockwave_shot: "commands ::	[ 
									; spawn_large_shot('gazer_boss.shockwave_shot', 700),
									sound('wobbly-projectile'+1d3+'.wav')
								]",

		#-------------------------- stuff for the actual spiral attack --------------------------#
		
	start_mook_spiral_animation: "commands :: [
								schedule(10, _spiral_attack_sound_loop.turn_on),
								schedule(100, sound_falloff('gazer-spin-windup.wav')),

								map(existing_non_aggroed_mooks, [
									set(value.animation, 'burning'),
									(commands <- value.flame_on),
									animate(value, {
											mid_x: location.x,
											mid_y: location.y
										},{
											duration: 100,
											name: 'pull_inwards',
											replace_existing: false,
											sleep: true,
											//on_complete: do_mook_spiral_animation  //<-- scrap this; it's giving us 8 copies
									})
										where location = _to_point([decimal, decimal] <- orbit(mid_x, mid_y, angle, dist))
										where _to_point = def([decimal, decimal] pt) -> {x: int, y: int} {x: lib.math.round(pt[0]), y: lib.math.round(pt[1])}
										where angle = (index * (360/size(existing_non_aggroed_mooks))) 
										where dist =  125 + 175 * 0
									]);
									do_mook_spiral_animation
								]",

	do_mook_spiral_animation: "commands :: [map(existing_non_aggroed_mooks,
										[
											internal_mook_spiral(value, index),
											schedule(640, [set(value.animation,'fly'), (commands <- value.flame_off)])
										]
									),
									schedule(640, do_mook_spiral_animation_recovery),
									schedule(600, sound_falloff('gazer-spin-end.wav'))
								]
	
					where internal_mook_spiral = def(obj gazer_small_bare|obj gazer_small_bare_harmless the_mook, int __index) -> commands
					
					[
						set(the_mook.spiral_info, {
							mid_x: me.mid_x,
							mid_y: me.mid_y,
							__index: __index,
							num_mooks: size(existing_non_aggroed_mooks),
						}),
						set(the_mook.spiral_anim, 0),
						animate(the_mook, {
							spiral_anim: 640,
						}, {
							duration: 640,
						})
					]
					",

	do_mook_spiral_animation_recovery: "commands :: [map(existing_non_aggroed_mooks,
											animate(value, {
													mid_x: positions[index].x,
													mid_y: positions[index].y
												},{
													duration: 100,
													name: 'restore',
													replace_existing: false,
											})
										) where positions = mook_positions(size(existing_non_aggroed_mooks)),
										_spiral_attack_sound_loop.turn_off,
									]", 

	

	


#-------------------------- vars --------------------------#
	_behavior_mode_prng:	{ type: "class pseudo_random_numbers", init: "construct('pseudo_random_numbers',{_size_of_pool:4, _pool_size_multiplier: 1})", persistent: false },

	_spiral_attack_sound_loop: { type: "obj sound_source_individual_attache", init: "object('sound_source_individual_attache', mid_x, mid_y, {parent: me, sound_file:'gazer-spin-loop.wav', starts_with_sound_on: false})" },

	_phase_started_at: { type: "int", init: "0", persistent: false },
	_current_phase_random_timer: { type: "int", init: "0", persistent: false },
	_rotation_direction:  { type: "int", init: "1" },
	_laser_charge_bloom: { type: "obj gazer_boss.laser_chargeup_bloom", init: "object('gazer_boss.laser_chargeup_bloom', mid_x, mid_y, facing)" },
	_laser_beam: { type: "obj gazer_boss.beam", init: "object('gazer_boss.beam', mid_x, mid_y, {parent: me, time_to_die: 1})" },
	_state: { type: "GazerBossBehaviorModeTypes", init: "enum idle", persistent: false },
},
		
on_create:  "[setup, begin_spawn_mooks, add_object(_spiral_attack_sound_loop)]",

on_process: "process_behavior",

on_end_anim: "animation('normal')",

animation: [
{
	"@base": true,
	image: "enemies/gazer-boss1.png",
	attack_area: "all",
	body_area: "all",
	no_remove_alpha_borders: true,
	pad: 2,
},
{
	id: "normal",
	rect: [1,1,125,125],
	frames:5,
	duration: 5,
	reverse: true,
},
],

object_type: [
	{
		id: "beam",
		prototype: ["effects_attache"],
		always_active: true,
		serializable: false,
		zorder: 20,
		
		properties: {
			texture_offset: "0",
			beam_length: "800",
			
			draw_w: "img_w/2",
			pupil_offset: "74.0",
			width_coefficient: "img_w/pupil_offset * (decimal(0.5*img_h)/img_w)", //<- this is some black magic, here.   
			
			beam_angle: "parent.rotate - (90 - parent.laser_rotation_speed) asserting parent is obj gazer_boss", //single frame of delay

			offset: "{ x: decimal, y: decimal } :: { x: length * cos(beam_angle),
													 y: length * sin(beam_angle) - (beam_length - (width_coefficient) * pupil_offset)} where length = (pupil_offset + beam_length)", 

			glow_offset: "{ x: decimal, y: decimal } :: {
														x: pupil_offset * 0.6 * cos(beam_angle),
													 	y: pupil_offset * 0.6 * sin(beam_angle)
													 }", 


			update_attache: "[
								set(_beam_damage_provider.beam_angle, beam_angle),
								set(_beam_damage_provider.beam_distance, beam_length + pupil_offset)
							]",

			update_draw_positions: "[
									update_attache,
									//debug(decimal(0.5*img_h)/img_w),
									//debug(draw_w/decimal(img_h)),
									_beam_root.update_draw_positions,
									set(relative_x, offset.x),
									set(relative_y, offset.y),
									set(_glow.relative_x, glow_offset.x),
									set(_glow.relative_y, glow_offset.y),
									set(rotate, parent.rotate),
									set(draw_area, [0, texture_offset, draw_w, beam_length])
								] asserting parent != null",
			
								


			_beam_damage_provider: { type: "obj damage_beam_attache", init: "object('damage_beam_attache', mid_x, mid_y, {parent: me.parent, relative_x: 0, relative_y: 0})" },
			_beam_root: { type: "obj gazer_boss.beam_root", init: "object('gazer_boss.beam_root', mid_x, mid_y, {parent: me.parent, relative_x: 0, relative_y: 0})" },
			_glow: {
				type: "obj effects_attache_glow_source",
				init: "object('effects_attache_glow_source', mid_x, mid_y, {
								time_to_die: 0,
								parent: me.parent,
								flicker_type: enum window_light,
								graphics: enum gazer_flare,
								scale_factor: 0.60,
								base_alpha: 180,
								zorder: 50,
							})",
			},

			#-------------------------- effects_attache overrides --------------------------#
			additional_death_cleanup: "commands :: [remove_object(_beam_damage_provider),remove_object(_beam_root),remove_object(_glow)]",
			do_setup: "commands :: [
							initialize_position,
							add_object(_glow),
							add_object(_beam_damage_provider),
							add_object(_beam_root),
							set(_beam_root.mid_x, _parent_obj.mid_x),
							set(_beam_root.mid_y, _parent_obj.mid_y),
							set(_beam_damage_provider.mid_x, _parent_obj.mid_x),
							set(_beam_damage_provider.mid_y, _parent_obj.mid_y),
							spawn('sound_source_individual_attache',mid_x,mid_y,{parent:_beam_damage_provider, sound_file:'extended-laser.wav'}),
						
							; update_draw_positions
						]",
		},

		
		on_process: "update_draw_positions",
		
		on_end_anim: "animation('normal')",
		
		animation: [{
			id: "normal",
			image: "enemies/gazer-boss-beam1.png",
			rect: [0,0,72,31],
			frames: 6,
			reverse: true,
			pad: 0,
			duration: 2,
			no_remove_alpha_borders: true,
		}],

	},
	{
		id: "beam_root",
		always_active: true,
		serializable: false,
		zorder: 20,
		properties: {
			offset: "{ x: decimal, y: decimal } :: { x: beam_dist * cos(beam_angle), y: beam_dist * sin(beam_angle)}
								where beam_dist = 38",
			beam_angle: "parent.rotate - (90 - parent.laser_rotation_speed) asserting parent is obj gazer_boss", //single frame of delay

			update_draw_positions: "commands :: [
										set(relative_x, me.offset.x),
										set(relative_y, me.offset.y),
										set(rotate, me.parent.rotate),
									]  asserting me.parent != null",
		},

		on_end_anim: "animation('normal')",

		animation: [{
			id: "normal",
			image: "enemies/gazer-boss-beam-root1.png",
			rect: [0,0,72,39],
			frames: 6,
			reverse: true,
			pad: 0,
			duration: 2,
			no_remove_alpha_borders: true,
		}],

	},
	{
		id: "shockwave_shot",
		prototype: ["shot"],
		always_active: true,
		serializable: false,
		zorder: 20,

		solid_area: [10,10,22,22],

		properties: {
			death_effects: "def(string type) -> commands [
				spawn('gazer_boss.shockwave_zoomer', mid_x, mid_y, 1),
				spawn('gazer_boss.shockwave_zoomer', mid_x, mid_y, {_moving_clockwise: false})
			]",
		},
		
		on_process: "add(rotate, 3d2)",
		on_end_anim: "animation('normal')",

		on_create: "spawn('effects_attache_glow_source', mid_x, mid_y, {
								time_to_die: 0,
								parent: me,
								flicker_type: enum window_light,
								graphics: enum gazer_flare,
								scale_factor: 0.17,
								base_alpha: 160
							})",

		
		animation: [{
			id: "normal",
			image: "enemies/gazer-boss-shot.png",
			rect: [0,0,31,31],
			frames: 8,
			frames_per_row: 4,
			reverse: true,
			pad: 0,
			duration: 2,
			no_remove_alpha_borders: true,
		}],

	},
	
	{
		id: "scatter_shot",
		prototype: ["shot"],
		always_active: true,
		serializable: false,
		zorder: 20,

		
		on_process: "add(rotate, 3d2)",
		on_end_anim: "animation('normal')",

		on_create: "spawn('effects_attache_glow_source', mid_x, mid_y, {
								time_to_die: 0,
								parent: me,
								flicker_type: enum window_light,
								graphics: enum gazer_flare,
								scale_factor: 0.17,
								base_alpha: 160
							})",
		
		animation: [{
			id: "normal",
			image: "enemies/gazer-boss-shot.png",
			rect: [0,0,31,31],
			frames: 8,
			frames_per_row: 4,
			reverse: true,
			pad: 0,
			duration: 2,
			no_remove_alpha_borders: true,
		}],

	},
	{
		id: "scatter_shot_bloom",
		always_active: true,
		serializable: false,
		zorder: 21,

		
		on_end_anim: "die()",
		
		animation: [{
			id: "normal",
			image: "enemies/gazer-boss-shot.png",
			rect: [0,64,47,95],
			frames: 8,
			frames_per_row: 4,
			pad: 0,
			duration: 3,
			no_remove_alpha_borders: true,
		}],

	},
	{
		id: "laser_chargeup_bloom",
		always_active: true,
		serializable: false,
		zorder: 22,
		prototype: ["standard_values"],
		properties: {
			_anim_counter: { type: "decimal", init: "0" },
			
		},

		on_create: "[animation('normal'), sound_falloff('laser-charge.wav')]",
		on_end_normal_anim:	"if(_anim_counter < 5,
								[animation('normal'), add(_anim_counter, 1)],
								[set(_anim_counter,	0), animation('outro')]
							)",
		on_end_outro_anim: "remove_object(me)",
		
		animation: [{
			id: "normal",
			image: "enemies/gazer-boss-shot.png",
			rect: [144,128,191,175],
			frames: 4,
			frames_per_row: 2,
			pad: 0,
			duration: 2,
			reverse: true,
			no_remove_alpha_borders: true,
		},{
			id: "outro",
			image: "enemies/gazer-boss-shot.png",
			rect: [0,128,47,255],
			frames: 3,
			pad: 0,
			duration: 2,
			no_remove_alpha_borders: true,
		}],

	},
	{
		id: "laser_chargeup_particle",
		always_active: true,
		serializable: false,
		zorder: 20,

		properties: {
			_angle_to_target: "decimal :: lib.math.angle(me, _target_obj)",
			attract_duration: "decimal :: 72.0",
			attraction_elapsed: "int :: (level.cycle - _started_attracting_at_cycle) asserting _started_attracting_at_cycle is int",
			fraction_into_attraction: "decimal :: attraction_elapsed/attract_duration",
			ang_offset: "attraction_elapsed * 0.05",
			_started_attracting_at_cycle: { type: "int|null", init: "level.cycle" },
			_original_length: { type: "decimal", init: "0" },

			_target_obj: { type: "custom_obj", dynamic_initialization: true },

			process_attract: "commands ::
					[
						set(mid_x, _target_obj.mid_x - x_diff) where x_diff = ((1.0 - fraction_into_attraction) * cos(_angle_to_target + ang_offset) * _original_length),
						set(mid_y, _target_obj.mid_y - y_diff) where y_diff = ((1.0 - fraction_into_attraction) * sin(_angle_to_target + ang_offset) * _original_length),
				
						if(level.cycle - _started_attracting_at_cycle > attract_duration, remove_object(me)),
					] asserting _started_attracting_at_cycle is int",
		
		},
		
		on_create: "set(_original_length, lib.math.length(me,_target_obj))", 

		on_process:  "process_attract",
		
		on_end_anim: "[animation('normal'),/*debug(cycle)*/]",

		
		animation: [{
			id: "normal",
			image: "enemies/gazer-boss-shot.png",
			rect: [128,0,142,14],
			frames: 6,
			frames_per_row: 3,
			reverse: true,
			pad: 0,
			duration: 6,
			no_remove_alpha_borders: true,
		}],

	},
	{
		id: "shockwave_zoomer",
		always_active: true,
		serializable: false,
		zorder: 20,
		prototype: ["ground_hugger"],

		properties: {
			taxonomy: "TaxonomyType :: enum neutral",
			attack_damage: "1",
		
			speed: "10.0",
			set_initial_position: "execute(me, if(new_pos = null,
										debug('could not find ground to attach the zoomer to'),
										[set(mid_x, new_pos.x),set(mid_y, new_pos.y-1)]
									)
			
				where new_pos = if(wall_pos_left != null,
									wall_pos_left,
									if(floor_pos != null,
										floor_pos,
										if(wall_pos_right != null,
											wall_pos_right,
											if(ceil_pos != null,
												ceil_pos,
												null
											)
										)
									)
								)
			
				where ceil_pos = find_ceiling(mid_x,mid_y,search_depth)
				where wall_pos_left = find_wall(mid_x,mid_y,search_depth, -1)
				where wall_pos_right = find_wall(mid_x,mid_y,search_depth, 1)
				where floor_pos = find_floor(mid_x,mid_y,search_depth)
				where search_depth = 150
				
				)", 

			my_particles: { type: "obj legacy_particle_attache", init: "object('legacy_particle_attache', mid_x, mid_y, {_particle_type: 'gazer_boss_zoomer_trail', parent: me, time_to_die: 20, zorder: me.zorder - 1})", },

		},
		on_create: "[
						spawn('effects_attache_glow_source', mid_x, mid_y, {
								time_to_die: 0,
								parent: me,
								flicker_type: enum window_light,
								graphics: enum gazer_flare,
								scale_factor: 0.15,
								base_alpha: 160,
								zorder: 50,
							}),
						set_initial_position,
						schedule(100, force_death()),
						add_object(my_particles),
					]",
		on_process: "[move_forward]",
		on_end_anim: "[animation('normal'),set(rotate, 1d360)]",



		animation: [{
			"@base": true,
			id: "normal",
			image: "enemies/gazer-boss-shot.png",
			frames: 1,
			pad: 0,
			duration: 1,
			no_remove_alpha_borders: true,
			attack_area: "all",
		},{
			rect: [192,64,211,83],
			frames: 4,
			frames_per_row: 2,
		},{
			rect: [234,64,253,83],
		},{
			rect: [234,85,253,104],
		},{
			rect: [234,106,253,125],
		}],
	},
	
	{
		id: "corpse",
		always_active: true,
		prototype: ["standard_values"],

		on_create: "[set(level.focus, [me]),sinusoidal_transition({period: 200, _init_theta:1.0, _length_theta:-1.0, addend:0, coefficient:255, obj:me, aspect:'alpha'})]",
		
		on_end_anim: "[set(level.focus, []), if(controller, fire_event(controller, 'postfight_outro')) where controller = get_object(level,'postfight_controller'), die()]",
		animation: [
		{
			"@base": true,
			image: "enemies/gazer-boss1.png",
			body_area: "all",
			no_remove_alpha_borders: true,
			pad: 2,
		},
		{
			id: "normal",
			rect: [1,1,125,125],
			frames:1,
			duration: 200,
			reverse: true,
		},
		],
	},		
	{
		id: "body_spawn_animation",
		prototype: ["transient_object"],

		properties: {
			process_spawning_particles: "commands ::	[
												if(cycle % 10 = 0,
													map(chargeup_particle_positions, spawn('gazer_boss.laser_chargeup_particle', value.x, value.y, {_target_obj: me}))
												)
											]",

			chargeup_particle_positions: "lib.math.randomized_even_spread_radial_distribution({count: 4, min_angle: 0, max_angle: 359, angle_delta_scale: 1.0, origin: {x: me.mid_x, y: me.mid_y}, min_length: 200, max_length: 300})",

		
		},


		on_create: "[
						set(alpha,0),
						map(range(duration), schedule(value, ; process_spawning_particles)),
						map(range(duration),
							schedule(value, [
								set(brightness, lib.math.round(255 * 9 * value/decimal(duration))),
								set(alpha, lib.math.round(255 * value/decimal(duration)))
							])
						),
						schedule(260,
							spawn('effects_attache_glow_source', mid_x, mid_y, {
								time_to_die: 0,
								parent: me,
								flicker_type: enum window_light,
								graphics: enum gazer_flare,
								scale_factor: 0.65,
								base_alpha: 20
							},[
								animate(child, {base_alpha: 250}, {duration: 40, easing: lib.math.ease_in_quint}),
								schedule(40,
									animate(child, {scale: 7.0}, {duration: 100, easing: lib.math.ease_in_quint})
								),
								schedule(191, die())
							])
						),
						schedule(duration, spawn('gazer_boss', mid_x, mid_y, facing)),
						schedule(duration, remove_object(me))

					] where duration = 450",

		animation: [
		{
			"@base": true,
			image: "enemies/gazer-boss1.png",
			attack_area: "all",
			body_area: "all",
			no_remove_alpha_borders: true,
			pad: 2,
		},
		{
			id: "normal",
			rect: [1,1,125,125],
			frames:1,
			duration: 5,
			reverse: true,
		},
		],
	}
	
],

}
