{
id: "mushroom_boss",
prototype: ["hittable"],
always_active: true,
/*editor_info: {
	category: "boss",
},*/

properties: {
	#-------------------------- constructor/destructor logic --------------------------#
		epihittable_obj_constructor: "commands :: [
			if(level.in_editor,
				[
					set_draw_size(1.0),
					set(alpha,255),
				],
				[
					set_draw_size(0.0),
					set(alpha,0),
				],
			),
			animation('sprout'),
		]",


	#--------------------------  settings --------------------------#
		attack_damage:  "if(_sprouted, kill_anything, 0)",
		team:  			"if(_sprouted, 'evil', 'evil_harmless')",
	
		title: "~Mushroom Boss~",
		description: "~The heart of the corruption in the forest. Like many mushrooms, these are actually all one organism, joined together by underground tendrils. They must spread a chillingly long way...~",
		taste: "~Of dust and death and mycological chemicals!~",

		max_shots: "if(higher_difficulty, 3, 1)",
		should_shoot_homing_shot: "(size(filter(level.chars, value.type = 'mushroom_boss.big_shot')) <= max_shots)",

		max_babies: "if(higher_difficulty, 8, 4)",
		should_spawn_baby_mushroom: "(size(filter(level.chars, value.type = 'mushroom_jellyfish')) <= max_babies)",

		begin_chargeup: "execute(me, animation('chargeup') )",
		begin_idle: "execute(me, [animation('normal')])",
		begin_attack_homing: "execute(me, [if(should_shoot_homing_shot,animation('attack_homing'),begin_idle)])",
		begin_attack_spawn: "execute(me, [if(should_spawn_baby_mushroom,animation('attack_spawn'),begin_idle)])",
		begin_attack_stream: "execute(me, animation('attack_stream'))",
		begin_guard: "execute(me, [animation('enter_guard'),set(_guard_counter,3)])",
		set_behavior: "def(string choice) -> commands execute(me, [switch(choice,
						'chargeup', begin_chargeup,
						'attack_spawn', [begin_idle, schedule(1d100,begin_attack_spawn)],
						'attack_homing', [begin_idle, schedule(1d100,begin_attack_homing)],
						'attack_stream', [begin_idle, schedule(1d100,begin_attack_stream)],
						'guard', begin_guard,
			), set(me.behavior, choice)])",
		
		controller_obj: "(obj mushroom_boss.controller <- filter(level.chars, value.type = 'mushroom_boss.controller')[0])",
	
		taxonomy: "TaxonomyType :: enum mushroom",
		custom_damage_table: "{
			enum neutral: 1.0,
			enum fire: 1.0,
			enum energy: 0.5,
			enum arcane: 0.25,
			enum acid: 0.0,
			enum impact: 1.0,
			enum impale: 1.0,
			enum lacerate: 1.0
		}",
	
	
		death_fx_type: "'mushroom-boss'",
		corpse_object_type: "'${me.type}.corpse'",
		get_hit_by: "def(obj hittable collide_with) -> commands [
			if(not me.is_invincible and final_damage_amount(collide_with, collide_with.attack_damage) > 0, 
				[controller_obj.get_hit_by(collide_with), display_hurt_visuals(collide_with, collide_with.attack_damage)],
				[display_hurt_visuals(collide_with, 0)]
			),
		]",
									
		is_invincible: "bool :: ((not me.animation = 'chargeup') or proto_conds) where proto_conds = (bool(invincible) or level.in_dialog or is_invincible_posthit)",

		play_object_specific_pain_vocalization: "def(DamageType damage_type, damage_amount) -> commands if(damage_amount > 0, sound('mushroom-boss-hurt.wav'), sound('mushroom-boss-resist.wav'))",
									
		set_draw_size: "def(decimal _scale) -> commands set(custom_draw, [0.0,1.0,2.0,3.0, [160-160*_scale,320-320*_scale],[-160+160*_scale,320-320*_scale],[-160+160*_scale,0],[160-160*_scale,0]])",

	#--------------------------  vars --------------------------#
		behavior: { type: "string", default: "", persistent: false },
		_sprouted: { type: "bool", default: false, persistent: false },
		_guard_counter: { type: "int", default: 3, persistent: false },
	},
		
	on_end_normal_anim:  "[set(facing,facing),animation('normal')]",
	on_end_attack_homing_anim:  "begin_idle",
	on_end_attack_stream_anim:  "animation('attack_stream')",
	on_process_attack_stream: "if(level.cycle%10=0,spawn(type+'.stream_shot',mid_x,mid_y - 150,1,[set(child.velocity_y, -500 - 1d1000),set(child.velocity_x,1d500-250)]))",

	on_end_chargeup_anim:  "[animation('chargeup')]",
	on_end_guard_anim:		"if(_guard_counter <= 0, animation('exit_guard'), [animation('guard'),add(_guard_counter,-1)])",
	on_end_enter_guard_anim: "animation('guard')",
	on_end_exit_guard_anim: "animation('normal')",
	on_end_sprout_anim: "null",
	on_end_exit_sprout_anim: "animation('normal')",

	on_shoot: "[sound_falloff('mushroom-boss-shot'+1d2+'.wav',500),sound_falloff('mushroom-boss-spore-shot'+1d3+'.wav'),sound_falloff('squishy-shot'+1d5+'.wav'),spawn(type+'.big_shot', mid_x, y, 1, set(child.velocity_y, -500 - 1d400))]",

	on_spawn_baby: "[
			sound('Jellyfish-Spawn'+1d2+'.wav'),
			add_object(obj),
			set(obj.velocity_y, 1500*up),

			] where obj = object('mushroom_jellyfish', mid_x, mid_y+(180*upside_down), 
			{
				_init_x: me.mid_x + 1d400-200, 
				_init_y: me.mid_y - 300,
				_desired_height: me.mid_y - 300,
				_x_bound: level_x,
				_x2_bound: level_x + level_w,
				_dive_height: if(upside_down = 1, me.mid_y + 500,me.mid_y + 100),
				_behavior: 'climb'
			})
				where level_x = level.dimensions[0]
				where level_y = level.dimensions[1]
				where level_w = level.dimensions[2]
				where level_h = level.dimensions[3]
		
			", 


	on_sprout: "[set(alpha,255),map(range(150),schedule(value, set_draw_size((1.0/150.0)*value))),schedule(50,set(animation,'exit_sprout')),schedule(150,set(_sprouted,true))]",


	on_process: "if(_sprouted, ((([set(custom_draw,
			[0.0,1.0,
			1.2,1.4,1.5,1.7,
			2.0,3.0,
			3.3,3.5,3.6,3.8,
			[upper_left[0]*scl(0.7),upper_left[1]*scl(0.7)],[upper_right[0]*scl(0.7),upper_right[1]*scl(0.7)],
			[upper_right[0]*scl(1.1),upper_right[1]], [upper_right[0]*scl(0.4),upper_right[1]], [upper_right[0]*scl(0.1),upper_right[1]],still,
			still,still,
			still,[upper_left[0]*scl(0.1),upper_left[1]], [upper_left[0]*scl(0.4),upper_left[1]], [upper_left[0]*scl(1.1),upper_left[1]],
			])]
		
			) where scl = def(decimal factor) sin(factor*90)
			where upper_left = [offset_x,offset_y]
			where upper_right = [offset_x,offset_y2]
			where still = [0,0]
		
			)
		
			where offset_x = ((sin(cycle*5)*150)*0.06) * dampen
			where offset_y = ((sin(    cycle*3)*80)*0.04 + y_bob) * dampen
			where offset_y2 = -((sin(40+ cycle*3)*80)*0.04 + y_bob) * dampen
		
			) where y_bob = sin(cycle*10)*5 * dampen * dampen
			where dampen =  if(animation = 'guard', 0.5, 1.0)
		
			) ",

	animation: [
	{
		"@base": true,
		image: "enemies/mushroom-boss1.png",
		palettes: "@include data/palettes.cfg:forest_palettes",
		feet_x: 80,
		attack_area: [0,60,159,159],
		body_area: "all",
	},
	{
		id: "normal",
		rect: [0,0,159,159],
		frames:5,
		reverse: true,
		duration: 3,
		feet_y: 160,
	},
	{
		id: "chargeup",
		image: "enemies/mushroom-boss2.png",
		rect: [0,0,159,175],
		frames:5,
		reverse: true,
		duration: 3,
		feet_y: 176,
		attack_area: [0,76,159,176],
	},
	{
		id: "attack_homing",
		image: "enemies/mushroom-boss3.png",
		rect: [0,0,159,175],
		frames:4,
		frames_per_row:2,
		reverse: true,
		duration: 3,
		feet_y: 176,
		events: "6:shoot",
		attack_area: [0,76,159,176],
	},
	{
		id: "attack_spawn",
		image: "enemies/mushroom-boss3.png",
		rect: [0,0,159,175],
		frames:4,
		frames_per_row:2,
		reverse: true,
		duration: 3,
		feet_y: 176,
		events: "6:spawn_baby",
		attack_area: [0,76,159,176],
	},
	{
		id: "attack_stream",
		image: "enemies/mushroom-boss3.png",
		rect: [0,0,159,175],
		frames:4,
		frames_per_row:2,
		reverse: true,
		duration: 3,
		feet_y: 176,
		attack_area: [0,76,159,176],
	},
	{
		id: "enter_guard",
		image: "enemies/mushroom-boss4.png",
		rect: [0,0,159,159],
		frames:4,
		frames_per_row: 2,
		duration: 6,
		feet_y: 160,
	},
	{
		id: "exit_guard",
		image: "enemies/mushroom-boss4.png",
		rect: [0,0,159,159],
		frames:4,
		frames_per_row: 2,
		play_backwards: true,
		duration: 6,
		feet_y: 160,
	},
	{
		id: "guard",
		image: "enemies/mushroom-boss4.png",
		rect: [160,160,319,319],
		frames:1,
		play_backwards: true,
		duration: 20,
		feet_y: 160,
	},
	{
		id: "sprout",
		image: "enemies/mushroom-boss5.png",
		rect: [0,0,159,159],
		frames:1,
		duration: 100000,
		feet_y: 160,
	},
	{
		id: "exit_sprout",
		image: "enemies/mushroom-boss4.png",
		rect: [0,0,159,159],
		frames:4,
		frames_per_row: 2,
		play_backwards: true,
		duration: 20,
		feet_y: 160,
	},
],

object_type: [ {
		id: "controller",
		always_active: true,
		hitpoints: 1,
		prototype: ["hittable"],
		team: "'evil'",


		on_begin_fight: "if(not _fight_started,[
							set(me.is_a_boss, true),
							[set(value.alpha, 255) | value <- level.chars, value.type = 'forest_blockage1'],
							set_solid(-704, -192, -576, -32, true),
							set_solid(2304, -320, 2496, -192, true),
							
							title('FIGHT!',200),
							lib.audio.play_music(me,'MushroomBossIntro.ogg'),
							set(_fight_started, true),
							
							sched_next_phase,
							map(stalks, fire_event(value,'sprout'))])",
		
		on_postfight_outro: "schedule(500,[	set(hitpoints,1),
								set(invincible, -1),
								frogatto.do_post_victory_transport('relative-respite.cfg', 'target'),
								frogatto.store_event('mushroom_boss_fight_won',1)
								]) where frogatto = (obj frogatto_playable <- level.player)",
		on_die: "[set(hitpoints,1),set(me.is_a_boss, false)]",
								
		on_do_behavior_change: "[pick_random_behavior,sched_next_phase]",
		
		properties: {
		#-------------------------- constructor/destructor logic --------------------------#
			epihittable_obj_constructor: "commands :: [
				if(level.player.get_stored_event('mushroom_boss_fight_won'), remove_object(me)), 
				set_max_hitpoints({casual: standard_thrown_damage * 3 * 10, challenging: standard_thrown_damage * 3 * 15}),
			]",


			taxonomy: "TaxonomyType :: enum mushroom",
			custom_damage_table: "{
										enum neutral: 1.0,
										enum fire: 1.0,
										enum energy: 0.5,
										enum arcane: 0.25,
										enum acid: 0.0,
										enum impact: 0.0,
										enum impale: 1.0,
										enum lacerate: 1.0
									}",

			is_a_physical_gameplay_object: "false",
			
		#--------------------------  vars --------------------------#
			_has_died: { type: "bool", default: false, persistent: false },
			_fight_started: { type: "bool", default: false, persistent: false },


		#-------------------------- custom death logic --------------------------#
			handle_death: "def(interface {damage_type: DamageType} collide_with) -> commands
											 [map(stalks, bind_command(def() value.force_death()) ),
												clear_dangerous_items,fire_event(me, 'postfight_outro')]",
			
			clear_dangerous_items: "[remove_object(value) | value <- level.chars, value.type in ['mushroom_boss.big_shot','mushroom_boss.stream_shot', 'mushroom_jellyfish']]",

		#-------------------------- attack pattern handling --------------------------#
			sched_next_phase: "schedule(standard_delay, fire_event('do_behavior_change'))",
			standard_delay: "100+1d150",

			stalks: "[obj mushroom_boss] <- filter(level.chars, value.type = 'mushroom_boss')",

			num_chargers: "def(int num_available_slots) -> int 1",  // <-- this is the vulnerable state
			num_attackers_spawning: "def(int num_available_slots) -> int 1",
			num_attackers_homing: "def(int num_available_slots) -> int 1d2-1",
			num_attackers_stream: "def(int num_available_slots) -> int if(higher_difficulty, 1d(num_available_slots)-1, 1d2-1)",
			num_idlers: "def(int num_available_slots) -> int num_available_slots",
			
			make_chargers: "def([string] filled_slots) -> [string] filled_slots + ['chargeup']*num_chargers(size(stalks) - size(filled_slots))",
			make_attackers_spawning: "def([string] filled_slots) -> [string] filled_slots + ['attack_spawn']*num_attackers_spawning(size(stalks) - size(filled_slots))",
			make_attackers_homing: "def([string] filled_slots) -> [string] filled_slots + ['attack_homing']*num_attackers_homing(size(stalks) - size(filled_slots))",
			make_attackers_stream: "def([string] filled_slots) -> [string] filled_slots + ['attack_stream']*num_attackers_stream(size(stalks) - size(filled_slots))",
			make_idlers: "def([string] filled_slots) -> [string] filled_slots + ['guard']*num_idlers(size(stalks) - size(filled_slots))",
			
			behavior_profile: "[string] :: shuffle(make_idlers(make_attackers_stream(make_attackers_homing(make_attackers_spawning(make_chargers([]))))))",
			
			
			pick_random_behavior: "[map(stalks, (obj mushroom_boss <- value).set_behavior( behavior_profile[index] ))/*,debug(behavior_profile)*/]",
			
			
			hurt_velocity_y: 0,
			hurt_velocity_x: 0,
		},
		
		animation: {
			id: "normal",
			image: "enemies/mushroom-boss1.png",
			rect: [0,0,1,1],
		},
		
	},
	{
		id: "stream_shot",
		always_active: true,
		prototype: ["shot"],
		traction_in_air: 1000,
		friction: 1500,
		on_collide_level: "null",
		zorder: "@include data/zorder.cfg:in_front_of_parallax_objects",
		
		on_create: "[
			schedule(100+1d250, force_death()),
			spawn('mushroom_boss.stream_shot_particles', mid_x, mid_y, {facing: facing, parent: me, relative_x: 0, relative_y: 0, time_to_die: 30, initial_spawn_rate: 250 }),
			set(facing, if(1d2=2,1,-1)),
			set(rotate, 1d360),
			spawn('mushroom_boss.big_shot_impact',mid_x,mid_y,facing)
		]",
		on_process: "",
		on_end_anim: "[animation('normal'),set(rotate, 1d360)]",
		
		properties: {
			adjust_size: "set(scale, 1.0 - 0.001 * cycle)",
			attack_damage: "if(higher_difficulty,2,1)",

			death_effects: "def(string type) -> commands [
				spawn('mushroom_boss.big_shot_impact',mid_x,mid_y,facing)
			]",
		},
		
		animation: {
			id: "normal",
			image: "enemies/mushroom-boss-shots.png",
			rect: [1,109,18,126],
			duration: 2,
			frames: 8,
			pad: 3,
			attack_area: "all",
		},
	},
	{
		id: "stream_shot_particles",
		prototype: ["effects_attache"],

		properties: {
			initial_spawn_rate: { type: "int", dynamic_initialization: true },

			do_setup: "add_particles('particles')",
			turn_on: "set(particle_systems['particles'].spawn_rate, initial_spawn_rate)",
			turn_off: "set(particle_systems['particles'].spawn_rate, 0)",
		},

		particle_system: {  /* min/max values are offset by the w/h values of the graphics, since the graphical drawing position is naively centered on xy rather than mid_xy */
			id: "particles",
			type: "simple",
			spawn_rate: 250,
			time_to_live: 28,
			min_x: -50,
			max_x: 20,
			min_y: -50,
			max_y: 20,
			velocity_x: -300,
			velocity_y: -300,
			velocity_x_random: 600,
			velocity_y_random: 600,
		
			#color=255,255,255,255
			#delta_a: 8,
			animation: {
				id: "sparkle",
				image: "enemies/mushroom-boss-shots.png",
				rect: [1,76,30,105],
				pad: 3,
				frames: 7,
				duration: 4,
			},
		},
	},


	{
		id: "big_shot",
		always_active: true,
		prototype: ["shot"],
		traction_in_air: 1000,
		friction: 2000,
		on_collide_level: "null",
		zorder: "@include data/zorder.cfg:in_front_of_parallax_objects",
		
		on_create: "[schedule(200+1d350,die()), add_particles('smoke'),spawn('mushroom_boss.big_shot_impact',mid_x,mid_y,facing)] ",
		on_end_anim: "animation('normal')",
		on_die: "[spawn('mushroom_boss.big_shot_impact',mid_x,mid_y,facing), /*spawn('mushroom_boss.ammo', mid_x, mid_y, {time_spat:level.cycle, animation:'on_back'})*/]",
		
		properties: {
			accel_towards_player: "[set(accel_x, if(level.player.mid_x > mid_x, 20, -20)),set(accel_y, if(level.player.mid_y > mid_y, 20, -20))]",
			adjust_size: "set(scale, 1.0 - 0.001 * cycle)",
			attack_damage: "((400 - me.cycle)/100)",
		},

		on_process: "[accel_towards_player, adjust_size]",

		animation: [
		{
			id: "normal",
			image: "enemies/mushroom-boss-shots.png",
			rect: [0,0,37,37],
			duration: 2,
			frames: 10,
			attack_area: "all",
		},
		],
		particle_system: {
			id: "smoke",
			type: "simple",
			spawn_rate: 500,
			time_to_live: 50,
			min_x: -10,
			max_x: 42,
			min_y: -10,
			max_y: 42,
			velocity_x: -200,
			velocity_y: -200,
			velocity_x_random: 400,
			velocity_y_random: 400,
		
			#color=255,255,255,255
			#delta_a: 8,
			animation: {
				id: "sparkle",
				image: "enemies/mushroom-boss-shots.png",
				x: 0,
				y: 55,
				w: 16,
				h: 16,
				pad: 0,
				frames: 6,
				duration: 4,
			},
		},
	},
	{
		id: "big_shot_impact",
		always_active: true,
		
		on_end_anim: "die()",
		animation: {
			id: "normal",
			image: "enemies/mushroom-boss-shots.png",
			rect: [160,39,191,70],
			duration: 5,
			frames: 7,
		},
	},
	{
		id: "ammo",
		prototype: ["throwable_projectile"],
		properties: {
			is_player_ammo: "true",
			title: "~Spore Core~",
			description: "~The dangerous shell of a toxic homing weapon.~",
			taste: "~Sweet revenge!~",
		},
		animation: [
		{
			"@base": true,
			image: "enemies/mushroom-boss-shots.png",
			rect: [0,39,15,54],
			accel_y: 80,
			frames: 1,
			duration: 10,
		},
		{
			id: "normal",
			body_area: "all",
		},
		{
			id: "thrown",
			body_area: null,
			thrown_area: "all",
		},
		{
			id: "on_back",
			body_area: "all",
			thrown_area: null,
		}],
	},
	{
		id: "corpse",
		always_active: true,
		prototype: ["standard_values"],

		on_create: "[
			sinusoidal_transition({period: 400, _init_theta:1.0, _length_theta:-1.0, addend:0, coefficient:255, obj:me, aspect:'alpha'}),
			sound('mushroom-boss-death.wav')
		]",
		
		on_end_anim: "die()",
		animation: {
			id: "sprout",
			image: "enemies/mushroom-boss5.png",
			rect: [0,0,159,159],
			frames:1,
			duration: 100000,
			palettes: "@include data/palettes.cfg:forest_palettes",
			feet_x: 80,
			feet_y: 160,
		},
	},
	],

}