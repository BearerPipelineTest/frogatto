{
id: "moth_boss",
zorder: "@include data/zorder.cfg:in_front_of_parallax_objects",
prototype: ["hittable"],
mass: 5,
friction: 5000,
traction: 1000,
traction_in_air: 1000,
has_feet: false,
hitpoints: 3600,

solid_dimensions: ["enemy","common"],
always_active: true,
on_wingflap: "sound_falloff('moth-boss-wing-flap'+1d5+'.wav',500,1.0)",
properties: {
	custom_damage_table: "{
		enum neutral: 1.0,
		enum fire: 1.0,
		enum energy: 1.0,
		enum arcane: 1.0,
		enum acid: 1.0,
		enum impact: 1.0,
		enum impale: 1.0,
		enum lacerate: 1.0
	}",
	
	attack_damage: "1",
	team: "'evil'",
	hurt_velocity_y: "0",
	hurt_velocity_x: "0",
	
	title: "~Moth Boss~",
	description: "~Could totally take Godzilla in a fight!~",
	taste: "~Dusty and musty and old.~",
	
	uninterruptible_animations: "[string] :: ['turn']",
	change_action_cooldown_time: "20",
	timeout: "int :: 1d100+100",
	schedule_next_action: "schedule(timeout,bind_command(def() change_action))",

	
	#-------------------------- custom death logic --------------------------#
	death_fx_type: "'moth-boss'",
	taxonomy: "TaxonomyType :: enum bug",
	corpse_object_type: "'${me.type}.corpse'",
	death_fx_ignore_damage_type: "true",
	
	#-------------------------- boss HUD stuff --------------------------#
	is_a_boss: { default: true },

	
	#-------------------------- general functions --------------------------#
	setup: "[	if(lower_difficulty, set(max_hitpoints, 2400)) ]",	
	
	try_facing: "def(int direction) -> commands if(direction != facing,fire_event('turn'))",
	
	floor_height: "def(int x, int y) -> int|null if(floor_h, floor_h[1], null) where floor_h = _find_floor_standable(x,y,level.player)",

	generate_dive_path: "map(range(10), [value/10.0,sin(18*value)])",

	#-------------------------- attack modes --------------------------#
	enter_mode: "def(string mode, commands command) -> commands [set(_state, mode), command, /*debug(mode+' '+cycle)*/]",
	change_action: "commands <- if(cycle - _last_changed_action > change_action_cooldown_time, [set(_last_changed_action, cycle),
					if(_state = 'diving_towards_player', enter_mode('recover_from_dive', choose_dive_recovery_pos),
						if(_state = 'moving_to_prep_windgust', enter_mode('windgust',wind_gust),
							if(_state != 'moving', enter_mode('moving',choose_target_pos),
								if(should_lay_egg, enter_mode('egg-laying',lay_egg),
									[switch(_behavior_mode_prng.get_next_value, 
										0, enter_mode('shooting',prepare_shot),
										1, enter_mode('shooting_homingshot',prepare_homing_shot),
										2, enter_mode('moving_to_prep_windgust',choose_windgust_target_pos),
										3, enter_mode('diving_towards_player', choose_dive_target_pos )
										),
									_behavior_mode_prng.iterate_random_pool
									]
					))))])",

	choose_first_target_pos: "[ set(_target_x, (_x2_bound - _x_bound)/2), set(_target_y, _y2_bound)]",

	choose_target_pos: "[	set(_target_x, min(_x_bound,_x2_bound) + 1d(abs(_x2_bound - _x_bound))),
							if(should_do_high_pass,
								set(_target_y, min(_y_bound,_y2_bound) + 1d(abs(_y2_bound - _y_bound)/2) ),
								set(_target_y, min(_y_bound,_y2_bound) + 1d(abs(_y2_bound - _y_bound)/2) + abs(_y2_bound - _y_bound)/2 ),
							),
							_flight_height_prng.iterate_random_pool
						] where should_do_high_pass = if(_flight_height_prng.get_next_value = 1, true, false)",
									
	
	
#---- general target-seeking ----#
	movement_speed: "if(_state in ['diving_towards_player'], 125, 75)",

	seek_position: "		[if(_state = 'diving_towards_player', if(not animation in (['dive'] + uninterruptible_animations), animation('dive'))),
								if(midpoint_x < _target_x, [try_facing(1),add(velocity_x, movement_speed)],[try_facing(-1),add(velocity_x,-movement_speed)] ),
								if(midpoint_y < _target_y, add(velocity_y, movement_speed),add(velocity_y,-movement_speed) ),
								if(is_at_target, change_action)]",
								
	is_at_target: "if((abs(midpoint_x - _target_x) < trigger_distance) and (abs(midpoint_y - _target_y) < trigger_distance), true, false) where trigger_distance = max(10.0, current_speed/10.0), where current_speed = abs(hypot(velocity_x, velocity_y))",


									
#---- dive attack ----#
	choose_dive_target_pos: "[set(_target_x, level.player.mid_x), set(_target_y, level.player.mid_y)]",
	choose_dive_recovery_pos: "[set(_target_x, if(velocity_x < 0, _x_bound, _x2_bound)), set(_target_y, _y_bound + (_y2_bound - _y_bound)/2)]",
	
#---- wind gust ----#
	choose_windgust_target_pos: "if(1d2=2,	[	set(_target_x, _x_bound), 
												set(_target_y, _y_bound + (_y2_bound - _y_bound)/2)],
											[	set(_target_x, _x2_bound), 
												set(_target_y, _y_bound + (_y2_bound - _y_bound)/2)])",
	do_wind_gust: "if(not animation in (['flapfast'] + uninterruptible_animations), animation('flapfast'))",
	wind_gust: "[ schedule_next_action,
				spawn('current_generator',midpoint_x,midpoint_y, {facing:1, invisible:true, _x_bound:_x_bound-96, _x2_bound:_x2_bound+96, _y_bound:_y_bound-96, _y2_bound:_y2_bound+512, strength:5000, current_vel_x:if(mid_x > _x_bound + (_x2_bound - _x_bound)/2, -800, 800), current_vel_y:0, always_active:true},
[sound_falloff('moth-boss-wind1.ogg',500,1.0),schedule(timeout,[stop_sound('moth-boss-wind1.ogg'),die()])]),
				map(range(number_of_wind_gust_anims), schedule(value*3,spawn('wind_gust',gust_mid_x-gust_width/2+1d(gust_width), gust_mid_y-gust_height/2+1d(gust_height), {facing:gust_direction, upside_down: if(1d2=2,-1,1), animation:'normal'+(1d3-1)}) ))
			 ]	where number_of_wind_gust_anims = timeout/3,
			 	where gust_mid_x = (_x_bound+_x2_bound)/2,
			 	where gust_mid_y = (_y_bound+_y2_bound + 512-96)/2,
			 	where gust_width = (_x2_bound-_x_bound) + 96*2,
			 	where gust_height = ((_y2_bound-_y_bound) + 96*2 + 512 )/2,
			 	where gust_direction = wind_gust_direction
			 ",
	wind_gust_direction: "int :: if(mid_x > _x_bound + (_x2_bound - _x_bound)/2, 1, -1)",


#---- lay egg ----#
	should_lay_egg: "can_lay_egg_at_current_pos and (size(filter(level.chars, value.type in ['moth_boss.egg','moth_small'])) < 5)",
	lay_egg: "[	
					sound('moth-boss-lay-egg'+1d5+'.wav'), schedule(timeout/2, 
						if(higher_difficulty,
							[spawn_egg(-300), spawn_egg(0), spawn_egg(300)],
							[spawn_egg(-200), spawn_egg(200)]
						)
					),
					schedule_next_action
				] where spawn_egg = def(int vel_x) spawn('moth_boss.egg',mid_x,mid_y,{time_spat:level.cycle, animation:'on_back', velocity_x: vel_x})",
	
	can_lay_egg_at_current_pos: "if( floor_height(me.mid_x, me.mid_y), true, false)",
	
	
	
#---- fire shot ----#
	prepare_shot:	"[spawn('moth_boss.warning', midpoint_x+32*facing, midpoint_y - 60, {facing:facing, parent:me, relative_x: 32, relative_y: -60, zorder:lib.zorder.get('in_front_of_everything')}),
										sound_falloff('moth-boss-shot'+1d7+'.wav'),
										schedule(30, bind_command(def() launch_shot)), 
										schedule_next_action]",
	launch_shot: "[spawn('moth_boss.flash', midpoint_x+16*facing, midpoint_y - 30, 1),
					spawn('moth_boss.shot',midpoint_x+16*facing, midpoint_y - 30,
					{zorder: lib.zorder.get('in_front_of_everything'),
					velocity_x: max(-300,min(300,((1000*(level.player.x-x))/abs(level.player.y-y)) / 2)),
					velocity_y: max(-300,min(300,((1000*(level.player.y-y))/abs(level.player.x-x)) / 2) )})]",
					
#---- fire homing shot ----#
	prepare_homing_shot:	"[spawn('moth_boss.homing_shot_warning', midpoint_x+32*facing, midpoint_y - 60, {facing:facing, parent:me, relative_x: 32, relative_y: -60, zorder:lib.zorder.get('in_front_of_everything')}),
										sound_falloff('homing.wav'),
										schedule(30, bind_command(def() launch_homing_shot)), 
										schedule_next_action]",
	launch_homing_shot: "[spawn('moth_boss.homing_shot_flash', midpoint_x+16*facing, midpoint_y - 30, 1),
					spawn('moth_boss.homing_shot',midpoint_x+16*facing, midpoint_y - 30, 
					{zorder: lib.zorder.get('in_front_of_everything')})]",
	
	
	
#-------------------------- vars --------------------------#
	_last_turned: { type: "int", default: 0, persistent: false },
	_last_changed_action: { type: "int", default: 0, persistent: false },
	_target_x: { type: "int", default: 0, persistent: false },
	_target_y: { type: "int", default: 0, persistent: false },
	_state: { type: "string", default: 'moving', persistent: false },
	behavior: "_state",
	
	_behavior_mode_prng:	{ type: "class pseudo_random_numbers", init: "construct('pseudo_random_numbers',{_size_of_pool:4, _pool_size_multiplier: 2})", persistent: false },
	_flight_height_prng:	{ type: "class pseudo_random_numbers", init: "construct('pseudo_random_numbers',{_size_of_pool:2, _pool_size_multiplier: 2})", persistent: false },

	_x_bound: { type: "int", editor_info: { type: "x", value: "mid_x-200" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "mid_x+200" } },
	_y_bound: { type: "int", editor_info: { type: "y", value: "mid_y-200" } },
	_y2_bound: { type: "int", editor_info: { type: "y", value: "mid_y+200" } },
},

on_create: "[ setup, choose_first_target_pos ]",

#-------------------------- animation switching --------------------------#
on_turn: "if(cycle-_last_turned > 30 and (not animation in ['turn']),[set(_last_turned,cycle),animation('turn')])",
on_leave_turn_anim: "set(facing, -facing)",
on_end_anim: "animation('fly')",

## boss swaps randomly between several states;  egg-laying, flapping-to-make-wind, and diving, with an additional "cruising" mode for moving to a goal
## each state has a goal position; randomly placed in the air.  The bug flies to the position, and enters one of the attack states.
on_process: "[if(animation = 'fly',	switch(_state,
												'moving',						seek_position,
												'egg-laying',					null,
												'moving_to_prep_windgust',		seek_position,
												'windgust',						do_wind_gust,
												'diving_towards_player',		seek_position,
												'recover_from_dive',			seek_position,
												null)),
				set(rotate, sin(cycle*7) * 2.0)]",

editor_info: {
	category: "enemies, forest",
},
animation: [
	{
		"@base": true,
		body_area: "all",
		feet_x: 96,
		feet_y: 152,
		pad: 0,
		rect: [0,0,191,191],
	},
	{
		image: "enemies/moth-boss1.png",
		attack_area: [48,48,143,143],
		id: "fly",
		events:"16:wingflap",
		frames: 8,
		frames_per_row: 4,
		duration: 4,
	},
	{
		image: "enemies/moth-boss1.png",
		id: "flapfast",
		events:"4:wingflap",
		frames: 8,
		frames_per_row: 4,
		duration: 1,
	},
	{
		image: "enemies/moth-boss2.png",
		id: "turn",
		frames: 5,
		duration: 5,
	},
	{
		image: "enemies/moth-boss1.png",
		id: "hurt",
		frames: 1,
		duration: 18,
	},
	{
		image: "enemies/moth-boss1.png",
		id: "dive",
		frames: 1,
		rect: [192,0,383,191],
		duration: -1,
	},
],
object_type: [
	{
		id: "flash",
		zorder: "@include data/zorder.cfg:near_player_foreground_effects",
		dies_on_inactive: true,
		on_end_anim: "die()",
		on_create: "[add_particles('particles'),schedule(4,fire_event('stop_spawning_particles'))]",
		on_stop_spawning_particles: "[set(particle_systems['particles'].spawn_rate, 0),set(alpha,0)]",
		animation: {
			no_remove_alpha_borders: true,
			id: "normal",
			image: "enemies/moth-big.png",
			rect: [191,83,226,118],
			pad: 3,
			frames: 1,
			duration: 70,
			scale: 4,
		},
		particle_system: {
			id: "particles",
			type: "simple",
			spawn_rate: 8000,
			time_to_live: 40,
			min_x: 18,
			max_x: 20,
			min_y: 18,
			max_y: 20,
			velocity_magnitude: 1000,
			velocity_magnitude_random: 500,
			velocity_rotate_random: 360,
			animation: {
				id: "sparkle",
				image: "enemies/moth-big.png",
				x: 191,
				y: 4,
				w: 7,
				h: 7,
				pad: 3,
				frames: 4,
				duration: 10,
			},
		},
	},
	{
		id: "warning",
		zorder: "@include data/zorder.cfg:near_player_foreground_effects",
		dies_on_inactive: true,
		timer_frequency: 30,
		on_timer: "die()",
		on_end_anim: "animation('normal')",
		animation: {
			no_remove_alpha_borders: true,
			id: "normal",
			image: "enemies/moth-big.png",
			rect: [191,31,213,53],
			pad: 3,
			frames: 4,
			frames_per_row: 2,
			duration: 2,
			scale: 4,
		},
	},
	{
		id: "homing_shot",
		prototype: ["shot"],
		dies_on_inactive: true,
		is_strict: true,
		affected_by_currents: true,
		object_level_collisions: false,
		properties: {
			attack_damage: "if(higher_difficulty, 4, 2)",
			deflectable_via_attacks: false,

			speed: 300,
			accel_speed: 0.2,
			decay: 0.99,
			multiplier_x: "cos(lib.math.angle(me,target))",
			multiplier_y: "sin(lib.math.angle(me,target))",
			my_angle: "lib.math.angle(me,target)",
			target: "obj player_controlled :: level.player",


		},
		on_create: "[add_particles('particles'),schedule(500,die())]",
		on_end_anim: "animation('normal')",
		on_process: "[
						set(velocity_x, median(-speed, velocity_x*decay + multiplier_x*speed*accel_speed, speed)),
						set(velocity_y,median(-speed,velocity_y*decay+multiplier_y*speed*accel_speed,speed)),
					]",
		timer_frequency: 4,
		on_timer: "set(rotate, cycle*10)",
		on_die: "[spawn('moth_boss.homing_shot_flash', midpoint_x, midpoint_y, facing)]",
		
		animation: {
			no_remove_alpha_borders: true,
			id: "normal",
			image: "enemies/moth-boss-homing-shot.png",
			rect: [1,1,32,32],
			pad: 3,
			frames: 4,
			frames_per_row: 2,
			duration: 2,
			body_area: "all",
			attack_area: [8,8,24,24],
		},
		particle_system: {
			id: "particles",
			type: "simple",
			spawn_rate: 1000,
			time_to_live: 24,
			min_x: 16,
			max_x: 32,
			min_y: 16,
			max_y: 32,
			velocity_magnitude: 1000,
			velocity_magnitude_random: 100,
			velocity_rotate_random: 360,
			animation: {
				id: "sparkle",
				image: "effects/particles2.png",
				x: 1,
				y: 227,
				w: 7,
				h: 7,
				pad: 3,
				frames: 8,
				frames_per_row:4,
				scale: 2,
				duration: 3,
			},
		},
	},
	{
		id: "homing_shot_flash",
		zorder: "@include data/zorder.cfg:near_player_foreground_effects",
		dies_on_inactive: true,
		on_end_anim: "die()",
		on_create: "[add_particles('particles'),schedule(4,fire_event('stop_spawning_particles'))]",
		on_stop_spawning_particles: "[set(particle_systems['particles'].spawn_rate, 0),set(alpha,0)]",
		animation: {
			no_remove_alpha_borders: true,
			id: "normal",
			image: "enemies/moth-big.png",
			rect: [191,83,226,118],
			pad: 3,
			frames: 1,
			duration: 70,
			scale: 4,
		},
		particle_system: {
			id: "particles",
			type: "simple",
			spawn_rate: 20000,
			time_to_live: 60,
			min_x: 18,
			max_x: 20,
			min_y: 18,
			max_y: 20,
			velocity_magnitude: 2000,
			velocity_magnitude_random: 1000,
			velocity_rotate_random: 360,
			animation: {
				id: "sparkle",
				image: "effects/particles2.png",
				x: 1,
				y: 227,
				w: 7,
				h: 7,
				pad: 3,
				frames: 8,
				frames_per_row:4,
				scale: 2,
				duration: 3,
			},
		},
	},
	{
		id: "homing_shot_warning",
		zorder: "@include data/zorder.cfg:near_player_foreground_effects",
		dies_on_inactive: true,
		timer_frequency: 30,
		on_timer: "die()",
		on_end_anim: "animation('normal')",
		animation: {
			id: "normal",
			image: "enemies/moth-boss-homing-shot.png",
			rect: [69,1,100,32],
			pad: 3,
			frames: 4,
			frames_per_row: 2,
			duration: 2,
		},
	},
	{
		id: "shot",
		prototype: ["shot"],
		dies_on_inactive: true,
		is_strict: true,
		affected_by_currents: true,
		object_level_collisions: true,
		properties: {
			attack_damage: "if(higher_difficulty, 4, 2)",
			deflectable_via_attacks: false,
			
			subshot_speed: "hypot(velocity_x,velocity_y)",
			shot_rotation: "atan(velocity_y/velocity_x) - if(velocity_x < 0, 180, 0)",

			subshot_offset: "def(decimal angle_offset) -> {x: decimal, y: decimal} {x: mid_x + offset[0], y: mid_y + offset[1]} where offset = orbit(0, 0, shot_rotation + angle_offset, mid_y-10-y)",
			subshot_vel: "def(decimal angle_offset) -> {x: decimal, y: decimal} {x: subshot_speed * cos(angle_offset + shot_rotation), y: subshot_speed * sin(angle_offset + shot_rotation)}",
			spawn_individual_subshot: "def(decimal angle_offset) -> commands spawn('moth_big.shot', subshot_offset(angle_offset).x, subshot_offset(angle_offset).y, {rotate: angle_offset, velocity_x: subshot_vel(angle_offset).x, velocity_y: subshot_vel(angle_offset).y})",

			fire_subshots: "[sound('laser-raspberry.wav'), spawn_individual_subshot(-40), spawn_individual_subshot(-20), spawn_individual_subshot(0), spawn_individual_subshot(20), spawn_individual_subshot(40)]",

		},
		on_create: "[add_particles('particles'),schedule(50,die())]",
		on_end_anim: "animation('normal')",
		timer_frequency: 4,
		on_timer: "set(rotate, cycle*10)",
		on_die: "[execute(me,fire_subshots), spawn('moth_big.flash', midpoint_x, midpoint_y, facing)]",
		animation: {
			no_remove_alpha_borders: true,
			id: "normal",
			image: "enemies/moth-big.png",
			rect: [191,13,205,27],
			pad: 3,
			frames: 2,
			duration: 2,
			reverse: true,
			body_area: "all",
			attack_area: "all",
			scale: 4,
		},
		particle_system: {
			id: "particles",
			type: "simple",
			spawn_rate: 500,
			time_to_live: 40,
			min_x: 0,
			max_x: 20,
			min_y: 0,
			max_y: 20,
			velocity_magnitude: 100,
			velocity_magnitude_random: 100,
			velocity_rotate_random: 360,
			animation: {
				id: "sparkle",
				image: "enemies/moth-big.png",
				x: 191,
				y: 4,
				w: 7,
				h: 7,
				pad: 3,
				frames: 4,
				duration: 10,
			},
		},
	},
	{
		id: "egg",
		prototype: ["throwable_projectile"],
		properties: {
			is_player_ammo: "true",
			title: "~Moth Egg~",
			description: "~I'd prefer a \"Kinder Surprise\", really.~",
			taste: "~Disturbingly moist.~",
		},
		solid_area: [16,16,31,31],

		on_process_on_back: "[proto_event('throwable_projectile','process_on_back'), if(_on_back_count = (on_back_duration*3)/4, sound_falloff('egg-hatch-squishy.wav'))]",

		on_return_to_normal: "[sound_falloff('egg-hatch-crunch'+1d3+'.wav'),spawn('moth_small',mid_x,y,{facing:facing, _x_bound:mid_x-200, _x2_bound:mid_x+200, _desired_height:y-150-1d100}, [set(child.always_active,true)]),
								die()]",
		animation: [
		{
			"@base": true,
			image: "enemies/moth-boss-egg.png",
			rect: [0,0,47,47],
			accel_y: 80,
			frames: 1,
			duration: 10,
		},
		{
			id: "normal",
			body_area: "all",
		},
		{
			id: "thrown",
			body_area: null,
			thrown_area: "all",
		},
		{
			id: "on_back",
			body_area: "all",
			thrown_area: null,
		}],
	},
	{
		id: "corpse",
		always_active: true,
		prototype: ["standard_values"],

		on_create: "[set(level.focus, [me]),sinusoidal_transition({period: 200, _init_theta:1.0, _length_theta:-1.0, addend:0, coefficient:255, obj:me, aspect:'alpha'})]",
		
		on_end_anim: "[set(level.focus, []), if(controller, fire_event(controller, 'postfight_outro')) where controller = get_object(level,'begin_fight_controller'), die()]",
		animation: {
			image: "enemies/moth-boss1.png",
			pad: 3,
			feet_x: 96,
			feet_y: 152,
			id: "fly",
			rect: [0,0,191,191],
			accel_y: 1,
			duration: 200,
		},
	},
	{
		id: "perched",
		always_active: true,
		zorder: "@include data/zorder.cfg:forest_leaves_background",
		on_end_anim: "animation(animation)",

		animation: {
			image: "enemies/moth-boss3.png",
			pad: 0,
			feet_x: 96,
			feet_y: 152,
			id: "fly",
			rect: [0,0,191,191],
			duration: 10,
			frames: 3,
			reverse: true,
		},
	},
],
}
