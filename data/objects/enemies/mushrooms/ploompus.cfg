{
id: "ploompus",
hitpoints: 200,

prototype: ["mushroom_flier"],

platform_area: [7,13,38,14],

properties: {
#-------------------------- constructor/destructor logic --------------------------#
	specialized_creature_category_constructor: "commands :: [
								if(_init_x = null, set(_init_x, midpoint_x)),
								if(_init_y = null, set(_init_y, midpoint_y)),
							]",


#-------------------------- metadata --------------------------#
	title: "~Ploompus~",
	description: "~Imagine a very tiny, very unhappy thundercloud. A great argument for granite roofs.~",
	taste: "~Like a fetid algae-filled lake.~",
	
	
#-------------------------- prototype overrides --------------------------#
	physical_size: "32",

#-------------------------- core behavior --------------------------#
	
	
	float_target: "{x: int, y: int} :: {x: lib.math.round(_init_x + orbit_radius * cos(_orbit_angle)), y: lib.math.round(_init_y + orbit_radius * sin(_orbit_angle))}", 
	orbit_radius: "100",
	shot_interval: "250",
	
	float_speed_x: "if(higher_difficulty, 20, 16)",
	float_speed_y: "if(higher_difficulty, 20, 16)",

	process_float: "[
						if(midpoint_x < float_target.x, [try_facing(1),add(velocity_x, float_speed_x)],[try_facing(-1),add(velocity_x,-float_speed_x)] ),
						if(midpoint_y < float_target.y, add(velocity_y, float_speed_y),add(velocity_y,-float_speed_y) ),
						add(_orbit_angle, 0.2),
						if(cycle % shot_interval = 0, try_shooting),
						set(_rotate_decay, if(_rotate_decay > 3.0,  _rotate_decay * 0.95, 0.0)),
						
						set(rotate, sin(cycle*7) * 4.0 + _rotate_decay),
						if(animation in ['fly1','fly2','fly3'], [set(animation, 'fly'+animation_suffix), set(time_in_animation, time_in_animation)]),
					]",
									

	try_shooting: "	set(_pl_behavior, enum preparing_shot)",

	process_shooting: "	[
							if(not animation = 'shoot', [
								sound_falloff('ploompus-windup'+1d2+'.wav'),
								animation('shoot'),
								spawn('particle_attache', {
									_particle_type: 'ploompus_burst',
									x: mid_x,
									y: mid_y,
									parent: me,
									time_to_die: 200,
									custom_relative_pos_default: {mid_x: 0, mid_y: -32},
								}),
							])
						]",

	process_prepare_shot: "	[
								if( abs(rotate - angle_to_player) > 5,
									[ add(rotate,  (angle_to_player - rotate)*0.1)],
									[fire_shots, set(_pl_behavior, enum shooting)]
								)
								
							] where angle_to_player = lib.math.angle(me,level.player) - 90",
	
	central_process: "	switch(_pl_behavior,
							enum preparing_shot, process_prepare_shot,
							enum shooting,	process_shooting,
							process_float
						)",

	
	
	
	
#-------------------------- shot handling --------------------------#
	shot_offset: "def(decimal angle_offset) -> {x: decimal, y: decimal} {x: mid_x + offset[0], y: mid_y + offset[1]} where offset = orbit(0, 0, 0 - 90 + angle_offset, mid_y-10-y)",
	shot_speed: "550 + 1d150",

	shot_vel: "def(decimal angle_offset) -> {x: decimal, y: decimal} {x: shot_speed * cos(angle_offset + 0 - 90), y: shot_speed * sin(angle_offset + 0 - 90)}",
	kickback_vel: "def(decimal angle_offset) -> {x: decimal, y: decimal} {x: kickback_speed * cos(angle_offset + 180 - 90), y: kickback_speed * sin(angle_offset + 180 - 90)} where kickback_speed = shot_speed / 1.0",

	spawn_individual_shot: "def(decimal angle_offset) -> commands spawn('${type}.shot', shot_offset(angle_offset).x, shot_offset(angle_offset).y, {velocity_x: shot_vel(angle_offset).x, velocity_y: shot_vel(angle_offset).y})",

	fire_shots: "	schedule(5#frames# * 3#cycles#,[
						spawn_individual_shot(firing_angle),
						add(velocity_x, kickback.x),
						add(velocity_y, kickback.y),
						set(_rotate_decay, angle_to_player),
					]
						where angle_to_player = lib.math.angle(me,level.player) - 90
						where kickback = kickback_vel(firing_angle)
						where firing_angle = (lib.math.angle(me,level.player) + 90 + 1d6-3)
					)",
#-------------------------- vars --------------------------#
	_rotate_decay: { type: "decimal", default: 0.0 },
	_orbit_angle: { type: "decimal", default: 0.0 },
	_pl_behavior: { type: "enum { hovering, preparing_shot, shooting }", init: "enum hovering" },

#-------------------------- tmp vars --------------------------#
	_shot_counter: { type: "int", default: 0, persistent: false },
	_last_shot: { type: "int", default: 0, persistent: false },
},

on_end_shoot_anim: "[animation(default_anim), set(_pl_behavior, enum hovering)]",



animation: [
	{
		"@base": true,
		image: "enemies/mushroom-floating-shooter.png",
		no_remove_alpha_borders: true,
		body_area: "all",
		accel_y: 0,
		feet_x: 29,
		feet_y: 45,
		pad: 2,
		attack_area: [8,18,38,38],
	},
	{
		id: "fly1",
		rect: [1,1,58,58],
		frames: 10,
		duration: 4,
		accel_x: 0,
		events: "35:wingflap",
	},
	{
		id: "fly2",
		rect: [1,63,58,120],
		frames: 10,
		duration: 4,
		accel_x: 0,
		events: "35:wingflap",
	},
	{
		id: "fly3",
		rect: [1,125,58,182],
		frames: 10,
		duration: 4,
		accel_x: 0,
		events: "35:wingflap",
	},
	{
		id: "spring",
		rect: [1,1,58,58],
		frames: 1,
		duration: 3,
	},
	{
		id: "turn",
		rect: [1,1,58,58],
		frames: 1,
		duration: 3,
	},
	{
		id: "hurt",
		rect: [1,1,58,58],
		frames: 1,
		duration: 18,
	},
	{
		id: "shoot",
		rect: [1,188,58,245],
		frames: 7,
		duration: 3,
	},
],


object_type: [
	{
		id: "shot",
		object_level_collisions: true,
		solid_dimensions: ["player"],
		zsub_order: 2,
		prototype: ["shot"],
		always_active: true,
		properties: {
			attack_damage: "if(higher_difficulty,2,1)",
			damage_type: "enum acid",
			
			spawn_impact_particles: "bind_command(def() spawn('ploompus.impact_particle_holder',mid_x, mid_y, {facing: facing, parent: me, relative_x: 0, relative_y: 0, time_to_die: 50 }))",
			spawn_trail_particles: "spawn('ploompus.trail_particle_holder', mid_x, mid_y, {facing: facing, parent: me, relative_x: 0, relative_y: 0, time_to_die: 50, rotate: atan2(me.velocity_y,me.velocity_x) - 90 })",
			
			death_effects: "def(string type) -> commands [
					spawn_impact_particles,
				]",

		},
		on_create: "[
						//schedule(40+1d15, force_death()),
						set(facing, if(1d2=2, 1, -1)),
						sound_falloff('ploompus-shoot'+1d2+'.wav'),
						spawn_impact_particles,
						spawn_trail_particles
					]",
		on_die: "spawn_impact_particles",
		on_end_normal_anim: "animation('normal')",
		on_process: "add(rotate, 5)",
		animation: [
			{
				image: "enemies/mushroom-floating-shooter-shot.png",
				attack_area: "all",
				accel_y: 00,
				pad: 2,
				id: "normal",
				rect: [23,1,40,18],
				frames: 7,
				frames_per_row: 1,
				duration: 3,
			},
		],
	},
	{
		id: "trail_particle_holder",
		prototype: ["effects_attache"],

		on_process: "[if(cycle%5=0 and (not 1d3=3), spawn_particles)]",
		properties: {
			spawn_particles: "map(range(3), schedule(1d5, spawn('ploompus.trail_particle',mid_x, mid_y, {rotate: me.rotate + 1d50-25})))",
		},
	},
	{
		id: "trail_particle",
		dies_on_inactive: true,
		zsub_order: 1,
		on_create: "[
						set(velocity_x, 1d200-100),
						set(velocity_y, 1d200-100)
					]",
		on_end_anim: "die()",
		animation: [
			{
				image: "enemies/mushroom-floating-shooter-shot.png",
				accel_y: 00,
				pad: 2,
				id: "normal",
				rect: [12,1,20,9],
				frames: 7,
				frames_per_row: 1,
				duration: 3,
			},
		],
	},	{
		id: "impact_particle_holder",
		prototype: ["effects_attache"],

		properties: {
			do_setup: "[spawn_particles,schedule(50,die())]",
			spawn_particles: "map(range(3), schedule(1d5, spawn('ploompus.impact_particle',mid_x, mid_y, 1)))",
		},
		on_create: "[sound_falloff('ploompus-shot-impact'+1d2+'.wav'),spawn_particles,schedule(50,die())]",
	},
	{
		id: "impact_particle",
		dies_on_inactive: true,
		zsub_order: 1,
		on_create: "[
						set(velocity_x, 1d200-100),
						set(velocity_y, 1d200-100)
					]",
		on_end_anim: "die()",
		animation: [
			{
				image: "enemies/mushroom-sponge-cloud-shooter.png",
				attack_area: "all",
				accel_y: 00,
				pad: 3,
				id: "normal",
				rect: [1,178,7,184],
				frames: 7,
				duration: 3,
			},
		],
	},
]
}
