{
id: "gazer_small_bare_harmless",
prototype: ["seeker_flying"],
always_active: true,

editor_info: {
	category: "enemies, cave",
},

solid_area: null,

properties: {
#-------------------------- constructor/destructor logic --------------------------#
	specialized_creature_category_constructor: "commands :: [
								add_object(my_particles),
								; my_particles.turn_off
							]",


#-------------------------- metadata --------------------------#
	points_value: 23,
	taxonomy: "TaxonomyType :: enum stone",
	physical_size: "int :: 16",
	
	title: "~Gazer~",
	description: "~It looks like a cue ball with a pupil on one side.~",
	taste: "~Observant.~",
	
#-------------------------- prototype behavior --------------------------#
	altitude_adjustment: "(wave(cycle*5+1000)/50)",
	
	flight_animations: "[string] :: ['fly', 'turn','fly_aggro']",

	appropriate_turning_animation: "string :: if(is_seeking_any_target and _target_obj = level.player, 'turn_aggro','turn')", 


#-------------------------- custom behavior --------------------------#
	_glow: {
		type: "obj effects_attache_glow_source",
		init: "object('effects_attache_glow_source', mid_x, mid_y, {
						time_to_die: 0,
						parent: me,
						flicker_type: enum window_light,
						graphics: enum gazer_flare,
						scale_factor: 0.20,
						base_alpha: 60,
						zorder: me.zorder,
						zsub_order: 1,
					})",
	},


	my_particles: { type: "obj gazer_small_bare_harmless.particles", init: "object('gazer_small_bare_harmless.particles', mid_x, mid_y, {facing: facing, parent: me, relative_x: 0, relative_y: 0, time_to_die: 50, initial_spawn_rate: 500 })" },

	flame_on:	"[my_particles.turn_on, add_object(_glow)]",
	flame_off:	"[my_particles.turn_off, remove_object(_glow)]",

	detonate: "bind_command(def() [sound_falloff('fire-explode.wav'), spawn('gazer_small_bare_harmless.explosion',mid_x, mid_y, facing), force_death(enum neutral)])",
	
	acquirable_item_drop_value: "if(animation = 'fly_aggro', 0, 10)",
	do_aggro_sound: "[
			sound_falloff('gazer-mini-aggro-start.wav'),
			spawn('sound_source_individual_attache',mid_x,mid_y,{parent:me, sound_file:'gazer-mini-aggro-loop.wav'}),
			add_object(_glow),
		]",
	
	spiral_info: {
		type: "{mid_x: int, mid_y: int, __index: int, num_mooks: int}|null",
	},
	spiral_anim: {
		type: "int",
		default: 0,
		set: "([
			set(me.mid_x, spiral_info.mid_x + offset.x),
			set(me.mid_y, (spiral_info.mid_y + (0.2 + (cos(value))* 0.8) * offset.y)),
			set(me.zsub_order, lib.math.round(lib.math.decimal_mod(angle+90,360.0)-180)),
			set(_glow.zsub_order, 1 + lib.math.round(lib.math.decimal_mod(angle+90,360.0)-180)),

			set(_data, value),
		]
		where location = _to_point([decimal, decimal] <- orbit(spiral_info.mid_x, spiral_info.mid_y, angle, dist))
		
		where offset = {x: dist * sin(angle), y: dist * cos(angle)}
		
		where _to_point = def([decimal, decimal] pt) -> {x: int, y: int} {x: lib.math.round(pt[0]), y: lib.math.round(pt[1])}
		where angle = speed_factor * 360.0*wave_offset + (spiral_info.__index * (360/spiral_info.num_mooks)) 
		where speed_factor = 3.0
		where dist =  125 + 175 * lib.math.ease_in_out_sine(input)
		where wave_offset = lib.math.ease_in_out_sine((lib.math.decimal_mod(value, 360.0) - 180.0)/360.0)
		where input = value/50.0
		)
		asserting spiral_info != null
		",
	},
},




on_end_anim:	"if(animation = 'burning',
					set(animation, 'burning'),
					if(is_seeking_any_target and _target_obj = level.player,
						set(animation, 'fly_aggro'),
						set(animation, 'fly')
					)
				)",




animation: [

	{
		"@base": true,
		image: "enemies/gazer-grey-small-harmless.png",
		pad: 3,
		accel_x: 0,
		accel_y: 0,
		body_area: "all",
	},
	{
		accel_x: 10,
		id: "fly",
		rect: [1,1,25,28],
		frames: 3,
		reverse: true,
		duration: 6,
	},
	{
		accel_x: 10,
		id: "fly_aggro",
		rect: [1,32,25,59],
		frames: 6,
		duration: 1,
		attack_area: "all",
		body_area: "none",
	},
	{
		id: "turn",
		rect: [1,63,25,90],
		frames: 3,
		duration: 5,
	},
	{
		id: "turn_aggro",
		rect: [113,32,137,59],
		frames: 2,
		reverse: true,
		attack_area: "all",
		duration: 5,
	},
	{
		accel_y: 20,
		id: "hurt",
		rect: [45,89,69,116],
		frames: 1,
		duration: 18,
	},
	{
		id: "burning",
		rect: [85,63,111,89],
		frames: 4,
		duration: 3,
		attack_area: "all",
		body_area: "none",
	},
],

object_type: [
	{
		id: "thrown",
		prototype: ["throwable_small_enemy"],
		properties: {
			taxonomy: "TaxonomyType :: enum stone",
		},
		animation: [
			{
				image: "enemies/gazer-grey-small-harmless.png",
				id: "thrown",
				thrown_area: "all",
				duration: 60,
				rect: [45,89,69,116],
				frames: 1,
				body_area: null,
			},
			{
				image: "enemies/gazer-grey-small-harmless.png",
				id: "on_back",
				rect: [45,89,69,116],
				frames: 1,
				duration: 5,
				body_area: "all",
			},
		],
	},
	{
		id: "explosion",
		prototype: ["shot"],
		always_active: true,
		serializable: false,
		zorder: 20,

		properties: {
			dies_upon_dealing_damage: false,
			damage_type: "enum fire",
			damage_cooldown: "60",
		},
		on_end_anim: "force_death()",
		
		animation: [{
			id: "normal",
			image: "enemies/gazerlet-explosion.png",
			rect: [0,0,63,63],
			frames: 10,
			frames_per_row: 5,
			pad: 0,
			duration: 4,
			no_remove_alpha_borders: true,
			scale: 4,
			attack_area: 'all'
		}],

	},
	{
		id: "particles",
		prototype: ["effects_attache"],
		zsub_order: -1000,

		properties: {
			initial_spawn_rate: { type: "int", dynamic_initialization: true },

			do_setup: "add_particles('particles')",
			turn_on: "; set(particle_systems['particles'].spawn_rate, initial_spawn_rate)",
			turn_off: "; set(particle_systems['particles'].spawn_rate, 0)",
		},

		particle_system: {
			id: "particles",
			type: "simple",
			spawn_rate: 500,
			time_to_live: 40,
			min_x: -30,
			max_x: 0,
			min_y: -30,
			max_y: 0,
			velocity_magnitude: 100,
			velocity_magnitude_random: 100,
			velocity_rotate_random: 360,
			animation: {
				id: "sparkle",
				image: "enemies/gazer-grey-small-harmless.png",
				x: 235,
				y: 33,
				w: 15,
				h: 15,
				pad: 3,
				frames: 8,
				frames_per_row: 4,
				duration: 3,
			},
		},
	},

],

}
