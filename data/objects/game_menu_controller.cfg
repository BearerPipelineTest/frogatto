{
	id: "game_menu_controller",
	is_strict: true,
	zorder: 100000,
	hidden_in_game: true,
	use_absolute_screen_coordinates: true,

	properties: {
		buttons: { type: "[{pad: int|null, text: string, callback: function()->commands}]" },

		text_width: { type: "int", init: "lib.gui.py(260)" },


		_text_area: { type: "null|obj text_area" },
		_buttons: { type: "[obj button_controller]", default: [] },

		_paused: { type: "[custom_obj]", default: [] },

		show_dialog: "def() ->commands
		execute(me,
		[
			// XXX
			lib.sound.play_sound(me, 'interface/enter-escape-menu'),

			[remove_object(c) | c <- spawned_children],

			[
				set(_paused, need_pause),
				map(need_pause, set(value.paused, true)),
			] where need_pause = filter(level.chars, value.paused = false),
			add_object(me),

			spawn('text_area', 0, 0, {
				mid_x: lib.gui.screen_width/2,
				mid_y: lib.gui.screen_height/2,
				use_absolute_screen_coordinates: true,
				bg_color: [0.3, 0.3, 0.3, 1.0],
				bg_border_color: [0.40, 0.42, 0.45, 1.0],
				bg_border_width: lib.gui.dpy(3.0),
				border: lib.gui.py(20),
				border_sides: lib.gui.py(50),
				border_bot: size(buttons.buttons) * lib.gui.py(60)
					+ sum([int] :: map(buttons.buttons, value.pad or 0))
					+ lib.gui.py(40),
				_text: q^<font size='24'>Game Menu</font>\n<font size='70%'>Subs marked with an asterisk </font>(*)<font size='70%'> are WIP.</font>^,
				text_width: text_width,
				zorder: zorder,
			}, [
				set(_text_area, child),
			]);

			if(_text_area != null, [
				map(buttons,
					spawn('button_controller', {
						mid_x: lib.gui.screen_width/2,
						y: lib.gui.screen_height/2 + lib.gui.py(30) - size(buttons)*lib.gui.py(60)/2 - sum(map(buttons, value.pad or 0))/2 + index*lib.gui.py(60) + sum(map(buttons[:index+1], value.pad or 0)),
						button_width: lib.gui.py(212),
						zorder: zorder+10,
						text: value.text,
						on_click: (def()->commands [remove_object(me); value.callback()]),
						_font_size: lib.gui.py(18),
						color_scheme: {
							normal: [255, 192, 0],
							depressed: [255, 255, 255],
							focus: [192, 255 ,0],
							text_normal: [116, 122, 74],
							text_depressed: [0, 0, 0],
							text_focus: [0, 0, 255],
						},
					}, [
						add(_buttons, [child]),
					])
				)
				where left_side = lib.gui.screen_width/2 - text_width/4
				where button_spacing = (text_width/2)/(max(1, size(buttons)-1))
			])
		]
		)
		",
		// show_dialog function field ends
	},

// 	events: {

// 	}

	on_create: "show_dialog()",

	on_being_removed: "[
		map(_paused, set(value.paused, false)),
		map(_buttons, remove_object(value)),
		remove_object(_text_area),
	]",
	
	on_type_updated: "show_dialog()",
}
