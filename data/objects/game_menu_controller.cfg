{
	id: "game_menu_controller",
	is_strict: true,
	zorder: 100000,
	hidden_in_game: true,
	use_absolute_screen_coordinates: true,

	properties: {
		buttons_set: { type: "{
			buttons: [{
				pad: null | int,
				text: string,
				callback: function () -> commands,
			}],
			escape_trapping: {
				active: bool,
				which_one: string,
			}
		}", },

		text_width: { type: "int", init: "lib.gui.py(260)" },

		_preferences: 'game_preferences :: game_preferences()',

		_change_music_volume: "def (decimal value) -> commands
		[
			remove_object(_music_label),
			set(_preferences.music_volume, value),
			spawn('label', 0, 0, {
				x: lib.gui.screen_width / 2 + 50 /*fixme*/,
				y: lib.gui.screen_height / 2 + 10,
				_halign: 'left',
				_valign: 'top',
				zorder: zorder + 20,
				_font_size: lib.gui.py(14),
				_text: ['Music Volume: ' + str(int(100 * value))],
			}, [
				set(me._music_label, child),
			]),
		]",

		_change_sound_volume: "def (decimal value) -> commands
		[
			remove_object(_sound_label),
			set(_preferences.sound_volume, value),
			spawn('label', 0, 0, {
				x: lib.gui.screen_width / 2 + 50 /*fixme*/,
				y: lib.gui.screen_height / 2 + 20,
				_halign: 'left',
				_valign: 'top',
				zorder: zorder + 20,
				_font_size: lib.gui.py(14),
				_text: ['Sound Volume: ' + str(int(100 * value))],
			}, [
				set(me._sound_label, child),
			]),
		]",

		_music_slider: { type: 'null | obj slider_widget', },

		_sound_slider: { type: 'null | obj slider_widget', },

		_music_label: { type: 'null | obj label', },

		_sound_label: { type: 'null | obj label', },

		_text_area: { type: "null|obj text_area" },
		_buttons: { type: "[obj button_controller]", default: [] },

		_paused: { type: "[custom_obj]", default: [] },

		show_dialog: "def() ->commands
		execute(me,
		[
			// XXX
			lib.sound.play_sound(me, 'interface/enter-escape-menu'),

			[remove_object(c) | c <- spawned_children],

			[
				set(_paused, need_pause),
				map(need_pause, set(value.paused, true)),
			] where need_pause = filter(level.chars, value.paused = false),
			add_object(me),

			spawn('text_area', 0, 0, {
				mid_x: lib.gui.screen_width/2,
				mid_y: lib.gui.screen_height/2,
				use_absolute_screen_coordinates: true,
				bg_color: [0.3, 0.3, 0.3, 1.0],
				bg_border_color: [0.40, 0.42, 0.45, 1.0],
				bg_border_width: lib.gui.dpy(3.0),
				border: lib.gui.py(20),
				border_sides: lib.gui.py(50),
				border_bot: size(buttons_set.buttons) * lib.gui.py(60)
					+ sum([int] :: map(buttons_set.buttons, value.pad or 0))
					+ lib.gui.py(40),
				_text: q^<font size='24'>Game Menu</font>\n<font size='70%'>Subs marked with an asterisk </font>(*)<font size='70%'> are WIP.</font>^,
				text_width: text_width,
				zorder: zorder,
			}, [
				set(_text_area, child),
			]);

			if(_text_area != null, [
				map(['Music', 'Sound'],
					spawn('slider_widget', 0, 0, {
						x: lib.gui.screen_width / 2 + 50 /*fixme*/,
						y: lib.gui.screen_height / 2
							+ lib.gui.py(30)
							- size(buttons_set.buttons) * lib.gui.py(45) / 2
							- sum(map(buttons_set.buttons, value.pad or 0)) / 2
							+ index * lib.gui.py(45),
						slider_width: /* pane_width */ lib.gui.px(90),
						slider_height: lib.gui.py(20),
						slider_value: _preferences.sound_volume,
						zorder: me.zorder + 10,
						value_change_handler:
							if(value = 'Music',
								me._change_music_volume,
							value = 'Sound',
								me._change_sound_volume,
							// else
								null /* FIXME abort execution here! (assert false, maybe?) */
							),
					}, [
						if(value = 'Music',
							set(me._music_slider, child),
						value = 'Sound',
							set(me._sound_slider, child),
						// else
							null /* FIXME abort execution here! (assert false, maybe?) */
						),
					]),  //   spawn('slider_widget', ...)
				),
				map(buttons_set.buttons,
					spawn('button_controller', {
						mid_x: lib.gui.screen_width / 2,
						y: lib.gui.screen_height / 2
							+ lib.gui.py(30)
							- size(buttons_set.buttons) * lib.gui.py(45) / 2
							- sum(map(buttons_set.buttons, value.pad or 0)) / 2
							+ index * lib.gui.py(45)
							+ sum(map(buttons_set.buttons[:index + 1], value.pad or 0)),
						button_width: lib.gui.py(212),
						button_height: lib.gui.py(24),
						zorder: zorder+10,
						text: value.text,
						on_click: (def () -> commands [
							if(value.text != 'Language...', // XXX !!!!
								remove_object(me));
							value.callback()
						]),
						_font_size: lib.gui.py(18),
						color_scheme: {
							normal: [255, 192, 0],
							depressed: [255, 255, 255],
							focus: [192, 255 ,0],
							text_normal: [116, 122, 74],
							text_depressed: [0, 0, 0],
							text_focus: [0, 0, 255],
						},
						trap_escape: if(buttons_set.escape_trapping.active
								and buttons_set.escape_trapping.which_one = value.text,
							true, false),
					}, [
						add(_buttons, [child]),
					])
				)
				where left_side = lib.gui.screen_width / 2
					- text_width / 4
				where button_spacing = (text_width / 2)
					/ (max(1, size(buttons_set.buttons) - 1))
				, _change_music_volume(_preferences.music_volume)
				, _change_music_volume(_preferences.sound_volume)
			])
		]
		)
		",
		// show_dialog function field ends
	},

// 	events: {

// 	}

	on_create: "show_dialog()",

	on_being_removed: "[
		map(_paused, set(value.paused, false)),
		map(_buttons, remove_object(value)),
		remove_object(_text_area),
		remove_object(_music_label),
		remove_object(_sound_label),
	]",

	on_type_updated: "show_dialog()",
}
