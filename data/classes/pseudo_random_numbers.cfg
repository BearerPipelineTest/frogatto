{
	constructor: "init_pool({pool_size:_size_of_pool, pool_depth:_pool_size_multiplier})
							 asserting _size_of_pool > 0 and _pool_size_multiplier > 0 | 'The PRNG cannot generate any numbers if the pool of random rolls is empty; both constructor arguments have to be greater than zero.'",

	_current_pool: {type: "[int]", default: []},
	_previous_pool: {type: "[int]", default: []}, //because values are 'peeled off' the deck one by one, we need a separate copy if we want to query the entire prior run.

	_size_of_pool: {type: "int", default: 0},
	_pool_size_multiplier: {type: "int", default: 2},  //basically deal multiple copies of the same 'deck of cards'
	
	_last: "def([int] list) -> int list[size(list)-1] asserting size(list) > 0",
	
	get_next_value: "_last(_current_pool)",
	iterate_random_pool: "if(size(_current_pool) > 1, shrink_pool_by_one, create_next_pool(_size_of_pool, _pool_size_multiplier))",
	shrink_pool_by_one: "set(_current_pool, _current_pool[0 : size(_current_pool) - 1])",


	get_naive_next_pool: "def(int pool_size, int pool_size_mult) -> [int]
		shuffle(range(pool_size) * pool_size_mult)
	",
	get_non_repeating_next_pool: "def(int pool_size, int pool_size_mult) -> [int]
		/*
			We're doing some real funny-business here, compared to the old `get_naive_next_pool` function.   The intention is to prevent a common occurrence with deck shuffles, where it's possible for the 'final item' of the current shuffle to match the 'first item' of the next shuffle.   I.e. if you have [3 2 1] [1 2 3], then you have two instances of [1] back-to-back.

			What we have to do breaks the generality a bit, but basically instead of just doing a cheap 'build one copy of the new deck and multiply it by the number of decks in the shuffle', instead we manually build the very first deck in the shuffle.  We make sure the first card cannot be the offending card, and then we build the rest of the first deck.
		*/
	(
		new_first_deck + shuffle(range(pool_size) * (pool_size_mult - 1))
	)
		where new_first_deck = [new_first_card] + shuffle(filter(range(pool_size), not value = new_first_card))
		where new_first_card = shuffle(filter(range(pool_size), not value = offending_card))[0]
		where offending_card = _last(_previous_pool)
	",

	create_next_pool: "def(int pool_size, int pool_size_mult) -> commands

	[
		set(_current_pool, next_pool),
		set(_previous_pool, next_pool),
		set(_size_of_pool, pool_size),
	]
		where next_pool = if( size(_current_pool) = 0,
			get_naive_next_pool(pool_size, pool_size_mult),
			get_non_repeating_next_pool(pool_size, pool_size_mult)
		)
	",

	init_pool: 	"def( {pool_size: int, pool_depth: int} args ) -> commands [create_next_pool(args.pool_size, args.pool_depth), set(_pool_size_multiplier, args.pool_depth)]",
	

	debug: "debug(_current_pool)",
		    

}

//This class creates a pool of pseudo random numbers, which allow you the same benefit of doing e.g. 1d3 to pick one out of a set of behaviors for a character in frogatto, but with the safety of a guarantee that it's evenly distributed over a certain small interval of rolls, and that you won't get long runs of the same random value.  The main call for this is that some boss fights only allow the player to attack when the boss is in a particular "mode"; if the boss potentially never rolls this mode (as would be the case for a "true" random number), then we have no real control over the difficulty level of a fight - it could easily become impossible with a bad run of numbers.

//To use this, you need to 1]create an instance of the class (because it internally needs to store the pool it picks numbers from).  2] every time you pick a number, you need to separately query what said number is, and then cull it from the pool, in that order.  These have to be done separately because of FFL's functional nature; you can't have a function that both evaluates to a number and modifies a value.


/*  example usage:
properties: {
	_behavior_mode_prng:	{ type: "class pseudo_random_numbers", init: "construct('pseudo_random_numbers',{_size_of_pool:3, _pool_size_multiplier: 2})", persistent: false }
}

on_choose_mode:  "[	switch( _behavior_mode_prng.get_next_value,
								1,  do_attack,
								2,  do_idle,
								3, 	retreat_from_player ),
					_behavior_mode_prng.iterate_random_pool]",
*/