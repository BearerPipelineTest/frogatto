{

#-------------------------- spawning criterion --------------------------#
	max_objects: { type: "int", dynamic_initialization: true },
	spawnee_types: { type: "[string]", dynamic_initialization: true },

#-------------------------- culling criterion --------------------------#
	_x_bound: { type: "int|null", default: null },
	_x2_bound: { type: "int|null", default: null },
	_y_bound: { type: "int|null", default: null },
	_y2_bound: { type: "int|null", default: null },

	is_alive: "def(custom_obj _obj) -> bool (_obj.hitpoints > 0)",

	is_within_x_bounds: "def(custom_obj _obj) -> bool if(not (_x_bound = null or _x2_bound = null) , (_obj.mid_x > _x_bound and _obj.mid_x < _x2_bound), true)",
	is_within_y_bounds: "def(custom_obj _obj) -> bool if(not (_y_bound = null or _y2_bound = null) , (_obj.mid_y > _y_bound and _obj.mid_y < _y2_bound), true)",
	

#-------------------------- storage --------------------------#
	this_obj: { type: "custom_obj", dynamic_initialization: true },


#-------------------------- direct tracking logic --------------------------#
	/*
		An alternate system for our mook trackers is to directly track all the spawned objects via references.  Note that this means the provided bounds are meaningless and will not factor into whether an object is tracked, if this setting is used.  This is desirable because for some kinds of spawners, there's no good way to arrange the level geometry to keep them from spawning too many enemies.
		
		If we use this, one has the additional requirement to register each object upon spawn.
	*/

	directly_tracks_objects: { type: "bool", init: "false" },
	_tracked_objects: { type: "[custom_obj]", init: "[]" },
	
	register_tracked_object: "def(custom_obj addee) -> commands add(_tracked_objects, [addee])",


	
#-------------------------- processing --------------------------#
	process_list: "commands :: set(_tracked_objects, filter(_tracked_objects, is_alive(value)))",

	current_mooks: "[custom_obj] :: if(directly_tracks_objects,
		_tracked_objects,
		filter(current_level().chars, (value.type in spawnee_types) and is_within_x_bounds(value) and is_within_y_bounds(value) and is_alive(value))
	)",

		//the client using this must actually do the work of attaching the mook to the level, since that's the behavior that differs between different kinds of objects
	should_create_a_new_mook: "(size(current_mooks) < max_objects)",
	
}
